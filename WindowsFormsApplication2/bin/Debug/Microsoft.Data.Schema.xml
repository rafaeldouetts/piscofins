<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Data.Schema</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Data.Schema.ConnectionStringSecurer">
      <summary>Contains static methods that secure connection strings and restore secured connection strings.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.ConnectionStringSecurer.MakeSafeToPersist(System.String,System.String)">
      <summary>Returns a safe version of the connection string with sensitive parts, such as passwords, removed.</summary>
      <returns>A valid connection string with sensitive information removed.</returns>
      <param name="connectionString">The connection string to be secured.</param>
      <param name="adoDataProviderName">The name of the ADO.NET data provider for the connection string, such as "System.Data.SqlClient" for SQL Server.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.ConnectionStringSecurer.RestoreConnectionString(System.String,System.String)">
      <summary>Restores a safe partial connection string to its full form, which includes sensitive information such as passwords.</summary>
      <returns>A connection string with all sensitive information fully restored.</returns>
      <param name="partialConnection">The safe connection string as returned by the <see cref="M:Microsoft.Data.Schema.ConnectionStringSecurer.MakeSafeToPersist(System.String,System.String)" /> method.</param>
      <param name="dbProvider">The name of the ADO.NET data provider for the connection string, such as "System.Data.SqlClient" for SQL Server.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.DatabaseSchemaProvider">
      <summary>Provides a base class for a suite of factory objects and factory methods. These objects and methods are used to instantiate service objects that are related to schema and script modeling that, together, represent the core object of database projects in Visual Studio.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.DatabaseSchemaProvider.#ctor(System.Type[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" /> class by using the provided constructor types.</summary>
      <param name="serviceConstructorTypes">One or more <see cref="T:System.Type" /> objects that represent the types of service constructors to be registered with this provider, such as concrete versions of <see cref="T:Microsoft.Data.Schema.ServiceConstructor" />, <see cref="T:Microsoft.Data.Schema.SchemaModel.ParserConstructor" />, and <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelBuilderConstructor" />.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.DatabaseSchemaProvider.ExtensionManager">
      <summary>Gets the <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionManager" /> for the current database project in Visual Studio Team System 2008 Database Edition.</summary>
      <returns>The extension manager for the database project.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.DatabaseSchemaProvider.FamilyName">
      <summary>Gets the name of a group of providers. For example, the family name of the SQL Server family of database providers is "sql".</summary>
      <returns>The family name.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.DatabaseSchemaProvider.GetCompatibleDatabaseSchemaProviderType(System.String,System.String)">
      <summary>Returns the <see cref="T:System.Type" /> that represents the type of provider that is appropriate for the version of the database pointed to by the provided connection string, and for the provided family name.</summary>
      <returns>The appropriate type of provider.</returns>
      <param name="familyName">The provider family name.</param>
      <param name="connectionString">The database connection string.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.DatabaseSchemaProvider.GetCompatibleDatabaseSchemaProviderTypes(System.Guid,System.Guid,System.String)">
      <summary>Returns a list of provider types that are compatible with this provider.</summary>
      <returns>A list of types for compatible schema providers.</returns>
      <param name="serverExplorerDataSource">A <see cref="T:System.Guid" /> that identifies the data source for the connection.</param>
      <param name="serverExplorerDataProvider">A <see cref="T:System.Guid" /> that identifies the data provider for the connection.</param>
      <param name="connectionString">The database connection string.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.DatabaseSchemaProvider.GetSchemaUpgradeXslt(System.String)">
      <summary>When implemented in a derived class, returns XSLT to convert a schema model of the provided version to match the current schema model.</summary>
      <returns>An XSLT string to perform the conversion if a database that has the provided version can be converted to match that of the <see cref="P:Microsoft.Data.Schema.DatabaseSchemaProvider.ModelSchema" /> property; otherwise, null.</returns>
      <param name="fromVersion">An XML string that contains the database schema to be converted.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.DatabaseSchemaProvider.GetService``1">
      <summary>Returns an instantiated service object that is registered with this provider and identified by the provided <see cref="T:System.Type" />.</summary>
      <returns>The requested service object, if one is registered.</returns>
      <typeparam name="TService">A <see cref="T:System.Type" /> that identifies the <see cref="T:Microsoft.Data.Schema.Extensibility.DataProviderServices" /> object to return.</typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.DatabaseSchemaProvider.GetServiceConstructor``1">
      <summary>Returns a constructor for the service that is identified by the provided <see cref="T:System.Type" />.</summary>
      <returns>The registered service of the specified <see cref="T:System.Type" />.</returns>
      <typeparam name="TServiceConstructor">A <see cref="T:System.Type" /> that identifies the <see cref="T:Microsoft.Data.Schema.ServiceConstructor" /> object to return.</typeparam>
      <exception cref="T:Microsoft.Data.Schema.Extensibility.ExtensibilityException">More than one service constructor matches the requested <see cref="T:System.Type" />, or no matching constructor can be found.</exception>
    </member>
    <member name="P:Microsoft.Data.Schema.DatabaseSchemaProvider.ModelSchema">
      <summary>Gets the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelSchema" /> object for this provider.</summary>
      <returns>The model schema for this provider.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.DatabaseSchemaProvider.RegisterModelTypes(Microsoft.Data.Schema.SchemaModel.ModelSchema)">
      <summary>When implemented in a derived class, registers the model types that are found in the provided model schema.</summary>
      <param name="modelSchema">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelSchema" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.DatabaseSchemaProvider.SchemaVersionSupported(System.String)">
      <summary>Returns a value that indicates whether the provided version is the same as that of the schema model, or whether an XLST is available to convert the schema model to the provided version.</summary>
      <returns>true if the provided version matches that of the <see cref="P:Microsoft.Data.Schema.DatabaseSchemaProvider.ModelSchema" /> property, or if the <see cref="M:Microsoft.Data.Schema.DatabaseSchemaProvider.GetSchemaUpgradeXslt(System.String)" /> method returns XSLT that can upgrade the schema model to the provided version; otherwise, false. </returns>
      <param name="version">The version to use to determine supportability.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.DatabaseSchemaProvider.UserInteractionServices">
      <summary>When implemented in a derived class, gets the <see cref="T:Microsoft.Data.Schema.UserInteractionServices" /> object for this provider.</summary>
      <returns>The user interaction services for this provider.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.DataSchemaError">
      <summary>Encapsulates the information needed to create a corresponding entry in the Visual Studio Error List.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.DataSchemaError.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.DataSchemaError.#ctor(System.String,Microsoft.Data.Schema.ErrorSeverity)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> class. </summary>
      <param name="message"></param>
      <param name="severity"></param>
    </member>
    <member name="M:Microsoft.Data.Schema.DataSchemaError.#ctor(System.String,System.String,Microsoft.Data.Schema.ErrorSeverity)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> class. </summary>
      <param name="message"></param>
      <param name="document"></param>
      <param name="severity"></param>
    </member>
    <member name="M:Microsoft.Data.Schema.DataSchemaError.#ctor(System.String,System.String,System.Int32,Microsoft.Data.Schema.ErrorSeverity)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> class. </summary>
      <param name="message"></param>
      <param name="document"></param>
      <param name="errorCode"></param>
      <param name="severity"></param>
    </member>
    <member name="M:Microsoft.Data.Schema.DataSchemaError.#ctor(System.String,System.String,System.Int32,System.Int32,Microsoft.Data.Schema.ErrorSeverity)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> class. </summary>
      <param name="message"></param>
      <param name="document"></param>
      <param name="line"></param>
      <param name="column"></param>
      <param name="severity"></param>
    </member>
    <member name="M:Microsoft.Data.Schema.DataSchemaError.#ctor(System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,Microsoft.Data.Schema.ErrorSeverity)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> class. </summary>
      <param name="message"></param>
      <param name="document"></param>
      <param name="line"></param>
      <param name="column"></param>
      <param name="prefix"></param>
      <param name="errorCode"></param>
      <param name="severity"></param>
    </member>
    <member name="P:Microsoft.Data.Schema.DataSchemaError.BuildErrorCode">
      <summary>Gets the error code for a build error.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.DataSchemaError.Column">
      <summary>Gets or sets the column in which the error occurred.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.DataSchemaError.Document">
      <summary>Gets or sets the document in which the error occurred.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.DataSchemaError.ErrorCode">
      <summary>Gets the error code.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.DataSchemaError.HelpKeyword">
      <summary>Gets or sets the F1 keyword.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.DataSchemaError.Line">
      <summary>Gets or sets the line number in which the error occurred.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.DataSchemaError.Message">
      <summary>Gets or sets the text of the error.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.DataSchemaError.Prefix">
      <summary>Gets the error prefix code.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.DataSchemaError.Severity">
      <summary>Gets the severity of the error.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.DataSchemaError.UndefinedErrorCode">
      <summary>The constant that is used to indicate that an undefined error has occurred.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.DataSchemaException">
      <summary>Provides a base class for all exceptions in the <see cref="N:Microsoft.Data.Schema" /> namespace, including its contained sub-namespaces.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.DataSchemaException.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.Data.Schema.DataSchemaException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.DataSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.Data.Schema.DataSchemaException" /> class using the provided information and context.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object used by runtime serialization</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object used by runtime serialization</param>
    </member>
    <member name="M:Microsoft.Data.Schema.DataSchemaException.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.Data.Schema.DataSchemaException" /> class using the provided message.</summary>
      <param name="message">A string indicating the reason for the exception</param>
    </member>
    <member name="M:Microsoft.Data.Schema.DataSchemaException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.Data.Schema.DataSchemaException" /> class using the provided message and inner exception.</summary>
      <param name="message">A string indicating the reason for the exception.</param>
      <param name="innerException">An nested <see cref="T:System.Exception" />.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.ElementIconState">
      <summary>Specifies which icon most accurately indicates the state of an <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> in Visual Studio.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.ElementIconState.Resolved">
      <summary>Show the "resolved" icon.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.ElementIconState.Warning">
      <summary>Show the "warning" icon.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.ElementIconState.Error">
      <summary>Show the "error" icon.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.ElementNameStyle">
      <summary>Specifies how the name of an element should appear in the user interface.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.ElementNameStyle.SimpleName">
      <summary>Indicates an element name.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.ElementNameStyle.EscapedSimpleName">
      <summary>Indicates an element name that is escaped for use as a URL.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.ElementNameStyle.FullyQualifiedName">
      <summary>Indicates a fully qualified type name.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.ElementNameStyle.EscapedFullyQualifiedName">
      <summary>Indicates a fully qualified type name that is escaped for use as a URI.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.ElementNameStyle.ObjectTypeName">
      <summary>Indicates an element object type name.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.ElementNameStyle.ObjectNameWithTypeDescription">
      <summary>Indicates an element name together with a description.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.ErrorEventArgs">
      <summary>Provides arguments for events in the <see cref="T:Microsoft.Data.Schema.ErrorManager" /> class.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.ErrorEventArgs.ErrorManager">
      <summary>Gets the <see cref="T:Microsoft.Data.Schema.ErrorManager" /> that is automatically associated with this instance.</summary>
      <returns>The <see cref="T:Microsoft.Data.Schema.ErrorManager" /> object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.ErrorEventArgs.Errors">
      <summary>A collection of errors that are associated with the event.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> object that contains <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> objects.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.ErrorEventArgs.LatestTooManyErrorsError">
      <summary>Gets the most recent error that indicates that the Error List in Visual Studio contained too many errors.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.DataSchemaError" />.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.ErrorManager">
      <summary>Manages the errors that are listed in the Error List window of Visual Studio.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.ErrorManager" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.Add(Microsoft.Data.Schema.DataSchemaError,System.Object)">
      <summary>Adds the provided <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> object to the Error List window of Visual Studio by using the specified category.</summary>
      <param name="errorToAdd">The <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> object to add.</param>
      <param name="category">An <see cref="T:System.Object" /> that represents the document type or object type to categorize the error. The internal categories are represented as Guid strings.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.Add(Microsoft.Data.Schema.DataSchemaError,System.Object,System.Boolean)"></member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.Add(System.Collections.Generic.IList{Microsoft.Data.Schema.DataSchemaError},System.Object)">
      <summary>Adds a collection of <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> objects to the Error List window of Visual Studio in the specified category.</summary>
      <param name="errorsToAdd">An <see cref="T:System.Collections.Generic.IList`1" /> object that contains one or more <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> objects.</param>
      <param name="category">An <see cref="T:System.Object" /> that represents the document type or object type to categorize the error. The internal categories are represented as Guid strings.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.Add(System.Collections.Generic.IList{Microsoft.Data.Schema.DataSchemaError},System.Object,System.Boolean)"></member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.AddPersistedCategory(System.Object)">
      <summary>Designates that errors added to the Errors List window of Visual Studio, together with the provided category, will be persisted.</summary>
      <param name="category">An <see cref="T:System.Object" /> that represents the document type or object type to categorize the error. The internal categories are represented as Guid strings.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.ErrorManager.BuildCategory">
      <summary>Gets the object that represents the build category.</summary>
      <returns>The <see cref="T:System.Object" /> that represents the build category.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.ClearCategory(System.Object)">
      <summary>Removes all errors that have the provided category from the Error List window of Visual Studio.</summary>
      <param name="category">An <see cref="T:System.Object" /> that represents the document type or object type for to categorize the error. The internal categories are represented as Guid strings.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.ErrorManager.DefaultCategory">
      <summary>Gets the object that represents the default category.</summary>
      <returns>The <see cref="T:System.Object" /> that represents the default category.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.ErrorManager.DeployCategory">
      <summary>Gets the object that represents the deploy category.</summary>
      <returns>The <see cref="T:System.Object" /> that represents the default category.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.Dispose">
      <summary>Releases all resources that are used by the current instance of the <see cref="T:Microsoft.Data.Schema.ErrorManager" /> class.</summary>
    </member>
    <member name="E:Microsoft.Data.Schema.ErrorManager.Disposed">
      <summary>Occurs when the <see cref="T:Microsoft.Data.Schema.ErrorManager" /> has been disposed.</summary>
    </member>
    <member name="E:Microsoft.Data.Schema.ErrorManager.ErrorManagerRefreshed">
      <summary>Occurs when the data in the <see cref="T:Microsoft.Data.Schema.ErrorManager" /> has been refreshed.</summary>
    </member>
    <member name="E:Microsoft.Data.Schema.ErrorManager.ErrorsChanged">
      <summary>Occurs when one or more errors have been added or removed from the Error List window of Visual Studio.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.ErrorManager.ExternalsResolutionCategory">
      <summary>Gets the object that represents the resolution category.</summary>
      <returns>The <see cref="T:System.Object" /> that represents the resolution category.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.Find(System.Predicate{Microsoft.Data.Schema.DataSchemaError},System.Object)"></member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.Find(System.String,System.Object)">
      <summary>Retrieves a list of all <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> objects that belong to the specified category and document.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> object that contains one or more <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> objects.</returns>
      <param name="document">The file name of the document where the error occurred.</param>
      <param name="category">An <see cref="T:System.Object" /> that represents the document type or object type to categorize the error. The internal categories are represented as Guid strings.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.GetAllCategories">
      <summary>Retrieves a list of all categories that exist.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> object that contains one or more objects, each of which represents a category.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.GetAllErrors">
      <summary>Retrieves a list of all errors in the <see cref="T:Microsoft.Data.Schema.ErrorManager" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> object that contains zero or more <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> objects.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.GetAllErrors(System.Object)">
      <summary>Retrieves a list of all errors in the <see cref="T:Microsoft.Data.Schema.ErrorManager" /> that belong to the specified category.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> object that contains zero or more <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> objects.</returns>
      <param name="category">An <see cref="T:System.Object" /> that represents the document type or object type to categorize the error. The internal categories are represented as Guid strings.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.GetCategories(System.Boolean)"></member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.GetErrorCounts(System.Object,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Retrieves the counts of errors that belong to the provided category. Counts are returned for several levels of severity.</summary>
      <param name="category">An <see cref="T:System.Object" /> that represents the document type or object type for to categorize the error. The internal categories are represented as Guid strings.</param>
      <param name="errorCount">A returned int that represents the number of items in the list that have a <see cref="P:Microsoft.Data.Schema.DataSchemaError.Severity" /> of Error.</param>
      <param name="warningCount">A returned int that represents the number of items in the list that have a <see cref="P:Microsoft.Data.Schema.DataSchemaError.Severity" /> of Warning.</param>
      <param name="messageCount">A returned int that represents the number of items in the list that have a <see cref="P:Microsoft.Data.Schema.DataSchemaError.Severity" /> of Message.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.ErrorManager" /> class. </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.MergeWith(Microsoft.Data.Schema.ErrorManager)">
      <summary>Copies the errors from another <see cref="T:Microsoft.Data.Schema.ErrorManager" /> object.</summary>
      <param name="otherErrorManager">An <see cref="T:Microsoft.Data.Schema.ErrorManager" /> object.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.ErrorManager.ModelCategory">
      <summary>Gets the object that represents the model category.</summary>
      <returns>The <see cref="T:System.Object" /> that represents the model category.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.ErrorManager.ProjectPropertiesCategory">
      <summary>Gets the object that represents the project properties category.</summary>
      <returns>The <see cref="T:System.Object" /> that represents the project properties category.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.Remove(Microsoft.Data.Schema.DataSchemaError,System.Object)">
      <summary>Removes the specified <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> object from the Error List window of Visual Studio.</summary>
      <param name="errorToRemove">A <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> object to remove.</param>
      <param name="category">An <see cref="T:System.Object" /> that represents the document type or object type to categorize the error. The internal categories are represented as Guid strings.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.Remove(System.Collections.Generic.IList{Microsoft.Data.Schema.DataSchemaError},System.Object)">
      <summary>Removes the specified <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> objects from the Error List window of Visual Studio.</summary>
      <param name="errorsToRemove">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> objects that represent the errors to remove.</param>
      <param name="category">An <see cref="T:System.Object" /> that represents the document type or object type to categorize the error. The internal categories are represented as Guid strings.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.Remove(System.Predicate{Microsoft.Data.Schema.DataSchemaError},System.Object)"></member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.Remove(System.String,System.Object)">
      <summary>Removes the Error List window of Visual Studio all <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> objects from that share the provided document file name and category.</summary>
      <param name="document">The file name of the document where the error occurred.  this is represented by the value of the <see cref="P:Microsoft.Data.Schema.DataSchemaError.Document" /> property of the error.</param>
      <param name="category">An <see cref="T:System.Object" /> that represents the document type or object type to categorize the error. The internal categories are represented as Guid strings.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.ErrorManager.UpdateErrorsDocumentName(System.String,System.String,System.Object)">
      <summary>Changes the name of the document in the <see cref="P:Microsoft.Data.Schema.DataSchemaError.Document" /> property of all <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> objects in the Error List window of Visual Studio that belong to the specified category.</summary>
      <param name="oldFileName">A string that contains the old document file name.</param>
      <param name="newFileName">A string that contains the new document file name.</param>
      <param name="category">An <see cref="T:System.Object" /> that represents the document type or object type to categorize the error. The internal categories are represented as Guid strings.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.ErrorManager.ValidationAtBuildCategory">
      <summary>Gets the object that represents the validation category.</summary>
      <returns>The <see cref="T:System.Object" /> that represents the validation category.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.ErrorManager.ValidationOnIdleCategory">
      <summary>Gets the object that represents the validation on idle category.</summary>
      <returns>The <see cref="T:System.Object" /> that represents the resolution category.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.ErrorsChangedEventArgs">
      <summary>Provides information about pending changes to the list of errors in the Errors List window of Visual Studio.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.ErrorsChangedEventArgs.ErrorManager">
      <summary>Gets the <see cref="T:Microsoft.Data.Schema.ErrorManager" /> object that is associated with the event.</summary>
      <returns>An <see cref="T:Microsoft.Data.Schema.ErrorManager" /> object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.ErrorsChangedEventArgs.ErrorsAdded">
      <summary>Gets the list of errors to be added to the Error List window of Visual Studio.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" /> object that contains the <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> objects to be added.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.ErrorsChangedEventArgs.ErrorsRemoved">
      <summary>Gets the list of errors to be removed from the Error List window of Visual Studio.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.Collections.ICollectionContract`1" /> object that contains the <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> objects to be removed.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.ErrorsChangedEventArgs.LatestTooManyErrorsError">
      <summary>Gets the most recent error that reports that the Error List window of Visual Studio contains too many errors.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.ErrorsChangedEventArgs.SetTooManyErrorsError">
      <summary>This method currently does nothing.</summary>
      <returns>true if the method was successful; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.ErrorSeverity">
      <summary>Describes the severity of a <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> object.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.ErrorSeverity.Unknown">
      <summary>The error severity is unknown.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.ErrorSeverity.Error">
      <summary>The error object represents an exception.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.ErrorSeverity.Warning">
      <summary>The error object records a warning.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.ErrorSeverity.Message">
      <summary>The error object records a message.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.FolderIconStyle">
      <summary>Defines the icon styles that appear in the interface. </summary>
    </member>
    <member name="F:Microsoft.Data.Schema.FolderIconStyle.Open">
      <summary>Indicates the folder is open.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.FolderIconStyle.Close">
      <summary>Indicates the folder is closed.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.IErrorManagerLimiter">
      <summary>Provides an interface between the Error List window of Visual Studio and the <see cref="T:Microsoft.Data.Schema.ErrorManager" /> to specify how the list should display the errors.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.IErrorManagerLimiter.ErrorLimit">
      <summary>Indicates the desired limit to the number of items that should appear in the Error List window of Visual Studio.</summary>
      <returns>An int representing the maximum number of error items desired to appear in the Error List window of Visual Studio.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.IErrorManagerLimiter.IsSuppressed(Microsoft.Data.Schema.ErrorManager,Microsoft.Data.Schema.DataSchemaError)">
      <summary>Retrieves a value that indicates whether displaying the provided error should be suppressed.</summary>
      <returns>true if the error is to be suppressed; otherwise false.</returns>
      <param name="errorManager">The associated <see cref="T:Microsoft.Data.Schema.ErrorManager" /> object.</param>
      <param name="theError">The <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> being considered.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.IErrorManagerLimiter.TreatWarningsAsErrors(Microsoft.Data.Schema.ErrorManager)">
      <summary>Retrieves a value that indicates whether warnings and errors should be segregated in the Error List window of Visual Studio.</summary>
      <returns>true if warnings should be treated as errors; otherwise false.</returns>
      <param name="errorManager">The associated <see cref="T:Microsoft.Data.Schema.ErrorManager" /> object.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.OdbcConnectionStringParser">
      <summary>Parses an Open Database Connectivity (ODBC) connection string and creates a version of the string that is safe to persist.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.OdbcConnectionStringParser.Instance">
      <summary>Gets an instance of the <see cref="T:Microsoft.Data.Schema.OdbcConnectionStringParser" /> class.</summary>
      <returns>A parser for an ODBC connection string.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.OdbcConnectionStringParser.MakeSafeToPersist(System.String)">
      <summary>Returns a connection string that is safe to persist.</summary>
      <returns>A connection string that is safe to persist.</returns>
      <param name="connectionString">A connection string to an ODBC database.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.OleDbConnectionStringParser">
      <summary>Parses an OLE DB connection string and creates a version of the string that is safe to persist.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.OleDbConnectionStringParser.Instance">
      <summary>Gets an instance of the <see cref="T:Microsoft.Data.Schema.OleDbConnectionStringParser" /> class.</summary>
      <returns>A parser for an OLE DB connection string.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.OleDbConnectionStringParser.MakeSafeToPersist(System.String)">
      <summary>Returns a connection string that is safe to persist.</summary>
      <returns>A connection string that is safe to persist.</returns>
      <param name="connectionString">A connection string to an OLE DB database.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.OracleConnectionStringParser">
      <summary>Parses an Oracle connection string and creates a version of the string that might be safe to persist.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.OracleConnectionStringParser.Instance">
      <summary>Gets an instance of the <see cref="T:Microsoft.Data.Schema.OracleConnectionStringParser" /> class.</summary>
      <returns>A parser for an Oracle connection string.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.OracleConnectionStringParser.MakeSafeToPersist(System.String)">
      <summary>Returns a connection string that might be safe to persist.</summary>
      <returns>A connection string that is safe to persist.</returns>
      <param name="connectionString">A connection string to an Oracle database.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.ServiceConstructor">
      <summary>Represents the base class for a service constructor.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.ServiceConstructor.DatabaseSchemaProvider">
      <summary>Gets or sets the current database schema provider.</summary>
      <returns>The current <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" /> object.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.ServiceConstructor`1">
      <summary>Provides a base class for service constructors.</summary>
      <typeparam name="TService">A <see cref="T:System.Type" /> that determines the type of service object that instances of this class can create.</typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.ServiceConstructor`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.ServiceConstructor`1" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.ServiceConstructor`1.Clone">
      <summary>Duplicates the current instance.</summary>
      <returns>A duplicate of the current instance that is created by using the <see cref="M:System.Object.MemberwiseClone" /> method that is inherited from <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.ServiceConstructor`1.ConstructService">
      <summary>Called by a <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" /> to create an instance of the specified <paramref name="TService" /> type.</summary>
      <returns>An instance of the specified type.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.ServiceConstructor`1.ConstructServiceImplementation">
      <summary>Called by the <see cref="M:Microsoft.Data.Schema.ServiceConstructor`1.ConstructService" /> method to return a new instance of the specified <paramref name="TService" /><see cref="T:System.Type" />. </summary>
      <returns>An instance of the specified type.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SqlCeConnectionStringParser">
      <summary>Parses a SQL Server Compact Edition connection string and creates a version of the string that is safe to persist.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SqlCeConnectionStringParser.Instance">
      <summary>Gets an instance of the <see cref="T:Microsoft.Data.Schema.SqlCeConnectionStringParser" /> class.</summary>
      <returns>A parser for a SQL Server Compact Edition connection string.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SqlCeConnectionStringParser.MakeSafeToPersist(System.String)">
      <summary>Returns a connection string that is safe to persist.</summary>
      <returns>A connection string that is safe to persist.</returns>
      <param name="connectionString">A connection string to a SQL Server Compact Edition database.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SqlConnectionStringParser">
      <summary>Parses a SQL Server connection string and creates a version of the string that is safe to persist.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SqlConnectionStringParser.Instance">
      <summary>Gets an instance of the <see cref="T:Microsoft.Data.Schema.SqlConnectionStringParser" /> class.</summary>
      <returns>A parser for a SQL Server connection string.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SqlConnectionStringParser.MakeSafeToPersist(System.String)">
      <summary>Returns a connection string that is safe to persist.</summary>
      <returns>A connection string that is safe to persist.</returns>
      <param name="connectionString">A connection string to a SQL Server database.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SqlProviderServices">
      <summary>Provides access to the ActiveX Data Objects (ADO) provider name and the SQL Server connection string parser.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SqlProviderServices.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SqlProviderServices" /> class. </summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SqlProviderServices.AdoProvider">
      <summary>Gets the name of the ADO provider.</summary>
      <returns>A string that contains the name of the ADO provider.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SqlProviderServices.ConnectionStringParser">
      <summary>Gets an instance of the <see cref="T:Microsoft.Data.Schema.SqlConnectionStringParser" />.</summary>
      <returns>The <see cref="T:Microsoft.Data.Schema.SqlConnectionStringParser" /> object.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.UserInteractionServices">
      <summary>Provides a variety of helper methods and properties to facilitate user interaction with the windows in Visual Studio.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.UserInteractionServices" /> class.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.UserInteractionServices.BatchSeparator">
      <summary>Gets a string to insert between each batch of script.</summary>
      <returns>The batch separator. The default is @"\r\n\r\n\r\n".</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.UserInteractionServices.DatabaseSchemaProvider">
      <summary>Gets a reference to the current <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
      <returns>The current database schema provider (DSP).</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.UserInteractionServices.DatabaseSchemaProviderDisplayName">
      <summary>Gets the full name of the DSP.</summary>
      <returns>The DSP name.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.UserInteractionServices.DisplayableElementClasses">
      <summary>Gets a list of the displayable element classes in the <see cref="P:Microsoft.Data.Schema.DatabaseSchemaProvider.ModelSchema" /> of the DSP.</summary>
      <returns>The element types in the model schema. The default implementation first lists the root element types, then all the types that are children of those types.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.GetDisplayName(Microsoft.Data.Schema.SchemaModel.ModelIdentifier,System.Boolean,System.Boolean)">
      <summary>Returns a display name for an identifier that specifies whether to use an escape character on the name, and whether to provide the full name or a short version.</summary>
      <returns>The name of the specified element.</returns>
      <param name="identifier">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> for the element.</param>
      <param name="escape">true to escape the returned name.</param>
      <param name="fullName">true to return the full element name.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.GetDisplayName(Microsoft.Data.Schema.SchemaModel.ModelIdentifier,System.Boolean,System.Boolean,System.Int32)">
      <summary>Returns a display name for an identifier.</summary>
      <returns>The name of the specified element.</returns>
      <param name="identifier">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> for the element.</param>
      <param name="escape">true to escape the returned name.</param>
      <param name="fullName">true to return the full element name.</param>
      <param name="numberOfPartsToSkip">An int that indicates the number of name parts from the front to skip.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.GetElementName(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.ElementNameStyle)">
      <summary>Returns the element name for the specified element. </summary>
      <returns>The element name in the specified style.</returns>
      <param name="element">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElement" /> object.</param>
      <param name="style">An <see cref="T:Microsoft.Data.Schema.ElementNameStyle" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.GetElementName(Microsoft.Data.Schema.SchemaModel.IModelElement,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Returns the name for the specified element.</summary>
      <returns>The element name.</returns>
      <param name="element"></param>
      <param name="escape"></param>
      <param name="fullName">true to return the full element name.</param>
      <param name="includeType">true to indicate that the type of the element is included.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.GetElementName(Microsoft.Data.Schema.SchemaModel.IModelElement,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary>Returns the element name for the specified element.</summary>
      <returns>The element name.</returns>
      <param name="element">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElement" /> object.</param>
      <param name="escape">true to escape the returned name.</param>
      <param name="fullName">true to return the full element name.</param>
      <param name="includeType">true to append the element type description to the beginning of the string.</param>
      <param name="numberOfPartsToSkip">An int that indicates the number of name parts from the front to skip.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.GetElementTypeDescription(Microsoft.Data.Schema.SchemaModel.ModelElementClass)">
      <summary>Returns the type description of the specified element.</summary>
      <returns>The type description for the provided element.</returns>
      <param name="elementClass">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElementClass" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.GetEscapedNameString(System.String)">
      <summary>Returns an escaped version of the provided name.</summary>
      <returns>The escaped name.</returns>
      <param name="name">A string that contains the name to be escaped.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.GetFileExtension(Microsoft.Data.Schema.SchemaModel.ModelElementClass)">
      <summary>Returns the file extension for model elements for the current <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" /> when they are saved to a file.</summary>
      <returns>A string that contains the file extension. For SQL Server elements, the extension is ".sql".</returns>
      <param name="elementType">The <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElementClass" /> metadata object for a <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElement" />.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.GetFolderIcon(Microsoft.Data.Schema.FolderIconStyle)">
      <summary>Returns a bitmap icon that is selected according to the provided style indication.</summary>
      <returns>An icon that indicates whether the folder is open or closed.</returns>
      <param name="style">A member of the <see cref="T:Microsoft.Data.Schema.FolderIconStyle" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.GetFolderName(Microsoft.Data.Schema.SchemaModel.ModelElementClass)">
      <summary>Returns a folder name for the specified model element type.</summary>
      <returns>The name of the folder for the provided model element.</returns>
      <param name="elementType">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElementClass" /> metadata object for a <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElement" />.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.GetIcon(Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Returns a bitmap for an icon to use in the UI to match the provided element.</summary>
      <returns>A bitmap for the requested icon.</returns>
      <param name="element">An <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.GetIcon(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.ElementIconState)">
      <summary>Returns a bitmap for an icon to use in the UI to match the provided element and icon state.</summary>
      <returns>A bitmap for the requested icon.</returns>
      <param name="element">An <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> object.</param>
      <param name="state">A member of the <see cref="T:Microsoft.Data.Schema.ElementIconState" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.GetIcon(Microsoft.Data.Schema.SchemaModel.ModelElementClass)">
      <summary>Returns a bitmap for an icon to use in the UI to match the provided element.</summary>
      <returns>A bitmap for the requested icon.</returns>
      <param name="elementType">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElementClass" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.GetIcon(Microsoft.Data.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Schema.ElementIconState)">
      <summary>Returns a bitmap for an icon to use in the UI to match the provided element and icon state.</summary>
      <returns>A bitmap for the requested icon.</returns>
      <param name="elementType">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElementClass" /> object.</param>
      <param name="state">A member of the <see cref="T:Microsoft.Data.Schema.ElementIconState" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.GetModelCollation(System.Int32,System.Boolean)">
      <summary>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelCollation" /> object for the provided culture ID and case sensitivity indication.</summary>
      <returns>The requested collation.</returns>
      <param name="lcid">An int that represents the ID for the culture.</param>
      <param name="caseSensitive">true to specify case sensitive; false to specify case insensitive.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.GetNameString(System.String,System.Boolean)">
      <summary>Returns the name and escapes the string, if requested.</summary>
      <returns>The provided name.</returns>
      <param name="name">The string to return.</param>
      <param name="escape">true to escape the <paramref name="name" />.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.GetRelatedElementTypeDescription(Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass)">
      <summary>Returns a description of the related object in the provided relationship.</summary>
      <returns>The type description of the related model element.</returns>
      <param name="relationship">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass" /> metadata object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.MakeIconTransparent(System.Drawing.Bitmap)">
      <summary>Makes the provided icon transparent by using the value of the <see cref="P:Microsoft.Data.Schema.UserInteractionServices.TransparentColor" /> property.</summary>
      <returns>The transparent icon.</returns>
      <param name="icon">The <see cref="T:System.Drawing.Bitmap" /> to make transparent.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.UserInteractionServices.ProjectIcon">
      <summary>Gets the icon for the specific DSP project.</summary>
      <returns>The bitmap for the current database project icon.</returns>
    </member>
    <member name="F:Microsoft.Data.Schema.UserInteractionServices.SqlExtension">
      <summary>Returns ".sql".</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.UserInteractionServices.TransparentColor">
      <summary>Gets the color used to make parts of a bitmap transparent.</summary>
      <returns>The color to be used to make a bitmap transparent. The default is Color.Magenta.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.UserInteractionServices.TryConstructConnectionStringAndProvider(System.String,System.String,System.Guid@,System.String@)">
      <summary>Used to get the connection string and the GUID of the provider.</summary>
      <returns>Returns true if it was able to construct the connection string and get the correct GUID; otherwise, false.</returns>
      <param name="connectionString"></param>
      <param name="databaseName"></param>
      <param name="provider"></param>
      <param name="formattedConnectionString"></param>
    </member>
    <member name="P:Microsoft.Data.Schema.UserInteractionServices.Unnamed">
      <summary>Gets a localized string for "unnamed."</summary>
      <returns>A localized value that indicates a status of unnamed.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.AgnosticProjectProperties">
      <summary>Provides static properties of projects in Visual Studio that are not dependent on any specific <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.AgnosticProjectProperties.GetValidators">
      <summary>Returns a dictionary of validators to make sure that the property file data is valid.</summary>
      <returns>A dictionary of validators.</returns>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.PropertyType">
      <summary>Contains "PropertyType".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.ServerProjectTargetDatabase_DefaultDatabase">
      <summary>Contains "master".</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project">
      <summary>Provides the static project properties that are used by the user interface of Visual Studio, that are part of the <see cref="T:Microsoft.Data.Schema.Build.AgnosticProjectProperties" /> class. These properties are not dependent on any specific <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.CatalogPropertiesFile">
      <summary>Contains "CatalogPropertiesFile".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.DeployScriptFileName">
      <summary>Contains "DeployScriptFileName".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.DeployToDatabase">
      <summary>Contains "DeployToDatabase".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.DeployToDatabaseAddToServerExplorer">
      <summary>Contains "DeployToDatabaseAddToServerExplorer".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.DeployToScript">
      <summary>Contains "DeployToScript".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.DSP">
      <summary>Contains "DSP".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.FinalDeployScriptFile">
      <summary>Contains "FinalDeployScriptFile".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.FinalTargetConnectionString">
      <summary>Contains "FinalTargetConnectionString".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.FinalTargetDatabase">
      <summary>Contains "FinalTargetDatabase".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.ModelCollation">
      <summary>Contains "ModelCollation".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.OutputPath">
      <summary>Contains "OutputPath".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.PostUpgradeAddToSCC">
      <summary>Contains "PostUpgradeAddToSCC".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.PreviousProjectVersion">
      <summary>Contains "PreviousProjectVersion".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.ProjectVersion">
      <summary>Contains "ProjectVersion".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.RemoveEmptyPartialProjectFolders"></member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.ServerPropertiesFile">
      <summary>Contains "ServerPropertiesFile".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.SuppressWarnings">
      <summary>Contains "SuppressWarnings".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.TargetConnectionString"></member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.TargetDatabase">
      <summary>Contains "TargetDatabase".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.TargetExt">
      <summary>Contains "TargetExt".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.TreatWarningsAsErrors">
      <summary>Contains "TreatWarningsAsErrors".</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.Sandbox">
      <summary>Provides the static project sandbox properties that are used by the user interface of Visual Studio and that are part of the <see cref="T:Microsoft.Data.Schema.Build.AgnosticProjectProperties" /> class. These properties are not dependent on any specific <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.Sandbox.SandboxDeployScriptFileName">
      <summary>Contains "SandboxDeployScriptFileName".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.Sandbox.SandboxDeployToDatabase">
      <summary>Contains "SandboxDeployToDatabase".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.Sandbox.SandboxDeployToScript">
      <summary>Contains "SandboxDeployToScript".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.Sandbox.SandboxTargetConnectionString">
      <summary>Contains "SandboxTargetConnectionString".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.Sandbox.SandboxTargetDatabase">
      <summary>Contains "SandboxTargetDatabase".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Project.Sandbox.UseSandboxSettings">
      <summary>Contains "UseSandboxSettings".</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.AgnosticProjectProperties.PropertyTypeValue">
      <summary>Provides the static type value properties that are used by the user interface of Visual Studio that are part of the <see cref="T:Microsoft.Data.Schema.Build.AgnosticProjectProperties" /> class. These properties are not dependent on any specific <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.PropertyTypeValue.Catalog">
      <summary>Contains "Catalog".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.PropertyTypeValue.Server">
      <summary>Contains "Server".</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions">
      <summary>Provides the static version properties that are used by the user interface of Visual Studio that are part of the <see cref="T:Microsoft.Data.Schema.Build.AgnosticProjectProperties" /> class. These properties are not dependent on any specific <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.Dev10ProjectVersion">
      <summary>Returns "4.0".</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.IsLaterProjectVersion(System.String)">
      <summary>Returns a value that indicates whether the provided project version represents a later version than any that can work with Visual Studio.</summary>
      <returns>true if it can be handled; otherwise, false.</returns>
      <param name="version">A project version string.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.IsLatestVersion(System.String)">
      <summary>Returns a value that indicates whether the provided project version is equal to the value of the <see cref="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.LatestProjectVersion" />.</summary>
      <returns>true if the project version is the latest version that can be handled; otherwise, false.</returns>
      <param name="version">A project version string.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.IsPreDev10(System.String)">
      <summary>Returns a value that indicates whether the provided project version is earlier than the value of the <see cref="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.Dev10ProjectVersion" /> field.</summary>
      <returns>true if the version is previous to the current version; otherwise, false.</returns>
      <param name="version">A project version string.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.IsPreRosario(System.String)">
      <summary>Returns a value that indicates whether the provided project version is earlier than the value of the <see cref="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.RosarioCTP12ProjectVersion" />.</summary>
      <returns>true if the version is previous to the value of the <see cref="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.RosarioCTP12ProjectVersion" />; otherwise, false.</returns>
      <param name="version">A project version string.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.IsValidVersion(System.String)">
      <summary>Returns a value that indicates whether the provided project version is a valid version.</summary>
      <returns>true if the version is previous valid; otherwise, false.</returns>
      <param name="version">A project version string.</param>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.LatestMajorVersion">
      <summary>Returns 3.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.LatestMinorVersion">
      <summary>Returns 5.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.LatestProjectVersion">
      <summary>Returns "4.0".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.RosarioCTP12ProjectVersion">
      <summary>Returns "3.0".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.RosarioCTP14ProjectVersion">
      <summary>Returns "3.1".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.RosarioCTP15ProjectVersion">
      <summary>Returns "3.2".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.RosarioCTP16ProjectVersion">
      <summary>Returns "3.3".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.RosarioCTP17ProjectVersion">
      <summary>Returns "3.4".</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.VersionStringToMajorMinor(System.String,System.Int32@,System.Int32@)">
      <summary>Parses the provided version string into numeric major and minor parts.</summary>
      <param name="version">A project version string.</param>
      <param name="majorVersion">An int that represents the major part of the version.</param>
      <param name="minorVersion">An int that represents the minor part of the version.</param>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.Vs2005GDR1ProjectVersion">
      <summary>Returns "1.1".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.Vs2005ProjectVersion">
      <summary>Returns "1.0".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.Vs2005ProjectVersionV2">
      <summary>Returns "1".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.Vs2008GDRProjectVersion">
      <summary>Returns "3.5".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.Vs2008ProjectVersion">
      <summary>Returns "2.0".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.AgnosticProjectProperties.Versions.Vs2008ProjectVersionV2">
      <summary>Returns "2".</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.AlterElementStep">
      <summary>Represents a step in a deployment plan that alters an element.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.AlterElementStep.#ctor(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.AlterElementStep" /> class, using a supplied source and target.</summary>
      <param name="source">The source element</param>
      <param name="target">The target element</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.AlterElementStep.SourceElement">
      <summary>Gets the source element.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.AlterElementStep.TargetElement">
      <summary>Gets the target element.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.BeginPostDeploymentScriptStep">
      <summary>Represents a marker step that separates the deployment script steps from the steps that follow deployment.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.BeginPostDeploymentScriptStep.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.BeginPostDeploymentScriptStep" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.BeginPostDeploymentScriptStep.Action">
      <summary>Represents an empty step that takes no action.</summary>
      <returns>An empty string.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.BeginPreDeploymentScriptStep">
      <summary>Represents a marker step that separates the script steps that precede deployment from the deployment script steps.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.BeginPreDeploymentScriptStep.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.BeginPreDeploymentScriptStep" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.BeginPreDeploymentScriptStep.Action">
      <summary>Represents an empty step that takes no action.</summary>
      <returns>An empty string.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.BuildContributor">
      <summary>Derivatives of the <see cref="T:Microsoft.Data.Schema.Build.BuildContributor" /> extension are executed during a project build after the project's model has been constructed and verified.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.BuildContributor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.BuildContributor" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.BuildContributor.OnExecute(Microsoft.Data.Schema.Build.BuildContributorContext,Microsoft.Data.Schema.ErrorManager)">
      <summary>Called by the Visual Studio build process after the model has been built. This method provides to derived versions of this contributor an opportunity to examine the model and possibly generate additional files. </summary>
      <param name="context">A <see cref="T:Microsoft.Data.Schema.Build.BuildContributorContext" /> object.</param>
      <param name="errorsContainer">The <see cref="T:Microsoft.Data.Schema.ErrorManager" /> to hold any errors encountered during execution.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.BuildContributor.OnPopulateArguments">
      <summary>Called by the Visual Studio build process when a project is loaded. This method provides a list of extensible arguments that users can specify at a command prompt to modify the project file.</summary>
      <returns>A list of command-line arguments.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.BuildContributorContext">
      <summary>Provides the context for the build process that is used by <see cref="T:Microsoft.Data.Schema.Build.BuildContributor" /> objects in Visual Studio.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.BuildContributorContext.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},Microsoft.Data.Schema.SchemaModel.DataSchemaModel,Microsoft.Build.Framework.ITaskItem[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.BuildContributorContext" /> class. </summary>
      <param name="buildProperties">A <see cref="T:Microsoft.Office.Interop.Word.Dictionary" /> of named property values. Cannot be null.</param>
      <param name="arguments">A <see cref="T:Microsoft.Office.Interop.Word.Dictionary" /> of command-line arguments and values. Cannot be null.</param>
      <param name="buildModel">A reference to the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> of the project. Cannot be null.</param>
      <param name="extensionFiles">An array of <see cref="T:Microsoft.Build.Framework.ITaskItem" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buildProperties" /> property, the <paramref name="arguments" /> property, or the <paramref name="buildModel" /> property is null.</exception>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.BuildContributorContext.Arguments">
      <summary>Gets a dictionary of command-line arguments and their values.</summary>
      <returns>A list of command-line arguments and values.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.BuildContributorContext.BuildProperties">
      <summary>Gets a dictionary of named properties and their values.</summary>
      <returns>The properties and values.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.BuildContributorContext.ExtensionFiles">
      <summary>Gets a list of tasks to execute when the project is built.</summary>
      <returns>A list of tasks.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.BuildContributorContext.Model">
      <summary>Gets the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> of the project.</summary>
      <returns>The schema model of the project.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.CatalogOrServerPropertyItem">
      <summary>Used to set and save property files in batch mode.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.CatalogOrServerPropertyItem.#ctor(System.String,System.String,Microsoft.Data.Schema.Build.DatabaseTaskHost.PropertySource)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.CatalogOrServerPropertyItem" /> class, based on supplied parameters.</summary>
      <param name="name">The item name as a string.</param>
      <param name="value">The item value as a string.</param>
      <param name="source">A <see cref="T:Microsoft.Data.Schema.Build.DatabaseTaskHost.PropertySource" /> object representing the item source</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.CatalogOrServerPropertyItem.#ctor(System.String,System.String,Microsoft.Data.Schema.Build.DatabaseTaskHost.PropertySource,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.CatalogOrServerPropertyItem" /> class, based on supplied parameters.</summary>
      <param name="name">The item name as a string.</param>
      <param name="value">The item value as a string.</param>
      <param name="source">A <see cref="T:Microsoft.Data.Schema.Build.DatabaseTaskHost.PropertySource" /> object representing the item source</param>
      <param name="verifyThisProperty">Specifies whether the property is to be marked as verified in the server properties file</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.CatalogOrServerPropertyItem.Name"></member>
    <member name="P:Microsoft.Data.Schema.Build.CatalogOrServerPropertyItem.Source"></member>
    <member name="P:Microsoft.Data.Schema.Build.CatalogOrServerPropertyItem.Value"></member>
    <member name="P:Microsoft.Data.Schema.Build.CatalogOrServerPropertyItem.VerifyThisProperty"></member>
    <member name="T:Microsoft.Data.Schema.Build.ContributorArgumentConfiguration">
      <summary>Created by <see cref="T:Microsoft.Data.Schema.Build.BuildContributor" /> objects at run time to initialize arguments that were created at design time and stored in the project file.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.ContributorArgumentConfiguration.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.ContributorArgumentConfiguration" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.ContributorArgumentConfiguration.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.ContributorArgumentConfiguration" /> class by using the provided parameters. </summary>
      <param name="name">The name of the argument.</param>
      <param name="value">The value of the argument.</param>
      <param name="condition">The evaluation condition of the argument.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.ContributorArgumentConfiguration.Condition">
      <summary>Gets or sets the condition of the argument.</summary>
      <returns>The evaluation condition of the argument (that is, "'stringA' == 'stringB'").</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.ContributorArgumentConfiguration.Name">
      <summary>Gets or sets the name of the argument.</summary>
      <returns>The name of the argument.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.ContributorArgumentConfiguration.Value">
      <summary>Gets or sets the value of the argument expressed as a string.</summary>
      <returns>The argument value expressed as a string.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.CreateElementStep">
      <summary>Represents a step in a deployment plan that creates an element.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.CreateElementStep.#ctor(Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.CreateElementStep" /> class, based on a supplied element.</summary>
      <param name="newElement">The supplied element</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.CreateElementStep.SourceElement">
      <summary>Gets a source element.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" />.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DatabaseTaskHost">
      <summary>Represents the database task host.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.#ctor(Microsoft.Data.Schema.DatabaseSchemaProvider,Microsoft.Data.Schema.ErrorManager,System.Boolean,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DatabaseTaskHost" /> class. </summary>
      <param name="databaseSchemaProvider">The database schema provider</param>
      <param name="errors">An error manager, used to return any errors that occur during initialization</param>
      <param name="ideMode">Indicates whether execution is occurring within Visual Studio. Using a default property value, when not in "IDE mode", will cause an error to occur.</param>
      <param name="modelFileName">The name of the model file. This is passed along to the data schema model constructor.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DatabaseTaskHost" /> class.</summary>
      <param name="info">The serialization information</param>
      <param name="context">The streaming context</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.AddOrUpdate(Microsoft.Data.Schema.SchemaModel.CustomSchemaData)">
      <summary>Adds custom data, such as references, to the schema manager.</summary>
      <param name="customSchemaData">The custom schema data to be added</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.BuildCanceled">
      <summary>Indicates whether the build was canceled.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DatabaseTaskHost.DatabaseSchemaProvider">
      <summary>Gets the database schema provider for this DatabaseTaskHost. </summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DatabaseTaskHost.DataSchemaModel">
      <summary>Gets or sets the data schema model that is loaded with source items and used by the build.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" />.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.Dispose">
      <summary>Releases resources.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.Dispose(System.Boolean)">
      <summary>Releases resources, as specified.</summary>
      <param name="disposing">Whether releasing resources</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DatabaseTaskHost.Errors">
      <summary>Gets the error manager.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.ErrorManager" /> .</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.GetAllProperties(Microsoft.Data.Schema.Build.DatabaseTaskHost.PropertySource)">
      <summary>Returns all the properties for a given source.</summary>
      <param name="source">The property source enumeration value</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.GetCatalogProperty(System.String)">
      <summary>Returns the value of a catalog property.</summary>
      <param name="name">The property name</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.GetChangedPropertiesFromPropertiesFile(System.String,Microsoft.Data.Schema.Build.DatabaseTaskHost.PropertySource,System.Collections.Generic.IList{System.Tuple`2}@,System.Boolean,System.String)"></member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.GetDefaultValue(System.String,Microsoft.Data.Schema.Build.DatabaseTaskHost.PropertySource)">
      <summary>Returns the default value for this property from the given source.</summary>
      <param name="propertyName">The property name</param>
      <param name="source">The supplied source enumeration value</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a SerializationInfo with the data that is required to serialize the target object.</summary>
      <param name="info">The serialization information instance</param>
      <param name="context">The streaming context</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.GetProperty(System.String,Microsoft.Data.Schema.Build.DatabaseTaskHost.PropertySource)">
      <summary>Returns the current value for a property.</summary>
      <param name="propertyName">The property name</param>
      <param name="source">The property source enumeration value</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.GetServerProperty(System.String)">
      <summary>Returns the value of a server property.</summary>
      <param name="name">The property name</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.GetWorkload">
      <summary>Returns the amount of work left to partially resolve the model.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DatabaseTaskHost.IdeMode">
      <summary>Gets whether IDE mode is True.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.Initialize(Microsoft.Data.Schema.Build.TaskHostSerializationContext)">
      <summary>Used when deserializing.</summary>
      <param name="taskHostSerializationContext">The context of the deserialization</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.InitializeConstructor(Microsoft.Data.Schema.SchemaModel.DataSchemaModelConstructor)">
      <summary>Initializes the constructor.</summary>
      <param name="smc">A <see cref="T:Microsoft.Data.Schema.Build.DatabaseTaskHostConstructor" /> instance</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.InitializeConstructor(Microsoft.Data.Schema.SchemaModel.ModelBuilderConstructor)">
      <summary>Not used.</summary>
      <param name="mbc">Not used</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.InitializeConstructor(Microsoft.Data.Schema.SchemaModel.ParserConstructor)">
      <summary>Use this method to initialize your database schema provider-specific parser constructor.</summary>
      <param name="pc">Parser constructor</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.InternalGetAllProperties(Microsoft.Data.Schema.Build.DatabaseTaskHost.PropertySource)">
      <summary>Returns the actual list of properties for that source.</summary>
      <param name="source">The property source enumeration value</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DatabaseTaskHost.IsAsyncModelBuildingRunning">
      <summary>Gets whether model building is occurring in the background.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DatabaseTaskHost.IsCatalogPropertyFileValid">
      <summary>Gets whether the catalog property file is valid.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DatabaseTaskHost.IsOptimizedForInsert">
      <summary>Gets whether the model is optimized for insert.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DatabaseTaskHost.IsOptimizedForQuery">
      <summary>Gets whether the model is optimized for query.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DatabaseTaskHost.IsServerPropertyFileValid">
      <summary>Gets whether the server property file is valid.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.IsTaskItemUnchanged(System.Collections.Generic.IList{System.String},Microsoft.Build.Framework.ITaskItem)">
      <summary>Returns whether the script and metadata last processed by the file manager represents the version of the file currently on disk.</summary>
      <returns>Returns True if the task item is unchanged.</returns>
      <param name="externalNameParts">The external name parts</param>
      <param name="taskItem">The task item</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.MatchesDataSchemaModelValue(System.String,System.Object,Microsoft.Data.Schema.Build.DatabaseTaskHost.PropertySource)">
      <summary>Returns whether the value set on the data schema model is matched.</summary>
      <param name="propertyName">The property name</param>
      <param name="value">The object value</param>
      <param name="source">The property source enumeration value</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DatabaseTaskHost.ModelBuilder">
      <summary>Gets the model builder used by the file manager. </summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DatabaseTaskHost.NumberElementsToResolve">
      <summary>An integer that contains the amount of remaining work, represented as the number of model elements that must still be resolved.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.OnCreateCustomSchemaData(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>Returns null.</summary>
      <param name="filePath">The file path</param>
      <param name="referenceMetadata">The reference metadata</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.OnFixupAfterDeserialization(System.String,System.String)">
      <summary>Does nothing.</summary>
      <param name="oldPath">Not used</param>
      <param name="newPath">Not used</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.OnProcessFileListPriorToBatchLoadOrUpdate(System.Collections.Generic.IList{Microsoft.Build.Framework.ITaskItem})">
      <summary>Allows database schema provider implementations to process the file list before it is inserted into the model.</summary>
      <param name="allFiles">The file list</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.OnProcessFileListPriorToRemove(System.Collections.Generic.IList{Microsoft.Build.Framework.ITaskItem})">
      <summary>Allows Database schema provider implementations to remove files from their model builder in unique ways.</summary>
      <param name="allFiles">The file list</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.OnReadPropertiesFile(Microsoft.Data.Schema.Build.DatabaseTaskHost.PropertySource,System.IO.FileInfo)">
      <summary>Returns all properties read from the specified properties file.</summary>
      <param name="source">Property source</param>
      <param name="file">Properties file</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.OnResetBuildValidationStatus(Microsoft.Data.Schema.DataSchemaError)">
      <summary>Called during a build operation just before fully resolving the model.</summary>
      <param name="dataSchemaError">Used to handle any errors that occur</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.OnRunBuildValidations(Microsoft.Data.Schema.ErrorManager)">
      <summary>Use this method to visit your model looking for elements that violate any validation rules.</summary>
      <param name="errorManager">Used to report errors that occur</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.OptimizeForInsert">
      <summary>Optimizes the file manager for insertion.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.OptimizeForQuery">
      <summary>Optimizes the file manager for query.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.PopulateCustomMetadataNames(System.Collections.Generic.HashSet{System.String})">
      <summary>Database schema provider implementations override this to provide a list of custom metadata names, such as references.</summary>
      <param name="customMetadataNames">The names</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.PostInitDataSchemaModel">
      <summary>Called after the schema manager has been created, enables database schema provider implementations to update any model options.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.RemoveCustomSchemaData(System.String)">
      <summary>Removes the specified custom schema data file, for example, references, from the schema manager.</summary>
      <param name="fullPathFileName">The full path of the custom schema data file to remove</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.ResetAllCatalogProperties">
      <summary>Resets all catalog properties back to their default state, which is as if the properties file did not exist.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.ResetAllServerProperties">
      <summary>Resets all server properties back to their default state, which is as if the properties file did not exist.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.SetAndSavePropertyFiles(System.String,System.String,Microsoft.Data.Schema.Build.CatalogOrServerPropertyItem[])">
      <summary>Sets these properties in batch and saves the file.</summary>
      <param name="catalogFullPath">The catalog full path</param>
      <param name="serverFullPath">The server full path</param>
      <param name="items">The array of property items</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.SetValue(System.String,System.Object,Microsoft.Data.Schema.Build.DatabaseTaskHost.PropertySource,System.Boolean@)">
      <summary>Sets the current value for the property.</summary>
      <returns>Returns True if set was successful.</returns>
      <param name="propertyName">The property name</param>
      <param name="value">The object value</param>
      <param name="source">The property source enumeration value</param>
      <param name="defaultUsed">Specifies whether the default was used for this property</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.StopAsyncModelBuilding"></member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.StopAsyncModelBuilding(System.Int32)">
      <summary>Stops async model building from occurring until AsyncModelBuildingBlocker.Dispose is called.</summary>
      <returns>A blocker is returned which, when disposed, will re-enable model building. </returns>
      <param name="timeoutSpanInSeconds">The time out period, in seconds. By default, the time-out is infinite.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.ValidateDataSchemaModel">
      <summary>Called to validate the current DataSchemaModel.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.ValidateValueIsBoolean(System.Object)">
      <summary>Returns whether the specified value is a valid Boolean.</summary>
      <param name="value">The specified value</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.ValidateValueIsFloat(System.Object)">
      <summary>Returns whether the specified value is a valid float.</summary>
      <param name="value">The specified value</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.ValidateValueIsInSet(System.Object,System.String[])">
      <summary>Returns whether the specified value is a valid value for the data type.</summary>
      <param name="value">The specified value</param>
      <param name="validValues">The array of valid values</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.ValidateValueIsInt(System.Object)">
      <summary>Returns whether the specified value is a valid integer.</summary>
      <param name="value">The specified value</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.VerifyConfigurationAfterSet(System.String,System.Object,Microsoft.Data.Schema.Build.DatabaseTaskHost.PropertySource)">
      <summary>Used to verify any dependent properties based on this property being set.</summary>
      <param name="propertyName">The property name</param>
      <param name="value">The object value</param>
      <param name="source">The property source enumeration value</param>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DatabaseTaskHost.AsyncModelBuildingBlocker">
      <summary>Used to stop the background model building process until the Dispose method of this object is called. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.AsyncModelBuildingBlocker.#ctor(Microsoft.Data.Schema.Build.DatabaseTaskHost)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DatabaseTaskHost.AsyncModelBuildingBlocker" /> class. </summary>
      <param name="host">The database task host for which you want to stop model building.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHost.AsyncModelBuildingBlocker.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:Microsoft.Data.Schema.Build.DatabaseTaskHost.AsyncModelBuildingBlocker" /> class.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DatabaseTaskHost.LoggingBehavior">
      <summary>Specifies the logging behavior.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DatabaseTaskHost.LoggingBehavior.NoLogging">
      <summary>Behavior is NoLogging</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DatabaseTaskHost.LoggingBehavior.LogEverything">
      <summary>Behavior is LogEverything</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DatabaseTaskHost.LoggingBehavior.LogAllButFileNotFound">
      <summary>Behavior is LogAllButFileNotFound</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DatabaseTaskHost.ModelOptimization">
      <summary>Specifies model optimization.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DatabaseTaskHost.ModelOptimization.Never">
      <summary>Optimization is Never</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DatabaseTaskHost.ModelOptimization.Insert">
      <summary>Optimization is Insert</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DatabaseTaskHost.ModelOptimization.Query">
      <summary>Optimization is Query</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DatabaseTaskHost.PropertySource">
      <summary>Specifies the property source.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DatabaseTaskHost.PropertySource.Project">
      <summary>Source is Project</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DatabaseTaskHost.PropertySource.Catalog">
      <summary>Source is Catalog</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DatabaseTaskHost.PropertySource.Server">
      <summary>Source is Server</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DatabaseTaskHostConstructor">
      <summary>Used to construct the <see cref="T:Microsoft.Data.Schema.Build.DatabaseTaskHost" /> and to specify how it should behave.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskHostConstructor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DatabaseTaskHostConstructor" /> class.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DatabaseTaskHostConstructor.Errors">
      <summary>Gets or sets the error manager.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DatabaseTaskHostConstructor.IdeMode">
      <summary>Gets or sets whether IDE mode.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DatabaseTaskHostConstructor.ModelFileName">
      <summary>Gets or sets the model file name.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DatabaseTaskItem">
      <summary>Represents a single item in a Visual Studio database build project.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskItem.#ctor(Microsoft.Build.Evaluation.ProjectItem,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DatabaseTaskItem" /> class by using the provided project item and path.</summary>
      <param name="buildItem">A <see cref="T:Microsoft.Build.Evaluation.ProjectItem" /> object.</param>
      <param name="fullPath">The complete path to this item.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskItem.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DatabaseTaskItem" /> class by using the provided path.</summary>
      <param name="fullPath">The complete path to this item.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskItem.CloneCustomMetadata">
      <summary>Returns a cloned copy of the metadata names.</summary>
      <returns>A hash table of the metadata names.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskItem.CopyMetadataTo(Microsoft.Build.Framework.ITaskItem)">
      <summary>Copies the metadata to another item.</summary>
      <param name="destinationItem">The item to copy to.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskItem.GetMetadata(System.String)">
      <summary>Returns the value of the provided metadata.</summary>
      <returns>The metadata value.</returns>
      <param name="metadataName">The name of the metadata.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DatabaseTaskItem.ItemSpec">
      <summary>Gets the relative path to this item.</summary>
      <returns>The relative path to this item.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DatabaseTaskItem.MetadataCount">
      <summary>Gets the number of metadata settings.</summary>
      <returns>The number of metadata settings in this item.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DatabaseTaskItem.MetadataNames">
      <summary>Gets a collection of names in the metadata.</summary>
      <returns>A collection of metadata names.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskItem.RemoveMetadata(System.String)">
      <summary>Removes the specified metadata.</summary>
      <param name="metadataName">The metadata name.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DatabaseTaskItem.SetMetadata(System.String,System.String)">
      <summary>Sets the value of the named metadata.</summary>
      <param name="metadataName">The metadata name.</param>
      <param name="metadataValue">The value.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentContributor">
      <summary>The base class for deployment contributors.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentContributor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentContributor" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentContributor.Cancel">
      <summary>Cancels execution of the contributor.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentContributor.Canceled">
      <summary>Gets a value that indicates whether the contributor was canceled.</summary>
      <returns>true if the contributor has been canceled; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentContributor.Dispose">
      <summary>Releases resources.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentContributor.Dispose(System.Boolean)">
      <summary>Releases resources, as specified.</summary>
      <param name="disposing">Specifies whether disposing this object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentContributor.OnApplyDeploymentConfiguration(Microsoft.Data.Schema.Build.DeploymentContributorContext,System.Collections.Generic.ICollection{Microsoft.Data.Schema.Build.DeploymentContributorConfigurationFile})">
      <summary>Called by the deployment process in Visual Studio to give your code an opportunity to modify or to add configuration information to the provided files.</summary>
      <param name="context">A <see cref="T:Microsoft.Data.Schema.Build.DeploymentContributorContext" /> object.</param>
      <param name="configurationFiles">An <see cref="T:System.Collections.Generic.ICollection`1" /> of <see cref="T:Microsoft.Data.Schema.Build.DeploymentContributorConfigurationFile" /> objects.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentContributor.OnEstablishDeploymentConfiguration(Microsoft.Data.Schema.Build.DeploymentContributorConfigurationSetup)">
      <summary>Called by the deployment process in Visual Studio to give your code an opportunity to modify deployment configuration.</summary>
      <param name="setup">The current <see cref="T:Microsoft.Data.Schema.Build.DeploymentContributorConfigurationFile" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentContributor.PublishMessage(Microsoft.Data.Schema.DataSchemaError)">
      <summary>Raises the internal Message event and provides a <see cref="T:Microsoft.Data.Schema.Build.ContributorEventArgs" /> object.</summary>
      <param name="message">A <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> that contains the message to publish.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="message" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentContributorConfigurationFile">
      <summary>Represents a configuration file that is used by Visual Studio in the deployment and build processes.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentContributorConfigurationFile.#ctor(System.IO.FileInfo,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentContributorConfigurationFile" /> class. </summary>
      <param name="file">A <see cref="T:System.IO.FileInfo" /> object.</param>
      <param name="metadata">A dictionary of named metadata values.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="file" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentContributorConfigurationFile.ConfigurationFile">
      <summary>Gets the <see cref="T:System.IO.FileInfo" /> object that represents the configuration file.</summary>
      <returns>The configuration file.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentContributorConfigurationFile.Metadata">
      <summary>Gets the dictionary of named metadata values.</summary>
      <returns>The metadata.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentContributorConfigurationSetup">
      <summary>Represents the current setup for <see cref="T:Microsoft.Data.Schema.Build.DeploymentContributor" /> objects.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentContributorConfigurationSetup.CopyInputToOutput(Microsoft.Data.Schema.Build.DeploymentContributorConfigurationFile)">
      <summary>Copies the given configuration file into the internal output configurations collection.</summary>
      <param name="configFile">A configuration file.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentContributorConfigurationSetup.Dispose">
      <summary>Releases resources.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentContributorConfigurationSetup.EnumerateInputs">
      <summary>Returns an enumerable collection of <see cref="T:Microsoft.Data.Schema.Build.DeploymentContributorConfigurationFile" /> objects.</summary>
      <returns>An enumerable collection of configuration files.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentContributorConfigurationSetup.OpenNewOutput(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Returns a new output configuration file stream that is open for read and write.</summary>
      <param name="partialFileName">A partial file name.</param>
      <param name="metadata">The metadata to be saved to the file.</param>
      <exception cref="T:System.ArgumentNullException">The provided <paramref name="partialFileName" /> parameter is null or an empty string.</exception>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentContributorConfigurationSetup.Properties">
      <summary>Gets a dictionary that contains the current properties and settings.</summary>
      <returns>A dictionary of property and settings.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentContributorContext">
      <summary>Provides a context for <see cref="T:Microsoft.Data.Schema.Build.DeploymentContributor" /> objects in Visual Studio.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentContributorContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentContributorContext" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentContributorContext.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})"></member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentContributorContext.Arguments">
      <summary>Gets or sets a dictionary of named arguments and their values.</summary>
      <returns>A dictionary of arguments.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentContributorContext.ConnectionString">
      <summary>Gets or sets the connection string that the build process uses.</summary>
      <returns>The connection string.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentContributorContext.Options">
      <summary>Gets or sets the <see cref="T:Microsoft.Data.Schema.Build.SchemaDeploymentOptions" />.</summary>
      <returns>The deployment options.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentContributorContext.OriginalSourceDatabaseSchemaProvider">
      <summary>Gets or sets the database schema provider for the original source.</summary>
      <returns>The original source database schema provider.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentContributorContext.Source">
      <summary>Gets or sets the source data schema model.</summary>
      <returns>The source data schema model.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentContributorContext.Target">
      <summary>Gets or sets the target data schema model.</summary>
      <returns>The target data schema model.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentContributorEventArgs">
      <summary>Represents the event arguments for deployment contributor events.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentContributorEventArgs.#ctor(Microsoft.Data.Schema.DataSchemaError)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentContributorEventArgs" /> class by using the provided error message. </summary>
      <param name="message">A <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> object.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentContributorEventArgs.Message">
      <summary>Gets the <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> object.</summary>
      <returns>The error message object.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentFailedException">
      <summary>Represents the deployment failed exception.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentFailedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentFailedException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentFailedException" /> class.</summary>
      <param name="info">Used by run-time serialization</param>
      <param name="context">Used by run-time serialization</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentFailedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentFailedException" /> class.</summary>
      <param name="message">Indicates the reason for the exception</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentFailedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentFailedException" /> class.</summary>
      <param name="message">Indicates the reason for the exception</param>
      <param name="innerException">Indicates a nested exception</param>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentPlan">
      <summary>Represents the plan that is generated by the <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanGenerator" />.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlan.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlan" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlan.AddAfter(Microsoft.Data.Schema.Build.DeploymentStep,Microsoft.Data.Schema.Build.DeploymentStep)"></member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlan.AddBefore(Microsoft.Data.Schema.Build.DeploymentStep,Microsoft.Data.Schema.Build.DeploymentStep)"></member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlan.AddFirst(Microsoft.Data.Schema.Build.DeploymentStep)"></member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlan.AddLast(Microsoft.Data.Schema.Build.DeploymentStep)"></member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlan.AddLast(System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.Build.DeploymentStep})"></member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlan.DeploymentPlanArtifact"></member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlan.Head">
      <summary>Gets the first deployment step.</summary>
      <returns>The first deployment step.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlan.Remove(Microsoft.Data.Schema.Build.DeploymentStep)"></member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlan.StepCount"></member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlan.Tail">
      <summary>Gets the last deployment step.</summary>
      <returns>The last deployment step.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentPlanArtifact">
      <summary>An implementation detail specific to a custom <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanArtifact.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanArtifact" /> class. </summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlanArtifact.Messages">
      <summary>Gets a list of <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> objects that were collected during the deployment process.</summary>
      <returns>A list of errors.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentPlanContributor">
      <summary>Represents a contributor to the deployment process in Visual Studio Application Lifecycle Management (ALM).</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanContributor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanContributor" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanContributor.OnExecute(Microsoft.Data.Schema.Build.DeploymentPlanContributorContext)">
      <summary>Called by the Visual Studio Application Lifecycle Management (ALM) deployment engine to allow custom contributors to execute their unique tasks.</summary>
      <param name="context">A <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanContributorContext" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanContributor.OnPopulateArguments">
      <summary>Called by the Visual Studio Application Lifecycle Management (ALM) deployment engine to allow custom contributors to populate the command line arguments.</summary>
      <returns>Returns a list of configuration arguments.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentPlanContributorContext">
      <summary>Provides a context for <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanContributor" /> objects.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanContributorContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanContributorContext" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanContributorContext.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})"></member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlanContributorContext.ComparisonResult">
      <summary>Gets or sets the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult" />.</summary>
      <returns>The current comparison result.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlanContributorContext.DeploymentScriptPath">
      <summary>Gets or sets the path to the deployment script.</summary>
      <returns>The file path for the deployment script.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlanContributorContext.PlanHandle">
      <summary>Gets or sets the <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanHandle" />.</summary>
      <returns>The handle for the deployment plan.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentPlanExecutor"></member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanExecutor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanExecutor" /> class. </summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlanExecutor.ExtensionHandle">
      <summary>Gets the handle for this extension.</summary>
      <returns>The extension handle.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanExecutor.SetExtensionHandle(Microsoft.Data.Schema.Extensibility.ExtensionHandle)">
      <summary>Sets the value of the handle of this extension.</summary>
      <param name="handle">An <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle" /> object.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentPlanGenerator">
      <summary>When implemented in a derived class by a DSP vendor, generates a deployment plan based on a model.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanGenerator" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanGenerator.Cancel">
      <summary>Called by the Visual Studio Application Lifecycle Management (ALM) deployment plan generation engine when the deployment operation has been canceled by the user.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlanGenerator.ComparisonResult">
      <summary>Gets or sets a comparison result.</summary>
      <returns>The result of the model comparison between the source and the target.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanGenerator.GeneratePlan">
      <summary>Called by the Visual Studio Application Lifecycle Management (ALM) deployment plan generation engine to generate the plan.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlanGenerator.Messages">
      <summary>Gets a list of messages.</summary>
      <returns>A list of messages.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanGenerator.OnCancel">
      <summary>Called by the <see cref="M:Microsoft.Data.Schema.Build.DeploymentPlanGenerator.Cancel" /> method.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanGenerator.OnGeneratePlan">
      <summary>Called by the <see cref="M:Microsoft.Data.Schema.Build.DeploymentPlanGenerator.GeneratePlan" /> method to generate the plan.</summary>
      <returns>A custom deployment plan.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanGenerator.OnInitialize">
      <summary>Called by the Visual Studio Application Lifecycle Management (ALM) deployment plan generation engine to allow your code to extend the functionality during initialization.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanGenerator.OnProcessProposal(Microsoft.Data.Schema.Build.TargetModelOperation)">
      <summary>Called by the Visual Studio Application Lifecycle Management (ALM) deployment plan generation engine to allow your code to extend the functionality before comparing the model.</summary>
      <returns>The default implementation always returns false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlanGenerator.Options">
      <summary>Gets or sets plan generation options.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlanGenerator.Source">
      <summary>Gets or sets the source database model.</summary>
      <returns>Returns the source database model.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlanGenerator.Target">
      <summary>Gets or sets the target database model.</summary>
      <returns>Returns the target database model.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentPlanHandle">
      <summary>Used by Visual Studio to identify the plan.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanHandle.#ctor(Microsoft.Data.Schema.Build.DeploymentPlan)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanHandle" /> class by using the provided plan. </summary>
      <param name="plan">The <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlan" /> object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="plan" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlanHandle.Head">
      <summary>Gets the first step of the plan.</summary>
      <returns>The head, or first step, of the plan; if the plan is empty, null.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlanHandle.Tail">
      <summary>Gets the last step of the plan.</summary>
      <returns>The tail, or last step, of the plan; if the plan is empty, null.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentPlanModifier">
      <summary>Represents a contributor that modifies a deployment plan.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanModifier.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanModifier" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanModifier.AddAfter(Microsoft.Data.Schema.Build.DeploymentPlanHandle,Microsoft.Data.Schema.Build.DeploymentStep,Microsoft.Data.Schema.Build.DeploymentStep)">
      <summary>Adds a new deployment step to the plan after an existing step.</summary>
      <param name="handle">The <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanHandle" /> for the plan.</param>
      <param name="step">Identifies the <see cref="T:Microsoft.Data.Schema.Build.DeploymentStep" /> after which the <paramref name="newStep" /> will be added.</param>
      <param name="newStep">The <see cref="T:Microsoft.Data.Schema.Build.DeploymentStep" /> to be added.</param>
      <exception cref="T:System.ArgumentNullException">One or more of the parameters is null.</exception>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanModifier.AddBefore(Microsoft.Data.Schema.Build.DeploymentPlanHandle,Microsoft.Data.Schema.Build.DeploymentStep,Microsoft.Data.Schema.Build.DeploymentStep)">
      <summary>Adds a new deployment step to the plan before an existing step.</summary>
      <param name="handle">The <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanHandle" /> for the plan.</param>
      <param name="step">Identifies the <see cref="T:Microsoft.Data.Schema.Build.DeploymentStep" /> before which the <paramref name="newStep" /> will be added.</param>
      <param name="newStep">The <see cref="T:Microsoft.Data.Schema.Build.DeploymentStep" /> to be added.</param>
      <exception cref="T:System.ArgumentNullException">One or more of the parameters is null.</exception>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlanModifier.ExtensionHandle">
      <summary>Gets the handle for this extension.</summary>
      <returns>The extension handle.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanModifier.Remove(Microsoft.Data.Schema.Build.DeploymentPlanHandle,Microsoft.Data.Schema.Build.DeploymentStep)">
      <summary>Removes an existing step from the deployment plan.</summary>
      <param name="handle">The <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanHandle" /> for the plan.</param>
      <param name="step">Identifies the <see cref="T:Microsoft.Data.Schema.Build.DeploymentStep" /> to be removed.</param>
      <exception cref="T:System.ArgumentNullException">One or more of the parameters is null.</exception>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanModifier.SetExtensionHandle(Microsoft.Data.Schema.Extensibility.ExtensionHandle)">
      <summary>Sets the handle for this extension.</summary>
      <param name="handle">An <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle" />.</param>
      <exception cref="T:System.ArgumentNullException">The provided <paramref name="handle" /> parameter is null.</exception>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentPlanProblem">
      <summary>Represents a problem that was discovered when the deployment plan was verified.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanProblem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanProblem" /> class.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlanProblem.Category">
      <summary>Specifies a category for a deployment plan problem.</summary>
      <returns>The problem category. The default value is <see cref="F:Microsoft.Data.Schema.Build.DeploymentPlanProblem.ProblemCategory.None" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlanProblem.Element">
      <summary>Gets or sets the model element in the target where the problem occurred.</summary>
      <returns>The target model element.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanProblem.GetElementName(Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Returns the escaped, fully qualified name of the provided element.</summary>
      <returns>The escaped, fully qualified name of the element.</returns>
      <param name="element">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElement" />.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanProblem.GetErrorCode">
      <summary>Returns an error code that is appropriate for the assigned category.</summary>
      <returns>The error code.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanProblem.GetSeverity">
      <summary>Returns the severity level for the assigned category.</summary>
      <returns>The severity level.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentPlanProblem.PlanElement">
      <summary>Gets or sets the model element in the plan where the problem occurred.</summary>
      <returns>The plan model element.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentPlanProblem.ToString">
      <summary>Returns the localized category string.</summary>
      <returns>The category string.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentPlanProblem.ProblemCategory">
      <summary>Represents the possible categories for a <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanProblem" />.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DeploymentPlanProblem.ProblemCategory.None">
      <summary>No category provided.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DeploymentPlanProblem.ProblemCategory.BlockingDependency">
      <summary>A dependency is blocking verification.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DeploymentPlanProblem.ProblemCategory.ObjectMissingFromTarget">
      <summary>An object is missing from the target database model.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DeploymentPlanProblem.ProblemCategory.TargetOnlyObjectLoss">
      <summary>An object in the target database has been lost.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DeploymentPlanProblem.ProblemCategory.PossibleDataLoss">
      <summary>Some data may have been lost.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DeploymentPlanProblem.ProblemCategory.PossibleRuntimeError">
      <summary>A runtime error may have occurred.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DeploymentPlanProblem.ProblemCategory.NotSupportedOperation">
      <summary>An unsupported operation is causing a problem.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentProjectBuilder">
      <summary>This class is loaded at build time to create the artifacts that are needed at deployment time. This includes the stub MSBuild project that is used to execute the deploy task and the deployment configuration file.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentProjectBuilder" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.AddProperty(Microsoft.Build.Construction.ProjectPropertyGroupElement,System.String,System.Object)">
      <summary>Adds the specified property.</summary>
      <param name="propertyGroup">The group to which the property belongs</param>
      <param name="propertyName">The name of the property being added</param>
      <param name="propertyValue">The value of the property being added</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.ConnectionString">
      <summary>Gets or sets the connection string. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.CopyFile(System.IO.FileInfo,System.String,System.IO.DirectoryInfo)">
      <summary>Copies the specified file to the target name and directory.</summary>
      <param name="fileToCopy">The file to be copied</param>
      <param name="targetFileName">The destination filename</param>
      <param name="targetDirectory">The destination directoty</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.CopyFileToOutput(System.IO.FileInfo)">
      <summary>Copies a file to output.</summary>
      <param name="fileToCopy">The file to copy</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.DatabaseName">
      <summary>Gets or sets the database name. </summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.DeployManifestName">
      <summary>Gets or sets the deployment manifest name. </summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.DeploymentConfigurationFileProperty">
      <summary>The property that contains the deployment configuration file.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.DeploymentScriptFile">
      <summary>Gets or sets the deployment script file. </summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.DeployScriptFileProperty">
      <summary>The property that contains the deployment script file name.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.DeployToDatabase">
      <summary>Gets or sets a value indicating whether to deploy to the target database. </summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.DeployToDatabaseProperty">
      <summary>The property that indicates whether deployment will deploy to the target database.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.DeployToScript">
      <summary>Gets or sets a value indicating whether to deploy to a script file. </summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.DeployToScriptProperty">
      <summary>The property that indicates whether the deployment action will only generate a deployment script but not deploy to a target database.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.ExtensionConfigurationItemName">
      <summary>Used to provide extension configuration files to the MSBuild project.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.Extensions">
      <summary>Gets or sets the extension manager for this deployment. </summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.FilesOutput">
      <summary>Gets a list of output files.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.GetUniqueFile(System.IO.DirectoryInfo,System.String,System.String)">
      <summary>Generates a unique filename in the output directory.</summary>
      <param name="outputDirectory"></param>
      <param name="outputFilePrefix"></param>
      <param name="partialFileName"></param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.InputContributorFiles">
      <summary>Gets a list of input contributor files.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.OnCreateDeploymentProject(Microsoft.Build.Evaluation.Project)">
      <summary>Called when the deployment project is created.</summary>
      <param name="deployProject">The MSBuild project being deployed</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.OnLoadTargetModelModifiers">
      <summary>Override this method if your database schema provider implementation needs to perform additional modifications to the target model.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.OnVerifyConfiguration">
      <summary>Returns null.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.OutputDirectory">
      <summary>Gets or sets the output directory for the deployment. </summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.OverwriteExistingFiles">
      <summary>Gets or sets a value indicating whether deployment should overwrite existing files in the output directory. </summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.Properties">
      <summary>Gets or sets the list of properties associated with this deployment project. </summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.PropertiesFiles">
      <summary>Gets a list of properties files.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.ReferenceItemName">
      <summary>Used to add references to the MSBuild project.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.References">
      <summary>Gets or sets the list of references associated with this deployment project. </summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.Renames">
      <summary>Gets or sets the list of file renames that occur during deployment. </summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.SelectedDeploymentConfigFile">
      <summary>Gets or sets the deployment configuration file to use for this deployment project. </summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.SourceModelFilePath">
      <summary>Gets or sets the file path for the source model. </summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.SourceModelProperty">
      <summary>Used to add the source model filename to the MSBuild project.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.TargetConnectionStringProperty">
      <summary>Used to add the target connection string to the MSBuild project.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Build.DeploymentProjectBuilder.TargetDatabaseNameProperty">
      <summary>Used to add the target database name to the MSBuild project.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentScriptDomStep">
      <summary>Represents a deployment step consisting of script generated from a model element or a change definition. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentScriptDomStep.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentScriptDomStep" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentScriptDomStep.#ctor(Microsoft.Data.Schema.ScriptDom.IScriptFragment)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentScriptDomStep" /> class using the provided script fragment.</summary>
      <param name="fragment">An <see cref="T:Microsoft.Data.Schema.ScriptDom.IScriptFragment" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentScriptDomStep.#ctor(Microsoft.Data.Schema.ScriptDom.IScriptFragment,Microsoft.Data.Schema.ScriptDom.ScriptGenerator)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentScriptDomStep" /> class using the provided script fragment.</summary>
      <param name="fragment">An <see cref="T:Microsoft.Data.Schema.ScriptDom.IScriptFragment" /> object.</param>
      <param name="scriptGenerator">The <see cref="T:Microsoft.Data.Schema.ScriptDom.ScriptGenerator" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentScriptDomStep.Action">
      <summary>Returns a script created from the script fragment.</summary>
      <returns>A script.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentScriptDomStep.Script">
      <summary>Gets or sets the script for this step.</summary>
      <returns>The script for this step.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentScriptDomStep.ScriptGenerator">
      <summary>Gets or sets the script generator for this step.</summary>
      <returns>The script generator.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentScriptGenerator">
      <summary>Represents the deployment script generator.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentScriptGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentScriptGenerator" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentScriptGenerator.Dispose(System.Boolean)">
      <summary>Releases resources.</summary>
      <param name="disposing">Specifies whether currently disposing.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentScriptGenerator.OnExecute(Microsoft.Data.Schema.Build.DeploymentPlanContributorContext)"></member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentScriptGenerator.ScriptOutput">
      <summary>Gets a text writer object that can write out the script.</summary>
      <returns>A text writer that can write out the script.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentScriptStep"></member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentScriptStep.#ctor(System.String)">
      <param name="text"></param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentScriptStep.Action"></member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentScriptStep.Text"></member>
    <member name="T:Microsoft.Data.Schema.Build.DeploymentStep">
      <summary>Represents a step in a deployment plan.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentStep.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DeploymentStep" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentStep.Action">
      <summary>When implemented in a derived class, returns a string that represents the script text to implement this step.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentStep.Next">
      <summary>Gets the next step in the container which is a <see cref="T:System.Collections.Generic.LinkedListNode`1" /> of type <see cref="T:Microsoft.Data.Schema.Build.DeploymentStep" />.</summary>
      <returns>The next step.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DeploymentStep.Previous">
      <summary>Gets the previous step in the container which is a <see cref="T:System.Collections.Generic.LinkedListNode`1" /> of type <see cref="T:Microsoft.Data.Schema.Build.DeploymentStep" />.</summary>
      <returns>The previous step.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DeploymentStep.ToString">
      <summary>Returns a string that describes this step.</summary>
      <returns>The default is the type of step.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.DropElementStep">
      <summary>Represents a step in a deployment plan that drops an element.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.DropElementStep.#ctor(Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.DropElementStep" /> class.</summary>
      <param name="targetElement">The target element</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.DropElementStep.TargetElement">
      <summary>Gets the target element.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" />.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.EndPostDeploymentScriptStep">
      <summary>Represents an empty step that marks the end of the post-deployment scripts.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.EndPostDeploymentScriptStep.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.EndPostDeploymentScriptStep" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.EndPostDeploymentScriptStep.Action">
      <summary>Returns an empty string.</summary>
      <returns>An empty string.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.EndPreDeploymentScriptStep">
      <summary>Represents an empty step that marks the end of the pre-deployment scripts.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.EndPreDeploymentScriptStep.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.EndPreDeploymentScriptStep" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.EndPreDeploymentScriptStep.Action">
      <summary>Returns an empty string.</summary>
      <returns>An empty string.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.IPropertyValidator">
      <summary>Classes implement this interface to indicate that they can validate project properties.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.IPropertyValidator.AllowNullOrEmpty">
      <summary>Indicates whether the derived class allows null or empty as valid property values.</summary>
      <returns>true if property values can be null or empty; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.IPropertyValidator.Validate(System.Object)">
      <summary>When overridden in a derived class, validates the given value of a property.</summary>
      <returns>true if the <paramref name="value" /> is valid; otherwise, false.</returns>
      <param name="value">The proposed value for a property.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.ISchemaDeploymentController">
      <summary>Provides functionality to run the deployment engine multiple times to generate and execute scripts for each of any number of deployment configurations.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.ISchemaDeploymentController.Cancel">
      <summary>When implemented in a derived class, uses the value of the <see cref="P:Microsoft.Data.Schema.Build.ISchemaDeploymentController.Deployment" /> property to cancel the current deployment operation.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.ISchemaDeploymentController.CompareModels">
      <summary>When implemented in a derived class, uses the value of the <see cref="P:Microsoft.Data.Schema.Build.ISchemaDeploymentController.Deployment" /> property to invoke the compare models process.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.ISchemaDeploymentController.CreatePlan">
      <summary>When implemented in a derived class, uses the value of the <see cref="P:Microsoft.Data.Schema.Build.ISchemaDeploymentController.Deployment" /> property to create the plan.</summary>
      <returns>The deployment plan.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.ISchemaDeploymentController.CreateScript(Microsoft.Data.Schema.Build.DeploymentPlan,System.IO.TextWriter)">
      <summary>When implemented in a derived class, uses the value of the <see cref="P:Microsoft.Data.Schema.Build.ISchemaDeploymentController.Deployment" /> property to create the script by using the provided plan. This method then prepares the provided text writer to write the script.</summary>
      <param name="plan">The <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlan" /> object.</param>
      <param name="scriptOutput">A <see cref="T:System.IO.TextWriter" /> that your code can use to write the script.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.ISchemaDeploymentController.Deployment">
      <summary>Gets the schema deployment engine.</summary>
      <returns>The schema deployment engine.</returns>
    </member>
    <member name="E:Microsoft.Data.Schema.Build.ISchemaDeploymentController.DeploymentMessage">
      <summary>When implemented in a derived class, handles a deployment message event.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.ISchemaDeploymentController.Options">
      <summary>Gets or sets the deployment options object.</summary>
      <returns>The schema deployment options.</returns>
    </member>
    <member name="E:Microsoft.Data.Schema.Build.ISchemaDeploymentController.ScriptGenerationMessage">
      <summary>When implemented in a derived class, handles a script generation message event.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.ISchemaDeploymentController.UpdateDatabase(Microsoft.Data.Schema.Build.DeploymentPlan)">
      <summary>When implemented in a derived class, uses the value of the <see cref="P:Microsoft.Data.Schema.Build.ISchemaDeploymentController.Deployment" /> property to update the target database by using the provided plan.</summary>
      <param name="plan">The <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlan" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.ISchemaDeploymentController.VerifyPlan(Microsoft.Data.Schema.Build.DeploymentPlan)">
      <summary>When implemented in a derived class, uses the <see cref="P:Microsoft.Data.Schema.Build.ISchemaDeploymentController.Deployment" /> property value to verify the plan.</summary>
      <returns>A list of errors and warnings that are encountered during the verification process.</returns>
      <param name="plan">The <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlan" /> object.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.ModelBuildingCompletedEventArgs">
      <summary>Represents errors coming from model building.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.ModelBuildingCompletedEventArgs.#ctor(System.Exception,System.Object,System.Collections.Generic.IList{System.Tuple`2},System.Boolean,System.String)"></member>
    <member name="M:Microsoft.Data.Schema.Build.ModelBuildingCompletedEventArgs.ModelBuildingResults(System.Exception@,System.Object@,System.Collections.Generic.IList{System.Tuple`2}@,System.Boolean,System.String)"></member>
    <member name="T:Microsoft.Data.Schema.Build.PropertyValidatorBool">
      <summary>Validates a Boolean value.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.PropertyValidatorBool.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.PropertyValidatorBool" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.PropertyValidatorBool.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.PropertyValidatorBool" /> class by using the provided indication of whether the value can be null or empty.</summary>
      <param name="allowNullOrEmpty">true to allow a null value; false to disallow a null value.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.PropertyValidatorBool.AllowNullOrEmpty">
      <summary>Gets a value that indicates whether the property value can be null.</summary>
      <returns>true if the value can be null; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.PropertyValidatorBool.Validate(System.Object)">
      <summary>Returns a value that indicates whether the provided value is valid.</summary>
      <returns>true if the <paramref name="value" /> is valid; otherwise, false.</returns>
      <param name="value">An object that contains a bool value or a string that can be parsed into a bool value.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.PropertyValidatorFloat">
      <summary>Validates a floating point value.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.PropertyValidatorFloat.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.PropertyValidatorFloat" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.PropertyValidatorFloat.#ctor(System.Single,System.Single[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.PropertyValidatorFloat" /> class by using the provided array of valid values. </summary>
      <param name="slop">A <see cref="T:System.Single" /> that represents the number by which the value can exceed or fall short of the valid values and still be considered valid.</param>
      <param name="validValues">One or more parameters that represent valid values of type <see cref="T:System.Single" />.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.PropertyValidatorFloat.#ctor(System.Single[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.PropertyValidatorFloat" /> class by using the provided array of valid values. </summary>
      <param name="validValues">One or more parameters that represent valid values of type <see cref="T:System.Single" />.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.PropertyValidatorFloat.AllowNullOrEmpty">
      <summary>Gets a value that indicates whether the property value can be null.</summary>
      <returns>true if the value can be null; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.PropertyValidatorFloat.Validate(System.Object)">
      <summary>Returns whether the provided value is valid.</summary>
      <returns>true if the <paramref name="value" /> is valid; otherwise, false.</returns>
      <param name="value">An object that contains either a <see cref="T:System.Single" /> or a <see cref="T:System.String" /> that represents a <see cref="T:System.Single" /> value.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.PropertyValidatorInt">
      <summary>Validates an integer value.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.PropertyValidatorInt.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.PropertyValidatorInt" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.PropertyValidatorInt.#ctor(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <param name="allowNullOrEmpty">true to allow a null value; false to disallow a null value.</param>
      <param name="allowZero">true to allow a zero value; false to require a nonzero value.</param>
      <param name="minValue">An int that represents the minimum valid value.</param>
      <param name="maxValue">An int that represents the maximum valid value.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.PropertyValidatorInt.#ctor(System.Boolean,System.Int32,System.Int32)">
      <param name="allowNullOrEmpty">true to allow a null value; false to disallow a null value.</param>
      <param name="minValue">An int that represents the minimum valid value.</param>
      <param name="maxValue">An int that represents the maximum valid value.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.PropertyValidatorInt.#ctor(System.Boolean,System.Int32[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.PropertyValidatorInt" /> class by using the provided values.</summary>
      <param name="allowNullOrEmpty">true to allow a null value; false to disallow a null value.</param>
      <param name="validValues">One or more parameters that represent valid values of type int.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.PropertyValidatorInt.#ctor(System.Int32[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.PropertyValidatorInt" /> class by using the provided array of valid values.</summary>
      <param name="validValues">One or more parameters that represent valid values of type int.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.PropertyValidatorInt.AllowNullOrEmpty">
      <summary>Gets a value that indicates whether the property value can be null.</summary>
      <returns>true if the value can be null; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.PropertyValidatorInt.Validate(System.Object)">
      <summary>Returns a value that indicates whether the provided value is valid.</summary>
      <returns>true if the <paramref name="value" /> is valid; otherwise, false.</returns>
      <param name="value">An object that contains either an <see cref="T:System.Int32" /> or a <see cref="T:System.String" /> that represents an <see cref="T:System.Int32" /> value.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.PropertyValidatorList">
      <summary>Validates whether a value is equal to a value in a provided list.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.PropertyValidatorList.#ctor(System.Boolean,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.PropertyValidatorList" /> class by using the provided values. </summary>
      <param name="allowNullOrEmpty">true if the value can be null; otherwise, false.</param>
      <param name="validValues">One or more parameters that represent valid string values.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.PropertyValidatorList.#ctor(System.String[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.PropertyValidatorList" /> class by using the provided list of valid values. </summary>
      <param name="validValues">One or more parameters that represent valid string values.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.PropertyValidatorList.AllowNullOrEmpty">
      <summary>Gets a value that indicates whether the property value can be null or empty.</summary>
      <returns>true if the value can be null or empty; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.PropertyValidatorList.Validate(System.Object)">
      <summary>Returns whether the provided value is valid when it is compared to each item in the list of valid values.</summary>
      <returns>true if the value is valid for this property; otherwise, false.</returns>
      <param name="value">An <see cref="T:System.Object" /> that can be converted to a string for comparison.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.SchemaDeployment">
      <summary>Represents the database schema deployment engine.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.SchemaDeployment" /> class. </summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeployment.ComparisonResult">
      <summary>Gets the result of comparing the source and the target database models. </summary>
      <returns>The comparison result object.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.Configure(Microsoft.Build.Evaluation.Project,System.IO.DirectoryInfo)">
      <summary>Configures a deployment by using the provided deployment manifest and directory information.</summary>
      <param name="manifest">A <see cref="T:Microsoft.Build.Evaluation.Project" /> object.</param>
      <param name="fileLocation">A <see cref="T:System.IO.DirectoryInfo" /> object identifying the file location.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeployment.ContributorArguments">
      <summary>Gets a list of command line arguments and their values as set by the user in Visual Studio Application Lifecycle Management (ALM).</summary>
      <returns>The list of command line arguments and values.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeployment.ContributorConfiguration">
      <summary>Gets the list of files that contain contributor configurations.</summary>
      <returns>A list of configuration files.</returns>
    </member>
    <member name="E:Microsoft.Data.Schema.Build.SchemaDeployment.ContributorMessage">
      <summary>Occurs when a <see cref="T:Microsoft.Data.Schema.Build.DeploymentContributor" />, that is, <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanContributor" /> or <see cref="T:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentContributor" />, returns a message.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.CreateController">
      <summary>Creates and returns an <see cref="T:Microsoft.Data.Schema.Build.ISchemaDeploymentController" /> object.</summary>
      <returns>If the source database, the target database, or the comparison result is null, the required objects are created and prepared for executing the deployment.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeployment.DatabaseSchemaProvider">
      <summary>Gets the <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" /> for both the source database and the target database.</summary>
      <returns>The database schema provider.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.Dispose">
      <summary>Releases resources.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.Dispose(System.Boolean)">
      <summary>Releases resources depending on the value of the <paramref name="disposing" /> parameter.</summary>
      <param name="disposing">true to release all resources; otherwise, false.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeployment.ErrorManager">
      <summary>Gets the <see cref="T:Microsoft.Data.Schema.ErrorManager" /> object.</summary>
      <returns>The error manager.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.Execute">
      <summary>Executes the deployment plan by using all previously set properties, options, and parameters.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeployment.IsDeployToDatabase"></member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeployment.IsDeployToScript"></member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.LoadDeploymentConfiguration(System.IO.FileInfo)">
      <summary>Loads the configuration file and calls the <see cref="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnLoadDeploymentConfiguration(System.IO.FileInfo)" /> method.</summary>
      <param name="deployConfigFile">A <see cref="T:System.IO.FileInfo" /> object that represents the configuration file. Cannot be null.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnAfterPreparePlan">
      <summary>Called after the deployment plan has been prepared to allow derived classes to do additional processing for a custom <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnBeforePreparePlan">
      <summary>Called before preparing the deployment plan to allow derived classes to do additional processing for a custom <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnBuildConnectionString(System.String,System.String)">
      <summary>Called when building the connection string to allow derived classes to do additional processing for a custom <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
      <returns>The completed connection string.</returns>
      <param name="partialConnectionString">The preliminary connection string ready for custom modification.</param>
      <param name="databaseName">The name of the database.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnCancel">
      <summary>Called when deployment execution has been canceled.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnClearPreviousOutputs">
      <summary>Override this method in database schema provider implementations if you have to remove additional outputs from a previous deployment.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnConfigure(Microsoft.Build.Evaluation.Project,System.IO.DirectoryInfo)">
      <summary>Called when applying configuration to allow derived classes to do additional processing for a custom <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" /> when using an <see cref="T:Microsoft.Build.Evaluation.Project" />.</summary>
      <returns>A list of <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> objects that were encountered when applying the configuration.</returns>
      <param name="manifest">A <see cref="T:Microsoft.Build.Evaluation.Project" /> object.</param>
      <param name="fileLocation">A <see cref="T:System.IO.DirectoryInfo" /> object that identifies the file location.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnConfigureComparerConfiguration(Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration)">
      <summary>Called when applying model comparer configuration to allow derived classes to do additional processing for a custom <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
      <param name="comparerConfiguration">The <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnCreateDatabaseModifier">
      <summary>Called to allow derived classes to do additional processing and possibly use a custom <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanExecutor" /> to execute the deployment plan for a custom <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
      <returns>A custom <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanExecutor" /> object.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnCreateDeploymentScriptGenerator">
      <summary>Called to create a <see cref="T:Microsoft.Data.Schema.Build.DeploymentScriptGenerator" />.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.Build.DeploymentScriptGenerator" /> object.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnCreateNewDatabaseModel(Microsoft.Data.Schema.ErrorManager,System.String)">
      <summary>Called when creating the target database model to allow derived classes to do additional processing for a custom <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> object.</returns>
      <param name="errorManager">The <see cref="T:Microsoft.Data.Schema.ErrorManager" /> value of the <see cref="P:Microsoft.Data.Schema.Build.SchemaDeployment.ErrorManager" /> property.</param>
      <param name="partialConnectionString">The connection string for the target database, which can be modified before creating the model.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnDatabaseExists(System.String,System.String)">
      <summary>When implemented in a derived class, verifies that the specified database exists.</summary>
      <returns>true if the database exists; otherwise false. The default is false.</returns>
      <param name="partialConnectionString">The connection string for the target database, which can be modified before creating the model.</param>
      <param name="databaseName">The name of the database.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnImportTargetModel(Microsoft.Data.Schema.SchemaModel.ReverseEngineerConstructor)">
      <summary>Called during deployment execution when preparing the model for deployment and the <see cref="P:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.CreateNewDatabase" /> option is false.</summary>
      <returns>The data schema model for the target database.</returns>
      <param name="reverseEngineerConstructor">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerConstructor" /> object for the target database.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnInitializeConstructor(Microsoft.Data.Schema.SchemaModel.DataSchemaModelHeader,Microsoft.Data.Schema.DatabaseSchemaProvider,Microsoft.Data.Schema.SchemaModel.DataSchemaModelConstructor)"></member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnInitializeConstructor(Microsoft.Data.Schema.SchemaModel.ModelComparerConstructor)">
      <summary>Called when a <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparerConstructor" /> is initialized to allow custom classes to do additional processing for a custom <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
      <param name="constructor">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparerConstructor" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnInitializeConstructor(Microsoft.Data.Schema.SchemaModel.ReverseEngineerConstructor)">
      <summary>Called when a <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerConstructor" /> is initialized to allow custom classes to do additional processing for a custom <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
      <param name="constructor">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerConstructor" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnLoadDeploymentConfiguration(System.IO.FileInfo)">
      <summary>Called by the <see cref="M:Microsoft.Data.Schema.Build.SchemaDeployment.LoadDeploymentConfiguration(System.IO.FileInfo)" /> method to allow custom classes to do additional processing for a custom <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
      <param name="deployConfigFile">A <see cref="T:System.IO.FileInfo" /> object that represents the configuration file.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnLoadTargetModelModifiers">
      <summary>Called when loading model modifiers for the target database model to allow custom classes to do additional processing for a custom <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
      <returns>A list of <see cref="T:Microsoft.Data.Schema.Build.TargetModelModifier" /> objects. The default implementation returns null.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnVerifyModels">
      <summary>Called during deployment execution after the schema models have been prepared for deployment to allow custom classes to do additional processing for a custom <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
      <returns>A list of <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> objects that represent the errors encountered during the model verification process. The default implementation returns an empty list.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnVerifyPlan(Microsoft.Data.Schema.Build.DeploymentPlan)">
      <summary>Called during deployment execution after the deployment plan has been created to allow custom classes to do additional processing for a custom <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
      <returns>A list of <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> objects that represent the errors encountered during the verification process. The default implementation returns null.</returns>
      <param name="plan">A collection of <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanProblem" /> objects.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.OnVerifyTargetConnection(System.String)">
      <summary>Called during initialization to verify the connection string for the target database.</summary>
      <param name="connectionString">The connection string for the target database.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeployment.Options">
      <summary>Gets the deployment options.</summary>
      <returns>The deployment options.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeployment.OriginalSourceDatabaseSchemaProvider">
      <summary>Gets the original <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" /> for the source database.</summary>
      <returns>The original database schema provider for the source database.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeployment.Plan">
      <summary>Gets the deployment plan.</summary>
      <returns>The deployment plan.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeployment.PlanExecutors">
      <summary>Gets a list of <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanExecutor" /> objects that will be used during deployment.</summary>
      <returns>The list of plan executors.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeployment.PlanGenerator">
      <summary>Gets the <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanGenerator" /> object.</summary>
      <returns>The deployment plan generator.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeployment.PlanModifiers">
      <summary>Gets a list of <see cref="T:Microsoft.Data.Schema.Build.DeploymentPlanModifier" /> objects.</summary>
      <returns>The list of deployment plan modifiers.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.SetDeployToDatabase(System.Boolean)">
      <summary>Called when loading a manifest for a <see cref="T:Microsoft.Build.Evaluation.Project" /> to set whether to deploy to a database.</summary>
      <param name="deployToDatabase">true to deploy to a database.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeployment.SetDeployToScript(System.Boolean,System.String)">
      <summary>Called when loading a manifest for a <see cref="T:Microsoft.Build.Evaluation.Project" /> to set whether to deploy to a script.</summary>
      <param name="deployToScript">true to deploy to script.</param>
      <param name="scriptPath">If <paramref name="deployToScript" /> is true, contains the path to the script file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="deployToScript" /> parameter is true and the <paramref name="scriptPath" /> property is null or empty.</exception>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeployment.Source">
      <summary>Gets the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> for the source database.</summary>
      <returns>The source data schema model.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeployment.Target">
      <summary>Gets the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> for the target database.</summary>
      <returns>The target data schema model.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.SchemaDeploymentConstructor">
      <summary>Used by Visual Studio to create a <see cref="T:Microsoft.Data.Schema.Build.SchemaDeployment" /> object.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeploymentConstructor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.SchemaDeploymentConstructor" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeploymentConstructor.ConstructServiceImplementation">
      <summary>Called by Visual Studio to obtain a <see cref="T:Microsoft.Data.Schema.Build.SchemaDeployment" /> object.</summary>
      <returns>The initialized schema deployment engine.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:Microsoft.Data.Schema.Build.SchemaDeploymentConstructor.Errors" /> property is null.</exception>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeploymentConstructor.Errors">
      <summary>Gets or sets the error manager to contain any errors or warnings that are encountered during the deployment processes.</summary>
      <returns>The error manager object.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeploymentConstructor.OnConstructDeployment">
      <summary>Creates a schema deployment object.</summary>
      <returns>A new schema deployment object.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeploymentConstructor.Setup(Microsoft.Data.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Schema.SchemaModel.ModelComparisonResult)">
      <summary>Prepares the <see cref="T:Microsoft.Data.Schema.Build.SchemaDeployment" /> object by using the provided source and target schema models, in addition to the given comparison result.</summary>
      <param name="source">A <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> for the source database.</param>
      <param name="target">A <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> for the target database.</param>
      <param name="modelDifference">The <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult" /> that describes the differences between the two models.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeploymentConstructor.Setup(Microsoft.Data.Schema.SchemaModel.DataSchemaModel,System.String)">
      <summary>Prepares the <see cref="T:Microsoft.Data.Schema.Build.SchemaDeployment" /> object by using the provided source model and target connection string.</summary>
      <param name="source">A <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> for the source database.</param>
      <param name="targetConnectionString">The connection string for the target database.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeploymentConstructor.Setup(System.IO.FileInfo,System.IO.FileInfo)"></member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeploymentConstructor.Setup(System.IO.FileInfo,System.String)">
      <summary>Prepares the <see cref="T:Microsoft.Data.Schema.Build.SchemaDeployment" /> object by using the provided source file and target connection string.</summary>
      <param name="sourceSchemaFile">A <see cref="T:System.IO.FileInfo" /> for the source database file.</param>
      <param name="targetConnectionString">The connection string for the target database.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeploymentConstructor.TargetDatabaseName"></member>
    <member name="T:Microsoft.Data.Schema.Build.SchemaDeploymentOptions">
      <summary>Represents option settings in the deployment settings window, such as Database.sqldeployment, for the database project in Visual Studio.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.SchemaDeploymentOptions" /> class. </summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.BuildtimeContributorsMustExist"></member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.ComparerConfiguration">
      <summary>Gets the selected comparer configuration.</summary>
      <returns>The comparer configuration.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.CreateCopy">
      <summary>Returns a copy of these option settings.</summary>
      <returns>A copy of the option settings in this object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.CreateNewDatabase">
      <summary>Gets or sets whether to create a new target database during deployment.</summary>
      <returns>true to create a new database; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.DropObjectsNotInSource">
      <summary>Gets or sets whether to drop any objects in the target database that are not in the source database.</summary>
      <returns>true to drop target database objects that are not in the source database; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.ExcludedModelElements">
      <summary>Gets or sets a list of model elements the user has chosen to be excluded from the target database.</summary>
      <returns>A list of the excluded elements.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.ExtensionHandle">
      <summary>Gets or sets the extension handle for this extension.</summary>
      <returns>The extension handle.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.OnExtensionHandle">
      <summary>Called when the <see cref="M:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.SetExtensionHandle(Microsoft.Data.Schema.Extensibility.ExtensionHandle)" /> method is invoked.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.OnInitialize">
      <summary>Called by the deployment settings window, such as Database.sqldeployment, in Visual Studio when this class is initialized.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.SerializationData">
      <summary>Gets or sets the XML serialized data for this object.</summary>
      <returns>A collection of named values for the options and their values.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.SetExtensionHandle(Microsoft.Data.Schema.Extensibility.ExtensionHandle)">
      <summary>Sets the value of the <see cref="P:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.ExtensionHandle" /> property and calls the <see cref="M:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.OnExtensionHandle" /> method.</summary>
      <param name="handle">An <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle" /> object.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.TargetConnectionString">
      <summary>Gets or sets the connection string for the target database.</summary>
      <returns>The target database connection string.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.TargetDatabaseName">
      <summary>Gets or sets the name of the target database.</summary>
      <returns>The target database name.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.TreatVerificationErrorsAsWarnings">
      <summary>Gets or sets whether to treat all verification errors as warnings.</summary>
      <returns>true to treat verification errors as warnings; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.SchemaDeploymentOptions.VerifyDeployment">
      <summary>Gets or sets whether to verify the deployment after it is complete.</summary>
      <returns>true to verify the deployment; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.TargetModelModifier">
      <summary>Represents a target model modifier.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.TargetModelModifier.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.TargetModelModifier" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.TargetModelModifier.ProposeTargetOperations(Microsoft.Data.Schema.Build.DeploymentContributorContext)"></member>
    <member name="M:Microsoft.Data.Schema.Build.TargetModelModifier.ProvideDeploymentModifier(Microsoft.Data.Schema.Build.DeploymentContributorContext)"></member>
    <member name="T:Microsoft.Data.Schema.Build.TargetModelOperation">
      <summary>Represents a target model operation.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.TargetModelOperation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.TargetModelOperation" /> class.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.TargetModelOperation.Element">
      <summary>Gets an element.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.TargetModelOperation.GenerateSteps">
      <summary>Generates a list of steps.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.TargetModelOperation.Operation">
      <summary>Gets an operation.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.TargetModelOperation.PerformOperation">
      <summary>Performs an operation.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.TaskHostSerializationContext">
      <summary>Represents a task host serialization context.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.TaskHostSerializationContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.TaskHostSerializationContext" /> class.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.TaskHostSerializationContext.DatabaseSchemaProvider">
      <summary>Gets or sets the database schema provider.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.TaskHostSerializationContext.DataSchemaModel">
      <summary>Gets or sets the data schema model.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.TaskHostSerializationContext.Dispose"></member>
    <member name="P:Microsoft.Data.Schema.Build.TaskHostSerializationContext.IdeMode">
      <summary>Gets or sets the IDE mode.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Build.VSDBCmdServices">
      <summary>Represents VSDBCmd services.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.VSDBCmdServices.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Build.VSDBCmdServices" /> class.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.VSDBCmdServices.ConnectionString">
      <summary>Gets or sets a connection string.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Build.VSDBCmdServices.ExtensionHandle">
      <summary>Gets an extension handle.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle" />.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.VSDBCmdServices.GetDeployPropertyUsage(System.String)"></member>
    <member name="M:Microsoft.Data.Schema.Build.VSDBCmdServices.GetImportPropertyUsage(System.String)"></member>
    <member name="M:Microsoft.Data.Schema.Build.VSDBCmdServices.GetSetableDeployProperties(System.Type)">
      <summary>Returns a list of the deployment properties that can be set on the specified target type.</summary>
      <param name="optionsType">The type of properties to be returned.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.VSDBCmdServices.OnGetAdditionalDeploymentOptions">
      <summary>Returns null.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.VSDBCmdServices.OnGetDeployPropertyUsage(System.String)">
      <summary>Returns null.</summary>
      <param name="propertyName">The property name.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.VSDBCmdServices.OnGetImportSchemaPropertyUsage(System.String)">
      <summary>Returns null.</summary>
      <param name="propertyName">The property name.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.VSDBCmdServices.OnGetReferenceDBSchema(System.String)">
      <summary>Returns null.</summary>
      <param name="basePath">The base path.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.VSDBCmdServices.OnIncludeDeployProperty(System.String)">
      <summary>Returns False.</summary>
      <param name="propertyName">The property name.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.VSDBCmdServices.OnIncludeImportSchemaProperty(System.String)">
      <summary>Returns False.</summary>
      <param name="propertyName">The property name.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.VSDBCmdServices.OnInitializeConstructor(Microsoft.Data.Schema.Build.SchemaDeploymentConstructor)">
      <summary>Used to initialize the schema deployment constructor.</summary>
      <param name="dc">The schema deployment constructor.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.VSDBCmdServices.OnInitializeConstructor(Microsoft.Data.Schema.SchemaModel.ReverseEngineerConstructor)">
      <summary>Used to initialize the reverse engineering constructor.</summary>
      <param name="reverseEngineerConstructor">The reverse engineer constructor.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.VSDBCmdServices.OnInitializeSchemaDeploymentOptions(Microsoft.Data.Schema.Build.SchemaDeploymentOptions)">
      <summary>Override to allow initialization of options for VSDBCMD-specific usage.</summary>
      <param name="options">A list of schema deployment options.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.VSDBCmdServices.OnPostProcessImportedModel(Microsoft.Data.Schema.SchemaModel.DataSchemaModel)">
      <summary>Does nothing.</summary>
      <param name="model">The reverse engineered model.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.VSDBCmdServices.OnSetAdditionalDeploymentOptions(Microsoft.Data.Schema.Build.SchemaDeployment,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Override this method to process additional deployment options that might have been specified for the command line of a database schema provider.</summary>
      <param name="engine">The schema deployment engine.</param>
      <param name="properties">The list of deployment properties.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.VSDBCmdServices.SetExtensionHandle(Microsoft.Data.Schema.Extensibility.ExtensionHandle)">
      <summary>Sets the extension handle.</summary>
      <param name="handle">The extension handle.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Build.VSDBCmdServices.SetProperties(System.Collections.Generic.IDictionary{System.String,System.Reflection.PropertyInfo},System.Collections.Generic.IDictionary{System.String,System.String},System.Object,System.Collections.Generic.HashSet{System.String}@)">
      <summary>Helper method that uses reflection to set properties dynamically.</summary>
      <param name="availableProperties">A list of available properties.</param>
      <param name="propertyValueLookup">A name/value pair list of properties, keyed by property name.</param>
      <param name="propertyHolder">The object whose properties will be set.</param>
      <param name="unsetProperties">The returned list of properties whose values were not set.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.Extensibility.BindingClassification">
      <summary>Describes the binding classification of an extension to a Visual Studio edition.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.Extensibility.BindingClassification.None">
      <summary />
    </member>
    <member name="F:Microsoft.Data.Schema.Extensibility.BindingClassification.Express">
      <summary />
    </member>
    <member name="F:Microsoft.Data.Schema.Extensibility.BindingClassification.Standard">
      <summary />
    </member>
    <member name="F:Microsoft.Data.Schema.Extensibility.BindingClassification.Professional">
      <summary />
    </member>
    <member name="F:Microsoft.Data.Schema.Extensibility.BindingClassification.TeamSystem">
      <summary />
    </member>
    <member name="T:Microsoft.Data.Schema.Extensibility.BindingClassificationAttribute">
      <summary>Used by the system to decide whether to turn a feature on or off when loading the feature based on the specified level of binding.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.BindingClassificationAttribute.#ctor(Microsoft.Data.Schema.Extensibility.BindingClassification)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.Data.Schema.Extensibility.BindingClassificationAttribute" /> class using the provided binding classification.</summary>
      <param name="bindingClassification">A member of the <see cref="T:Microsoft.Data.Schema.Extensibility.BindingClassification" /> enumeration.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.BindingClassificationAttribute.BindingClassification">
      <summary>Gets the binding level for an extension feature.</summary>
      <returns>A member of the <see cref="T:Microsoft.Data.Schema.Extensibility.BindingClassification" /> enumeration.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Extensibility.DatabaseSchemaProviderCompatibilityAttribute">
      <summary>Specifies with which database service provider or providers the extended feature will be compatible. This attribute can be applied multiple times for compatibility with multiple providers or features.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.DatabaseSchemaProviderCompatibilityAttribute.#ctor(System.Type)">
      <summary>Initializes a <see cref="T:Microsoft.Data.Schema.Extensibility.DatabaseSchemaProviderCompatibilityAttribute" /> object by using a <see cref="T:System.Type" />.</summary>
      <param name="compatibleDatabaseSchemaProvider"></param>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.DatabaseSchemaProviderCompatibilityAttribute.CompatibleDatabaseSchemaProvider">
      <summary>Gets the compatible data schema provider type.</summary>
      <returns>The type of the compatible provider.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Extensibility.DatabaseSchemaProviderFamily">
      <summary>Identifies a family of providers.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.DatabaseSchemaProviderFamily.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Extensibility.DatabaseSchemaProviderFamily" /> class. </summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.DatabaseSchemaProviderFamily.AdoProvider">
      <summary>Gets the ActiveX Data Objects (ADO) provider for all digital signal processors (DSPs) in the family.</summary>
      <returns>The name of an ADO provider (such as "Open Database Connectivity (ODBC)").</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.DatabaseSchemaProviderFamily.CreateServerExplorerConnectionName(System.String)"></member>
    <member name="M:Microsoft.Data.Schema.Extensibility.DatabaseSchemaProviderFamily.DetermineDatabaseSchemaProvider(System.String)">
      <summary>Returns the type of database schema provider that is based on a connection string.</summary>
      <returns>The type of database schema provider.</returns>
      <param name="connectionString">A connection string for a database.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.DatabaseSchemaProviderFamily.FamilyName">
      <summary>Gets the short name that identifies the family (such as "sql" for SQL Server database providers).</summary>
      <returns>The family name.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.DatabaseSchemaProviderFamily.ServerExplorerDataProvider">
      <summary>Gets the <see cref="T:System.Guid" /> that identifies the base data provider that all providers in this family use.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.DatabaseSchemaProviderFamily.ServerExplorerDataSource">
      <summary>Gets the <see cref="T:System.Guid" /> that identifies the data source that all providers in this family use.</summary>
      <returns>The data source Guid.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Extensibility.DataProviderServices">
      <summary>Provides a variety of services for an ADO.NET provider.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.DataProviderServices.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Extensibility.DataProviderServices" /> class. </summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.DataProviderServices.AdoProvider">
      <summary>Gets the name of the ADO.NET provider. That provider is used by all the services that are available from classes that are derived from this class.</summary>
      <returns>The name of the ADO.NET provider.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.DataProviderServices.ConnectionStringParser">
      <summary>Gets a connection string parser that is derived from the <see cref="T:Microsoft.Data.Schema.Extensibility.IConnectionStringParser" /> class.</summary>
      <returns>A connection string parser.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.DataProviderServices.GetCompatibleDatabaseProviderServices(System.String)">
      <summary>Returns a <see cref="T:Microsoft.Data.Schema.Extensibility.DataProviderServices" /> that is compatible with the name of the provided ADO.NET provider.</summary>
      <returns>An instantiated object that is derived from this <see cref="T:Microsoft.Data.Schema.Extensibility.DataProviderServices" /> class.</returns>
      <param name="adoProvider">The name of an ADO.NET provider.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.Extensibility.ExtensibilityException">
      <summary>Represents an exception that is thrown when a problem occurs with instantiating or loading an extension.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensibilityException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensibilityException" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensibilityException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensibilityException" /> class by using the provided message. </summary>
      <param name="message">A description of the problem that caused the exception.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensibilityException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensibilityException" /> class by using the provided message and an inner exception. </summary>
      <param name="message">A description of the problem that caused the exception.</param>
      <param name="innerException">The original exception.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.Extensibility.ExtensionCriteriaAttribute">
      <summary>Represents the extension criteria attribute.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionCriteriaAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionCriteriaAttribute" /> class.</summary>
      <param name="criteriaBaseType">The criteria base type</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionCriteriaAttribute.AllowMultipleExtensions">
      <summary>Gets or sets whether this extension criteria allows multiple extensions to be loaded for this criteria.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionCriteriaAttribute.CriteriaBaseType">
      <summary>Gets the criteria base type.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionCriteriaAttribute.DefaultExtension">
      <summary>Gets or sets the default extension.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionCriteriaAttribute.MarkerAttributeType">
      <summary>Gets or sets the marker attribute type.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionCriteriaAttribute.ProxyType">
      <summary>Gets or sets the proxy type.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Extensibility.ExtensionDeclarationAttribute">
      <summary>Represents the extension declaration attribute.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionDeclarationAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionDeclarationAttribute" /> class.</summary>
      <param name="extensionType">The extension type</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionDeclarationAttribute.ExtensionType">
      <summary>Gets the extension type.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Extensibility.ExtensionDescriptionAttribute">
      <summary>Represents the extension description attribute.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionDescriptionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionDescriptionAttribute" /> class.</summary>
      <param name="displayName">The display name</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionDescriptionAttribute.Description">
      <summary>Gets or sets the description.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionDescriptionAttribute.Publisher">
      <summary>Gets or sets the publisher.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle">
      <summary>Contains the extension type for this extension type.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionHandle.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle" /> class.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionHandle.Description">
      <summary>Gets or sets the description of this extension.</summary>
      <returns>The description.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionHandle.Equals(Microsoft.Data.Schema.Extensibility.ExtensionHandle)">
      <summary>Determines whether two <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle" /> objects are equal. If the P:Microsoft.Data.Schema.Extensibility.ExtensionHandle.ExtensionType is the same, the objects are equal.</summary>
      <returns>true if the two objects are equal; otherwise, false.</returns>
      <param name="other">
        <see cref="T:Microsoft.VisualStudio.TeamSystem.Data.Extensibility.ExtensionHandle" />
      </param>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionHandle.Equals(System.Object)">
      <summary>Compares whether two objects are equal.</summary>
      <returns>true if the two objects are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> being compared to the <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle" /> object</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionHandle.ExtensionManager">
      <summary>Gets or sets a reference to the <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionManager" />.</summary>
      <returns>Returns the extension manager.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionHandle.ExtensionType">
      <summary>Gets the extension type.</summary>
      <returns>The type of this extension.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionHandle.ExtensionTypeFriendlyName">
      <summary>Gets the friendly name of the extension type.</summary>
      <returns>The friendly name for the type.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionHandle.FriendlyName">
      <summary>Gets the friendly name of this extension handle.</summary>
      <returns>The friendly name</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionHandle.GetHashCode">
      <summary>Gets the HashCode for this <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle" />, based on the <see cref="P:Microsoft.Data.Schema.Extensibility.ExtensionHandle.ExtensionType" />.</summary>
      <returns>
        <see cref="T:System.Int32" /> represents a hash for an <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle" /> object.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionHandle.GetSchema">
      <summary>Gets the schema for the XML serialization of this extension.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> represents the XML schema.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionHandle.Publisher">
      <summary>Gets or sets the name of the publisher of this extension.</summary>
      <returns>The publisher name.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionHandle.ReadXml(System.Xml.XmlReader)">
      <summary>Deserializes an extension returning the assembly name, and type name.</summary>
      <param name="reader">A <see cref="T:System.Xml.XmlReader" /> that provides a non-cached, forward-only access to an extension in XML format.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionHandle.WriteXml(System.Xml.XmlWriter)">
      <summary>Serializes this extension handle. The assembly full name and the full type name are included in the serialization.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> object that generates streams or files that contain XML data.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle`1">
      <summary>Contains the extension type and the named configuration for this extension type.</summary>
      <typeparam name="TInterfaceType"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionHandle`1.Instantiate">
      <summary>Instantiates an ExtensionHandle.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Extensibility.ExtensionLoadError">
      <summary>Represents the message used to store an extension load error.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionLoadError.#ctor(System.String,Microsoft.Data.Schema.ErrorSeverity)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionLoadError" /> class.</summary>
      <param name="message">The error message</param>
      <param name="severity">A member of the <see cref="T:Microsoft.Data.Schema.ErrorSeverity" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionLoadError.#ctor(System.String,Microsoft.Data.Schema.ErrorSeverity,Microsoft.Data.Schema.Extensibility.ExtensionHandle)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionLoadError" /> class.</summary>
      <param name="message">The error message</param>
      <param name="severity">A member of the <see cref="T:Microsoft.Data.Schema.ErrorSeverity" /> enumeration.</param>
      <param name="associatedExtension">The associated <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle" /></param>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionLoadError.AssociatedExtension">
      <summary>Gets the associated extension handle.</summary>
      <returns>The associated extension handle.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionLoadError.Message">
      <summary>Gets the error message.</summary>
      <returns>The error message.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionLoadError.Severity">
      <summary>Gets the error severity.</summary>
      <returns>The severity indication</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Extensibility.ExtensionManager">
      <summary>Maintains an extension context and is responsible for loading extensions. Extensions include the <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" /> instance that is used by a database project. Each database project maintains a single <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionManager" /> instance.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionManager.#ctor(System.String)">
      <summary>Initializes an instance of <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionManager" /> using the qualified type name of the <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</summary>
      <param name="databaseSchemaProviderType">A string that contains the fully qualified type name of the <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />. For example, typeof(Sql80DatabaseSchemaProvider).FullName.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionManager.AddExtensionLoadPath(System.String)">
      <summary>Add a path to the list of extension load paths. </summary>
      <param name="path">The extension load path</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionManager.AllDatabaseSchemaProviderTypes">
      <summary>Gets a list of all available database schema provider types.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionManager.DatabaseSchemaProvider">
      <summary>Get the associated data source provider instance.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" /> object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionManager.Errors">
      <summary>Gets a read-only collection of errors from the loading operation if the creation of this manager triggered the type load.. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionManager.GetExtension``1(Microsoft.Data.Schema.Extensibility.ExtensionHandle)">
      <summary>Finds an extension in the current <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionManager" /> of type <see cref="T:Microsoft.Data.Schema.Extensibility.IExtension" /> and configuration as the object identified by the <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle" /> parameter value.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle`1" /> of the specified <paramref name="TInterfaceType" /> that has been loaded.</returns>
      <param name="extensionHandle">The <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle`1" /> of an object of type <see cref="T:Microsoft.Data.Schema.Extensibility.IExtension" /> to find.</param>
      <typeparam name="TInterfaceType">A <see cref="T:System.Type" /> inheriting from <see cref="T:Microsoft.Data.Schema.Extensibility.IExtension" />.</typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionManager.GetExtension``1(System.String,System.String)">
      <summary>Finds an extension from loaded extensions in the current <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionManager" /> using the provided assembly name and type name.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle`1" /> of type <see cref="T:Microsoft.Data.Schema.Extensibility.IExtension" />.</returns>
      <param name="assemblyName">A string that contains the name of the assembly.</param>
      <param name="typeFullName">A string that contains the fully qualified type name.</param>
      <typeparam name="TInterfaceType">A <see cref="T:System.Type" /> inheriting from <see cref="T:Microsoft.Data.Schema.Extensibility.IExtension" />.</typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionManager.GetExtension``1(System.Type)">
      <summary>Retrieves an <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle`1" /> that matches the provided <see cref="T:System.Type" />.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle`1" /> of type <see cref="T:Microsoft.Data.Schema.Extensibility.IExtension" />.</returns>
      <param name="extensionType">The <see cref="T:System.Type" /> identifies the extension type.</param>
      <typeparam name="TInterfaceType">A <see cref="T:System.Type" /> inheriting from <see cref="T:Microsoft.Data.Schema.Extensibility.IExtension" />.</typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionManager.GetExtensions``1">
      <summary>Returns a list of the extension types for the provided extension interface type that have loaded successfully.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle" /> that contains handles of extensions that have been successfully loaded.</returns>
      <typeparam name="TInterfaceType">An interface inheriting from the <see cref="T:Microsoft.Data.Schema.Extensibility.IExtension" /> interface.</typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionManager.GetSingleExtension``1">
      <summary>Returns a single <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle" /> object.</summary>
      <returns>An <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle`1" />.</returns>
      <typeparam name="TInterfaceType">A <see cref="T:System.Type" /> inheriting from <see cref="T:Microsoft.Data.Schema.Extensibility.IExtension" />.</typeparam>
      <exception cref="T:Microsoft.Data.Schema.Extensibility.ExtensibilityException">The <see cref="P:Microsoft.Data.Schema.Extensibility.ExtensionCriteriaAttribute.AllowMultipleExtensions" /> property of the <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionCriteriaAttribute" /> is false and more than one matching extension was found.</exception>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionManager.InstantiateType``2(System.Type)">
      <summary>Instantiates a type and casts it as an interface.</summary>
      <param name="type">A <see cref="T:System.Type" /> that is not an extension.</param>
      <typeparam name="T"></typeparam>
      <typeparam name="TProxy"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionManager.InstantiateType``1(System.Type)">
      <summary>Instantiates a type and casts it as an interface.</summary>
      <returns>A <see cref="T:System.Type" /> cast as an interface.</returns>
      <param name="type">A <see cref="T:System.Type" /> that is not an extension.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionManager.IsCompatibleWithCurrentProvider(System.String,System.String)">
      <summary>Returns a value indicating whether passing a Data Services Provider name or key is compatible with the current provider in this <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionManager" />.</summary>
      <returns>true if the data services provider type is compatible with the current <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionManager" />; otherwise false.</returns>
      <param name="assemblyName">A <see cref="T:System.String" /> that contains the name of the assembly that provides the extension.</param>
      <param name="newProviderTypeName">A <see cref="T:System.String" /> that contains the type name of a data services provider.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionManager.IsExtension``1(Microsoft.Data.Schema.Extensibility.ExtensionHandle)">
      <summary>Checks whether the provided extension handle is valid and is loaded into the current <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionManager" />.</summary>
      <returns>true if the <paramref name="extensionHandle" /> is valid and loaded into the current <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionManager" />; otherwise, false.</returns>
      <param name="extensionHandle">An <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle`1" /> that implements the <paramref name="TInterfaceType" /> interface.</param>
      <typeparam name="TInterfaceType">An interface that derives from the <see cref="T:Microsoft.Data.Schema.Extensibility.IExtension" /> interface.</typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionManager.IsExtension``1(System.Type)">
      <summary>Checks whether there is a valid extension matching the provided type that does not have a configuration in the current instance.</summary>
      <returns>true if there is a valid extension of the passed type that does not have a registered configuration; otherwise, false.</returns>
      <param name="type">A <see cref="T:System.Type" /> that implements the <paramref name="TInterfaceType" /> interface.</param>
      <typeparam name="TInterfaceType">An interface that derives from the <see cref="T:Microsoft.Data.Schema.Extensibility.IExtension" /> interface.</typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionManager.LoadType(System.String,System.String)">
      <summary>Searches for and loads satellite types that are defined in DLLs. These DLLs can be located in the GAC, the VS BaseDir, or the VSTSDB\Extensions folder.</summary>
      <returns>A <see cref="T:System.Type" /> matching the <paramref name="typeName" />.</returns>
      <param name="assemblyName">A <see cref="T:System.String" /> that contains the name of the assembly where the types are possibly located.</param>
      <param name="typeName">A <see cref="T:System.String" /> that contains the name of the type being searched.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.ExtensionManager.TryGetSingleExtension``1(Microsoft.Data.Schema.Extensibility.ExtensionHandle{``0}@)">
      <summary>Tries to acquire a single extension the provided Generic type.</summary>
      <returns>true if a single extension is found; otherwise, null.</returns>
      <param name="extensionHandle">If a single extension is found, an <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle`1" /> object that implements the <paramref name="TInterfaceType" /> interface; otherwise, null.</param>
      <typeparam name="TInterfaceType">An interface that derives from the <see cref="T:Microsoft.Data.Schema.Extensibility.IExtension" /> interface.</typeparam>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.ExtensionManager.UseVisualStudioInstalledExtensionPaths">
      <summary>Gets or sets whether to load extension.xml files and extension assemblies from the Visual Studio extensions path(s) in addition to any paths specified through AddExtensionLoadPath(). </summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Extensibility.IConnectionStringParser">
      <summary>Provides an interface for a connection string parser.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.IConnectionStringParser.MakeSafeToPersist(System.String)">
      <summary>Returns a connection string that is safe to persist in documents.</summary>
      <returns>The connection string with any security fields removed.</returns>
      <param name="connectionString">The full connection string.</param>
      <exception cref="T:Microsoft.Data.Schema.Extensibility.InvalidConnectionStringException">The connection string cannot be parsed.</exception>
    </member>
    <member name="T:Microsoft.Data.Schema.Extensibility.IExtension">
      <summary>Implemented by all extensions that are loaded by an Extension Manager.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Extensibility.IExtensionInformation">
      <summary>Base interface for all extensions that need a reference back to their ExtensionHandle.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.IExtensionInformation.ExtensionHandle">
      <summary>Gets the extension handle.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.IExtensionInformation.SetExtensionHandle(Microsoft.Data.Schema.Extensibility.ExtensionHandle)">
      <summary>Sets the extension handle.</summary>
      <param name="handle">The extension handle</param>
    </member>
    <member name="T:Microsoft.Data.Schema.Extensibility.IExtensionProxy`1">
      <summary>Represents the generic interface for extension proxies.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.IExtensionProxy`1.SetExtension(`0)">
      <summary>Sets the extension.</summary>
      <param name="extension">The extension</param>
    </member>
    <member name="T:Microsoft.Data.Schema.Extensibility.InvalidConnectionStringException">
      <summary>Represents an exception that was thrown because of a connection string that is not valid.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.InvalidConnectionStringException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Extensibility.InvalidConnectionStringException" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.InvalidConnectionStringException.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Extensibility.InvalidConnectionStringException" /> class. </summary>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.InvalidConnectionStringException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Extensibility.InvalidConnectionStringException" /> class from serialized data. </summary>
      <param name="info">The serialized XML data that represents the exception.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> for reconstituting the exception.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.InvalidConnectionStringException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Extensibility.InvalidConnectionStringException" /> class. </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.InvalidConnectionStringException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Extensibility.InvalidConnectionStringException" /> class. </summary>
      <param name="message">The error message.</param>
      <param name="innerException">The inner exception that caused this exception.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.Extensibility.PreviousDatabaseSchemaProviderNameAttribute">
      <summary>Provides the name of the <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" /> for a previous version of the extension, which makes it possible to find the renamed provider by using the old name.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Extensibility.PreviousDatabaseSchemaProviderNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Extensibility.PreviousDatabaseSchemaProviderNameAttribute" /> class.</summary>
      <param name="previousName">The type name of the previous <see cref="T:Microsoft.Data.Schema.DatabaseSchemaProvider" />.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Extensibility.PreviousDatabaseSchemaProviderNameAttribute.PreviousName">
      <returns>The type name of the previous database schema provider.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentAnalyzer">
      <summary>In a derived class, analyzes each transaction record and provides a list of target operations.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentAnalyzer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentAnalyzer" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentAnalyzer.Analyze(Microsoft.Data.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Schema.Refactoring.RefactoringRecord)">
      <summary>Returns a list of target operations by analyzing the provided transaction record according to the provided source data model and target model.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.Build.TargetModelOperation" />.</returns>
      <param name="sourceModel">A <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> that represents the source model.</param>
      <param name="targetModel">A <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> that represents the target model.</param>
      <param name="record">A <see cref="T:Microsoft.Data.Schema.Refactoring.RefactoringTransactionRecord" /> object to analyze.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentAnalyzer.DatabaseSchemaProvider">
      <summary>Gets the associated database schema provider.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.Extensibility.DatabaseSchemaProvider" /> object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentAnalyzer.ExtensionHandle">
      <summary>Gets the extension handle, which contains the extension type and the named configuration for this extension type.</summary>
      <returns>An <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle" /> object.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentAnalyzer.MergeTransactionRecords(Microsoft.Data.Schema.SchemaModel.DataSchemaModel,System.Collections.Generic.IList{Microsoft.Data.Schema.Refactoring.RefactoringRecord})">
      <summary>Returns a list of merged transaction records for which this analyzer is registered.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.Refactoring.RefactoringTransactionRecord" /> that contains the merged records.</returns>
      <param name="sourceModel">A <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> that represents the source model.</param>
      <param name="records">An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.Refactoring.RefactoringTransactionRecord" />.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentAnalyzer.SetExtensionHandle(Microsoft.Data.Schema.Extensibility.ExtensionHandle)">
      <summary>Sets the extension handle for this analyzer extension.</summary>
      <param name="handle">An <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle" /> object.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentAnalyzer.SupportedOperationName">
      <summary>Gets the name of the supported operation.</summary>
      <returns>A string that contains the name of the supported operation.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentContributor">
      <summary>Provides a base class that preserves the intent of a refactoring change at deployment time by providing deployment steps that correspond to actions in the refactor log file. This class must be inherited.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentContributor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentContributor" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentContributor.FilterDeployedTransactionRecords(Microsoft.Data.Schema.Build.DeploymentContributorContext,System.Collections.Generic.IList{Microsoft.Data.Schema.Refactoring.RefactoringRecord})">
      <summary>Returns a list of transaction records that are selected by filtering the provided transactions based on the provided context.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> object of type <see cref="T:Microsoft.Data.Schema.Refactoring.RefactoringTransactionRecord" />.</returns>
      <param name="context">A <see cref="T:Microsoft.Data.Schema.Build.DeploymentContributorContext" /> object.</param>
      <param name="records">An <see cref="T:System.Collections.Generic.IList`1" /> object of type <see cref="T:Microsoft.Data.Schema.Refactoring.RefactoringTransactionRecord" />.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentContributor.MergeTransactionRecords(Microsoft.Data.Schema.SchemaModel.DataSchemaModel,System.Collections.Generic.IList{Microsoft.Data.Schema.Refactoring.RefactoringRecord})">
      <summary>Merges the provided records into the current list.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> object of type <see cref="T:Microsoft.Data.Schema.Refactoring.RefactoringTransactionRecord" /> that contains the merged records.</returns>
      <param name="sourceModel">A <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> that represents the source data model.</param>
      <param name="records">An <see cref="T:System.Collections.Generic.IList`1" /> object of type <see cref="T:Microsoft.Data.Schema.Refactoring.RefactoringTransactionRecord" /> that contains the records to be merged.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentContributor.OnApplyDeploymentConfiguration(Microsoft.Data.Schema.Build.DeploymentContributorContext,System.Collections.Generic.ICollection{Microsoft.Data.Schema.Build.DeploymentContributorConfigurationFile})">
      <summary>Called when the deployment configuration has been applied to the contributor.</summary>
      <param name="context">A <see cref="T:Microsoft.Data.Schema.Build.DeploymentContributorContext" /> object.</param>
      <param name="configurationFiles">An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.Build.ContributorConfigurationFile" />.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentContributor.OnEstablishDeploymentConfiguration(Microsoft.Data.Schema.Build.DeploymentContributorConfigurationSetup)">
      <summary>Called during the build process to output a configuration file that is created when existing configuration files that have refactoring extensions are merged.</summary>
      <param name="setup">A <see cref="T:Microsoft.Data.Schema.Build.DeploymentContributorConfigurationSetup" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentContributor.ProposeTargetOperations(Microsoft.Data.Schema.Build.DeploymentContributorContext)">
      <summary>Returns this object after the method resets the enumeration by using the provided context.</summary>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentContributor.ProvideDeploymentModifier(Microsoft.Data.Schema.Build.DeploymentContributorContext)">
      <summary>Returns a deployment modifier that is based on the provided context. </summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.Build.DeploymentModifier" /> object.</returns>
      <param name="context"></param>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentContributor.ProvideDeploymentStep(Microsoft.Data.Schema.Build.DeploymentContributorContext)">
      <summary>When overridden in a derived class, returns a deployment step that is based on the provided context.</summary>
      <returns>The base method returns null.</returns>
      <param name="context">A <see cref="T:Microsoft.Data.Schema.Build.DeploymentContributorContext" /> object.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentModifier">
      <summary>Represents a contributor that can modify a refactoring deployment plan by inserting a deployment step before the post-deployment scripts. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentModifier.#ctor(Microsoft.Data.Schema.Build.DeploymentStep)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Refactoring.RefactoringDeploymentModifier" /> class by using the provided deployment step. </summary>
      <param name="refactorStep">A <see cref="T:Microsoft.Data.Schema.Build.DeploymentStep" /> object.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.Refactoring.RefactoringLog">
      <summary>This class represents a refactoring log file. It is a base class for database schema providers that want to provide programmatic access to their refactoring log files. Refactoring log files are used by deployment to preserve the design-time intent of a user during deployment. For instance, this log might contain information to inform deployment to rename a table (if that action is supported) rather than to script the change as drop and create actions.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringLog.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Refactoring.RefactoringLog" /> class.</summary>
      <param name="logPath">The path of the refactoring log file.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringLog.AppendOperation(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Appends the specified operation to the refactoring log.</summary>
      <param name="operationName">The name of the refactoring operation.</param>
      <param name="operationProperties">The properties of the operation.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringLog.Save">
      <summary>Writes the refactoring log to the path that was specified when the instance was created. </summary>
    </member>
    <member name="T:Microsoft.Data.Schema.Refactoring.RefactoringRecord">
      <summary>Represents a transaction record in refactoring. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringRecord.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.Refactoring.RefactoringRecord" /> class. </summary>
      <param name="operationName">The name of the refactoring operation.</param>
      <param name="changeDateTime">A string that contains the date and time of the transaction.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringRecord.AddOperationKey(System.Collections.Generic.IList{System.String})">
      <summary>Adds the given list of operation keys to the transaction record.</summary>
      <param name="operationKeys">An <see cref="T:System.Collections.Generic.IList`1" /> of operation key strings.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringRecord.AddOperationKey(System.String)">
      <summary>Adds the given operation key to the transaction record.</summary>
      <param name="operationKey">A string that represents an operation key.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringRecord.AddProperty(System.String,System.String)">
      <summary>Adds a property and value to the transaction record.</summary>
      <param name="propertyName">The name of the property.</param>
      <param name="value">The value of the property as a string.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Refactoring.RefactoringRecord.ChangeDateTime">
      <summary>Gets the date and time of the transaction. The set procedure is private.</summary>
      <returns>The date and time of the transaction.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.Refactoring.RefactoringRecord.GetProperty(System.String)">
      <summary>Returns the value of the property that is identified by the provided property name.</summary>
      <returns>The value of the property.</returns>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.Refactoring.RefactoringRecord.OperationKeys">
      <summary>Gets a list of refactoring operation keys.</summary>
      <returns>The list of keys.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Refactoring.RefactoringRecord.OperationName">
      <summary>Gets the operation name. The set procedure is private.</summary>
      <returns>The operation name.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.Refactoring.RefactoringRecord.Properties">
      <summary>Gets a list of property names and values.</summary>
      <returns>The list of properties.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.CustomSchemaData">
      <summary>Holds an arbitrary categorized data collection that can be attached to DataSchemaModel.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.CustomSchemaData.#ctor(Microsoft.Data.Schema.SchemaModel.CustomSchemaData)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.CustomSchemaData" /> class, using an existing instance.</summary>
      <param name="data">An instance of CustomSchemaData</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.CustomSchemaData.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.CustomSchemaData" /> class.</summary>
      <param name="category">The category of this data</param>
      <param name="dataType">The type of this data</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.CustomSchemaData.Category">
      <summary>Gets the category of this data.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.CustomSchemaData.DataType">
      <summary>Gets the data type.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.CustomSchemaData.GetMetadata(System.String)">
      <summary>Returns the value associated with a metadata name.</summary>
      <returns>May return null.</returns>
      <param name="metadataName">The metadata name</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.CustomSchemaData.MatchesTypeAndCategory(System.String,System.String)">
      <summary>Returns whether the specified category and type match this.</summary>
      <param name="category">The category to compare</param>
      <param name="type">The data type to compare</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.CustomSchemaData.MetadataNames">
      <summary>Gets a collection of metadata names.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.CustomSchemaData.RemoveMetadata(System.String)">
      <summary>Removes a corresponding metadata value from a collection.</summary>
      <param name="metadataName">The name for the value to remove</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.CustomSchemaData.SetMetadata(System.String,System.String)">
      <summary>Adds or re-sets a named metadata value to a collection.</summary>
      <param name="metadataName">The name to add</param>
      <param name="metadataValue">The value to add</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel">
      <summary>The <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> is a specialization of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelStore" />. All database schema providers must implement a class that inherits this base class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.#ctor(Microsoft.Data.Schema.SchemaModel.ModelCollation,Microsoft.Data.Schema.SchemaModel.ModelSchema,System.String,Microsoft.Data.Schema.SchemaModel.ScriptCache,Microsoft.Data.Schema.ErrorManager)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> class. </summary>
      <param name="collation">The <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelCollation" /> of the data schema model.</param>
      <param name="storeSchema">The <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelSchema" /> of the data schema model.</param>
      <param name="modelFileName">The file name of the data schema model.</param>
      <param name="scriptCache">The <see cref="T:Microsoft.Data.Schema.SchemaModel.ScriptCache" /> of the data schema model.</param>
      <param name="errorManager">The <see cref="T:Microsoft.Data.Schema.ErrorManager" /> used to report errors that occur in the data schema model.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> class. </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the data schema model.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.AddCustomData(Microsoft.Data.Schema.SchemaModel.CustomSchemaData)">
      <summary>Adds custom data to the model.</summary>
      <param name="customData">A <see cref="T:Microsoft.Data.Schema.SchemaModel.CustomSchemaData" /> object that represents the data to add.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.AnnotationsIncludedInSerialization">
      <summary>Gets a list of the types of annotations that will be included when the model is serialized. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.BeginBatchUpdate">
      <summary>Begins batch update.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.Controller">
      <summary>Gets the model controller.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelController" /> object that provides access to the schema model.</returns>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.CustomSchemaDataFileName">
      <summary>Value is "FileName".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.CustomSchemaDataLogicalName">
      <summary>Value is "LogicalName".</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.DatabaseSchemaProvider">
      <summary>Gets the database schema provider.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.Extensibility.DatabaseSchemaProvider" /> object.</returns>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.DatabaseSchemaReferenceExternalParts">
      <summary>Value is "ExternalParts".</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.DatabaseSchemaType">
      <summary>Value is "DbSchema".</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.Deserialize(System.IO.TextReader,Microsoft.Data.Schema.ErrorManager,System.String)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.Deserialize(System.IO.TextReader,Microsoft.Data.Schema.ErrorManager,System.String,System.Action`3)">
      <summary>Reads a <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> from the specified <see cref="T:System.IO.TextReader" /> .</summary>
      <param name="input">The <see cref="T:System.IO.TextReader" /> that contains the model that is read.</param>
      <param name="errors">An <see cref="T:Microsoft.Data.Schema.ErrorManager" /> to handle any errors that occur while the model is read.</param>
      <param name="fileName">The name of the model file.</param>
      <param name="constructorParametersSetter"></param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.Deserialize(System.String,Microsoft.Data.Schema.ErrorManager)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.Deserialize(System.String,Microsoft.Data.Schema.ErrorManager,System.Action`3)">
      <summary>Reads a DataSchemaModel from the specified file.</summary>
      <param name="fileName">The file that contains the serialized model.</param>
      <param name="errors">An <see cref="T:Microsoft.Data.Schema.ErrorManager" /> to handle any errors that occur while the model is read.</param>
      <param name="constructorParametersSetter"></param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.Dispose(System.Boolean)">
      <param name="disposing"></param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.ElementProcessingOperationsCount">
      <summary>Gets the number of element-processing operations that remain before the model is ready. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.EndBatchUpdate">
      <summary>Ends the batch update.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.ErrorManager">
      <summary>Gets the error manager to report errors.</summary>
      <returns>An <see cref="T:Microsoft.Data.Schema.ErrorManager" /> object.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.FixupAfterXmlDeserialization"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.GetCustomData">
      <summary>Gets a list of custom data.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.SchemaModel.CustomSchemaData" />.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.GetCustomData(System.String)">
      <summary>Gets a list of custom data by using the provided category.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.SchemaModel.CustomSchemaData" />.</returns>
      <param name="category">The category to use when you select the items in the list.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.GetCustomData(System.String,System.String)">
      <summary>Gets a list of custom data by using the provided category and type name.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.SchemaModel.CustomSchemaData" />.</returns>
      <param name="category">A string that contains the category.</param>
      <param name="type">A string that contains the type name.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.GetElementsFromExternalSource(System.String)">
      <summary>Gets the elements from an external source.</summary>
      <param name="fileName">The file from which you want to retrieve elements.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.GetElementSources(Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Gets the element sources for a particular element.</summary>
      <returns>You must override this in a database schema provider implementation. </returns>
      <param name="element">The <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> whose sources you want to retrieve. </param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.GetExternalSourceFileName(Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Gets the external source file name for the specified model element.</summary>
      <param name="element"></param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.GetExternalSourceLogicalName(Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Gets the logical name for the external source of the specified model element.</summary>
      <param name="element">The <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> for which you want to get the logical name.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Returns a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains all the data that are needed to serialize the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> object.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the serialized object data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.GetRelationshipEntrySources(Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry)">
      <summary>Gets a list of relationship entry sources.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
      <param name="relationshipEntry">An <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.InitializeReferenceConstructor(Microsoft.Data.Schema.SchemaModel.DataSchemaModelHeader,Microsoft.Data.Schema.SchemaModel.DataSchemaModelConstructor)">
      <summary>Initializes a reference constructor by using the provided header data and model constructor.</summary>
      <param name="headerData">A <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelHeader" /> object that contains the model header data.</param>
      <param name="constructor">A <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelConstructor" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.IsElementFromCompositeReference(Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Indicates whether the element is from another schema model that was added to the current model.</summary>
      <param name="element">The <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> to be checked.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.IsElementFromExternalReference(Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Indicates whether the specified element is from an external reference.</summary>
      <param name="element">The <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> to be checked.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.IsElementFromExternalReference(Microsoft.Data.Schema.SchemaModel.IModelElement,System.String)">
      <summary>Indicates whether the specified element is from an external reference.</summary>
      <param name="element">The IModelElement to be checked.</param>
      <param name="fileName"></param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.LoadExternals(System.IO.TextReader,System.String,System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
      <summary>Loads model elements from an external sources, such as a persisted model.</summary>
      <param name="input">The TextReader from which the model is read.</param>
      <param name="fileName">The name of the file from which the model is read.</param>
      <param name="logicalSourceName">The logical source name of the model.</param>
      <param name="externalPartsSubstitution">The object-scoping names that will be prepended to the object name for 3-part and 4-part names, such as [Database].[Schema].[Table].</param>
      <param name="suppressErrorsForMissingDependencies">Indicates whether errors from missing dependencies should be ignored or should cause processing to stop.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.OnCustomDataAdded(Microsoft.Data.Schema.SchemaModel.CustomSchemaData)">
      <summary>Called when custom data is added.</summary>
      <param name="customData">A <see cref="T:Microsoft.Data.Schema.SchemaModel.CustomSchemaData" /> object that contains the custom data.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.OnCustomDataRemoved(Microsoft.Data.Schema.SchemaModel.CustomSchemaData)">
      <summary>Called when custom data is removed.</summary>
      <param name="customData">A <see cref="T:Microsoft.Data.Schema.SchemaModel.CustomSchemaData" /> object that contains the custom data.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.OnModelElementChanged(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.ModelEventType)">
      <summary>Called when a model element changes.</summary>
      <param name="element">The <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> that has changed.</param>
      <param name="type">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelEventType" /> that indicates the type of event.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.ReadDataSchemaModelHeader(System.IO.TextReader)">
      <summary>Override this method in a database schema provider implementation to read the data schema model header.</summary>
      <param name="input">The <see cref="T:System.IO.TextReader" /> from which to read.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.ReadDataSchemaModelHeader(System.IO.TextReader,System.Boolean)">
      <summary>Override this method in a database schema provider implementation to read the data schema model header.</summary>
      <param name="input">The <see cref="T:System.IO.TextReader" /> from which to read.</param>
      <param name="readCustomData">Indicates whether custom data should be read.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.ReadDataSchemaModelHeader(System.String)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.ReadDataSchemaModelHeader(System.String,System.Boolean)">
      <summary>Override this method in a database schema provider implementation to read the data schema model header.</summary>
      <param name="fileName">The file from which to read.</param>
      <param name="readCustomData">Indicates whether custom data should be read.</param>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.ReferenceCategory">
      <summary>Value is "Reference".</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.RegisterForController">
      <summary>Registers for a model controller.</summary>
      <returns>The registered <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelController" />.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.RemoveCustomData(Microsoft.Data.Schema.SchemaModel.CustomSchemaData)">
      <summary>Removes custom data.</summary>
      <param name="customData">A <see cref="T:Microsoft.Data.Schema.SchemaModel.CustomSchemaData" /> object that represents the data to remove.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.Resolve">
      <summary>Resolves all elements in the model.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.Resolve(System.Int32)">
      <summary>Resolves the specified number of elements.</summary>
      <param name="elementCount">The number of elements to resolve.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.ScriptCache">
      <summary>Gets the script cache to cache scripts.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.SchemaModel.ScriptCache" /> object.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.Serialize(System.IO.TextWriter)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.Serialize(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Type})"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.Serialize(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
      <summary>Writes the data schema model to the specified output.</summary>
      <param name="output">The <see cref="T:System.IO.TextWriter" /> to which the model should be serialized.</param>
      <param name="annotationTypesToInclude">A list of the types of annotations that should be included when the model is serialized.</param>
      <param name="includePositions">Indicates whether positions should be serialized with the model.</param>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.SuppressMissingDependenciesErrors">
      <summary>Value is "SuppressMissingDependenciesErrors".</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.UnloadExternals(System.String)">
      <summary>Unloads external elements from the specified file.</summary>
      <param name="fileName">The file whose external elements will be unloaded.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.ValidateWriteAccess">
      <summary>Validates write access.</summary>
      <exception cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelControllerException">The <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelController" /> cannot be written to. </exception>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.ValidReferenceTranslator(Microsoft.Data.Schema.DatabaseSchemaProvider,Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslator)">
      <summary>Returns a value that indicates whether a reference translator can be used translate from another database schema provider to the current one.</summary>
      <returns>true if a reference translator can be used to translate from another database schema provider to the current one; otherwise, false. </returns>
      <param name="fromDataSchemaProvider">The <see cref="T:Microsoft.Data.Schema.Extensibility.DatabaseSchemaProvider" /> object.</param>
      <param name="referenceTranslator">The <see cref="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslator" />.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.ScriptSourcedModelElement">
      <summary>Provides a base class for all model elements that have a script source.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.ScriptSourcedModelElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.ScriptSourcedModelElement" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.ScriptSourcedModelElement.GetRelationshipEntrySources(Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry)">
      <summary>Returns a list of relationship entry sources for a relationship entry.</summary>
      <param name="relationshipEntry">An <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" /> object.</param>
      <exception cref="T:System.ArgumentException">This element differs from the <see cref="P:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry.FromElement" /> in the relationship. </exception>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.ScriptSourcedModelElement.PrimarySource">
      <summary>Gets the location of the primary source that defines this element.</summary>
      <returns>The primary source location.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.ScriptSourcedModelElement.SecondarySources">
      <summary>Gets a list of secondary sources that define this element.</summary>
      <returns>A list of secondary sources.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.ScriptSourcedModelElement.ToString">
      <summary>Returns the element name.</summary>
      <returns>The element name.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModel.ScriptSourcedModelElement.ToString(System.String,System.IFormatProvider)">
      <summary>Returns the element name by using the provided format and format provider.</summary>
      <returns>The formatted element name.</returns>
      <param name="format"></param>
      <param name="formatProvider"></param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelConstructor">
      <summary>Provides options that change schema manager behavior.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModelConstructor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelConstructor" /> class.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.DataSchemaModelConstructor.Collation">
      <summary>Gets or sets the model collation.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelCollation" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.DataSchemaModelConstructor.ErrorManager">
      <summary>Gets or sets the error manager.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.Common.ErrorManager" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.DataSchemaModelConstructor.ModelFileName">
      <summary>Gets or sets the model file name.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.DataSchemaModelConstructor.ScriptCache">
      <summary>Gets or sets the script cache.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.ScriptCache" />.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelController">
      <summary>Enables write access to the schema manager.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModelController.AcquireWriteAccess">
      <summary>Acquires write access.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModelController.ReleaseWriteAccess">
      <summary>Releases write access.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelControllerException">
      <summary>Represents the thrown exception when a schema manager controller-related failure happens.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModelControllerException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelControllerException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModelControllerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelControllerException" /> class.</summary>
      <param name="info">The serialization information</param>
      <param name="context">The streaming context</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModelControllerException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelControllerException" /> class.</summary>
      <param name="message">The error message</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModelControllerException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelControllerException" /> class.</summary>
      <param name="message">The error message</param>
      <param name="innerException">The nested exception</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelEventArgs">
      <summary>Provides event arguments for events in that are raised when the  <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" />, or an element of it, changes.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModelEventArgs.#ctor(Microsoft.Data.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.ModelEventType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelEventArgs" /> class using the provided model, element, and event type. </summary>
      <param name="model">The <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> object that has changed.</param>
      <param name="element">The <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> where the change occurred.</param>
      <param name="type">The <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelEventType" /> representing the type of change.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModelEventArgs.#ctor(Microsoft.Data.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Schema.SchemaModel.ModelEventType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelEventArgs" /> class using the provided model and event type. </summary>
      <param name="model">The <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> object that has changed.</param>
      <param name="type">The <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelEventType" /> representing the type of change.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModelEventArgs.#ctor(Microsoft.Data.Schema.SchemaModel.DataSchemaModel,System.Collections.Generic.IList{System.Tuple`2})"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.DataSchemaModelEventArgs.ElementProcessingOperationsCount">
      <summary>Gets the number of operations that have occurred while processing model elements.</summary>
      <returns>The number of operations performed on model elements.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.DataSchemaModelEventArgs.Model">
      <summary>Gets or sets the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> associated with this event argument object.</summary>
      <returns>The data schema model.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelException">
      <summary>Represents the data schema model exception.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModelException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelException" /> class.</summary>
      <param name="info">The serialization information</param>
      <param name="context">The streaming context</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModelException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelException" /> class.</summary>
      <param name="message">The error message</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModelException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelException" /> class.</summary>
      <param name="message">The error message</param>
      <param name="innerException">The nested exception</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelHeader">
      <summary>Represents all header, or non-model, information that would be included with a serialized data schema model.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.DataSchemaModelHeader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelHeader" /> class. </summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.DataSchemaModelHeader.Collation">
      <summary>Gets or sets the collation used by the header.</summary>
      <returns>The model collation for the header.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.DataSchemaModelHeader.CustomData">
      <summary>Gets a list of custom data items for the header.</summary>
      <returns>The list of the custom data items for the header.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.DataSchemaModelHeader.DatabaseSchemaProviderName">
      <summary>Gets the name of the data schema provider.</summary>
      <returns>The data schema provider name.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.DataSchemaModelHeader.SchemaVersion">
      <summary>Gets or sets the schema version for the header.</summary>
      <returns>The schema version.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.FileScriptCache">
      <summary>Provides file operations for script files. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.FileScriptCache.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.FileScriptCache" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.FileScriptCache.AddOrUpdate(Microsoft.Data.Schema.SchemaModel.CustomSchemaData)">
      <summary>Adds or updates cached custom schema data.</summary>
      <param name="customSchemaData">A <see cref="T:Microsoft.Data.Schema.SchemaModel.CustomSchemaData" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.FileScriptCache.AddOrUpdateFile(System.Collections.Generic.IList{System.String},Microsoft.Build.Framework.ITaskItem)">
      <summary>Adds or updates a file to the data model.</summary>
      <param name="externalNameParts">A list of the parts of the name of the file content. For example, an element name such as "dbo.MyTable" would return a list that contains "dbo" and "MyTable".</param>
      <param name="taskItem">An <see cref="T:Microsoft.Build.Framework.ITaskItem" /> object that specifies the task to accomplish.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.FileScriptCache.AllCacheIdentifiers">
      <summary>Gets a collection of current cache identifiers.</summary>
      <returns>The list of cache identifiers.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.FileScriptCache.BatchLoadOrUpdate(System.Collections.Generic.IList{Microsoft.Build.Framework.ITaskItem})">
      <summary>Returns a list of tasks that represent the files that will be loaded or updated.</summary>
      <param name="taskItems">A list of task items.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.FileScriptCache.ContainsCacheIdentifier(System.String)">
      <summary>Determines whether the provided string contains a cache identifier.</summary>
      <returns>true if the provided string contains a cache identifier; false if it does not.</returns>
      <param name="cacheIdentifier">A string that may contain a cache identifier.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.FileScriptCache.ConvertCacheIdentifierToFileName(System.String)">
      <summary>Converts the provided cache identifier to a file name.</summary>
      <returns>A file name.</returns>
      <param name="cacheIdentifier">A string that contains a cache identifier.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.FileScriptCache.DeleteFile(System.String)">
      <summary>Deletes the file that is represented by the provided file name.</summary>
      <param name="fileName">A file name.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.FileScriptCache.GenerateUniqueCacheIdentifier">
      <summary>Returns a unique cache identifier.</summary>
      <returns>A cache identifier.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.FileScriptCache.GetAllCustomSchemaDataFileNames">
      <summary>Returns a collection of file names that represent the custom data files in the cache.</summary>
      <returns>A collection of file names.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.FileScriptCache.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Instantiates the object from XML by using the provided data and context.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that represents the XML data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" />.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.FileScriptCache.GetScript(System.String)">
      <summary>Retrieves a script from a file by using the specified cache identifier.</summary>
      <returns>The script contents of the file.</returns>
      <param name="cacheIdentifier">A string that contains a cache identifier.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.FileScriptCache.GetScript(System.String,System.Int32,System.Int32)">
      <summary>Retrieves a specified script from a file by using the given cache identifier, file offset, and length.</summary>
      <returns>The desired script text.</returns>
      <param name="cacheIdentifier">A string that contains a cache identifier.</param>
      <param name="startOffset">An int that indicates the starting point for the desired script in the file.</param>
      <param name="length">An int that indicates the length of the desired script.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.FileScriptCache.Initialize(Microsoft.Data.Schema.SchemaModel.ModelBuilder)">
      <summary>Initializes the <see cref="T:Microsoft.Data.Schema.SchemaModel.FileScriptCache" /> by using the provided <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelBuilder" />.</summary>
      <param name="modelBuilder">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelBuilder" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.FileScriptCache.IsScriptUnchanged(System.String)">
      <summary>Returns a value that indicates whether the script file is unchanged.</summary>
      <returns>true if the file has changed; otherwise, false.</returns>
      <param name="fileName">The name of the file to check.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.FileScriptCache.IsTaskItemUnchanged(System.Collections.Generic.IList{System.String},Microsoft.Build.Framework.ITaskItem)">
      <returns>true if the task item has changed; otherwise, false.</returns>
      <param name="externalNameParts">A list of the name parts. For example, the name "dbo.MyTable" would be a list that contains "dbo" and "MyTable".</param>
      <param name="taskItem">An <see cref="T:Microsoft.Build.Framework.ITaskItem" /> that indicates the task to perform on the element that is identified by the <paramref name="externalNameParts" />.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.FileScriptCache.ModelBuilder">
      <summary>Gets the model builder.</summary>
      <returns>The model builder.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.FileScriptCache.OptimizeForInsert">
      <summary>Tells the associated <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelBuilder" /> to optimize the script for insert instead of lookup.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.FileScriptCache.OptimizeForQuery">
      <summary>Tells the associated <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelBuilder" /> to optimize the script for lookup instead of insert.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotation">
      <summary>Represents the model annotations that store feature-specific information about store elements.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelAnnotation.AnnotationClass">
      <summary>Gets the metadata class for the annotation.</summary>
      <returns>An <see cref="T:Microsoft.Data.Schema.SchemaModel.AnnotationClass" /> object.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelAnnotation.Delete">
      <summary>Deletes this instance from the model.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelAnnotation.GetElements">
      <summary>Returns a list of the elements to which this annotation is attached.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /></returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelAnnotation.GetRelationshipEntries">
      <summary>Returns a list of the relationship entries to which this annotation is attached.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelAnnotation.IsAttachedToStore">
      <summary>Gets whether this annotation is attached to the model store.</summary>
      <returns>true if this annotation is attached to the model store; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelAnnotation.IsDeleted">
      <summary>Returns whether the object is deleted.</summary>
      <returns>true if the object is deleted; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelAnnotation.Name">
      <summary>Gets or sets the name of this annotation.</summary>
      <returns>An <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelStore.Identifier" /> object.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotationHolder">
      <summary>Represents a class that can have attached annotations.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelAnnotationHolder.AddAnnotation(Microsoft.Data.Schema.SchemaModel.IModelAnnotation)">
      <summary>Adds the given annotation to this element.</summary>
      <param name="annotation">The model annotation to add.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelAnnotationHolder.GetAnnotations">
      <summary>Returns a list of annotations attached to this element.</summary>
      <returns>A list containing model annotations.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelAnnotationHolder.GetAnnotations``1">
      <summary>Returns all attached model annotations that implement the given annotation type and have the specified model identifier.</summary>
      <returns>A list containing the selected model annotations.</returns>
      <typeparam name="TType">A <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotation" /> type.</typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelAnnotationHolder.GetAnnotations``1(Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <typeparam name="TType"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelAnnotationHolder.GetAnnotations(Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Returns a list of attached annotations that have the given identifier.</summary>
      <returns>A list containing the selected model annotations.</returns>
      <param name="identifier">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> that specifies the identifier.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelAnnotationHolder.GetAnnotations(Microsoft.Data.Schema.SchemaModel.ModelIdentifier,System.Type)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelAnnotationHolder.GetAnnotations(System.Type)">
      <summary>Returns a list of attached annotations of the given type.</summary>
      <returns>A list containing the selected model annotations.</returns>
      <param name="annotationType">Specifies the <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotation" /> type.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelAnnotationHolder.RemoveAnnotation(Microsoft.Data.Schema.SchemaModel.IModelAnnotation)">
      <summary>Removes the specified annotation from this model element.</summary>
      <param name="annotation">The annotation to remove.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotationRegister">
      <summary>Provides an interface that, when added to the inheritance of a class, requires a method to register model annotations.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelAnnotationRegister.RegisterModelAnnotations(Microsoft.Data.Schema.SchemaModel.ModelSchema)">
      <summary>When implemented in a derived class, adds the annotations that are needed by the derived class to the provided model schema.</summary>
      <param name="storeSchema">The <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelSchema" /> to which the annotations are to be added.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.IModelElement">
      <summary>Provides a basis for each element in a schema model.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelElement.Delete">
      <summary>Deletes this instance from the model.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelElement.ElementClass">
      <summary>Gets the metadata class for an element.</summary>
      <returns>An <see cref="T:Microsoft.Data.Schema.SchemaModel.ElementClass" /> metadata object.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelElement.GetComposingChildren">
      <summary>Returns a list of composing children for this element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" />.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelElement.GetHierarchicalChildren">
      <summary>Returns a list of hierarchical children for this element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" />.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelElement.GetOwnerInfo">
      <summary>Returns information about the element owner.</summary>
      <returns>An <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelStore.ElementOwnerInfo" /> object.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelElement.GetReferencedDanglingRelationshipEntries"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelElement.GetReferencedElements"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelElement.GetReferencedRelationshipEntries"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelElement.GetReferencingElements"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelElement.GetReferencingRelationshipEntries"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelElement.GetRelationship``2(Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass)">
      <typeparam name="TFrom"></typeparam>
      <typeparam name="TTo"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelElement.GetRelationship(Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelElement.GetRelationships">
      <summary>Returns a list of the relationships in this element.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelElement.IsDeleted">
      <summary>Specifies whether the object is deleted.</summary>
      <returns>true if the object has been deleted; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelElement.IsExternal">
      <summary>Returns a value indicating whether the object was loaded from an external source and is not a part of the schema model.</summary>
      <returns>true if the object is external; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelElement.Name">
      <summary>Gets or sets the name of the element.</summary>
      <returns>An <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelElement.ResolutionStatus">
      <summary>Gets or sets the value of the model element resolution status.</summary>
      <returns>A member of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElementResolutionStatus" /> enumeration.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelElement.SourceCodePositions"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelElement.ValidationStatus">
      <summary>Gets or sets the value of the model element validation status.</summary>
      <returns>A member of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElementValidationStatus" /> enumeration.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.IModelEntity">
      <summary>Represents an entity linked to a ModelStore.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelEntity.Model">
      <summary>Gets the model reference.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelStore" />.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.IModelMultiRelationship">
      <summary>Used to add multiple relationships.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelMultiRelationship.AddElement(Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Adds a relationship entry (based on an element) to the end of the relationship.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
      <param name="element">The element to add</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelMultiRelationship.AddRelationshipEntry">
      <summary>Adds an empty relationship entry to the end of the relationship.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelMultiRelationship.GetRelationshipEntry(System.Int32)">
      <summary>Returns a relationship entry at the specified index.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
      <param name="atIndex">Specifies the index</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelMultiRelationship.IndexOf(Microsoft.Data.Schema.SchemaModel.IModelElement,System.Int32)">
      <summary>Reports the index of the first occurrence of the relationship entry based on a specified element.</summary>
      <param name="element">Specifies the element to be searched</param>
      <param name="startIndex">Specifies the starting index</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelMultiRelationship.InsertElement(System.Int32,Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Inserts a relationship entry (based on an element) at the specified index.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
      <param name="atIndex">Specifies the insertion index</param>
      <param name="element">Specifies the element to be inserted</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelMultiRelationship.InsertRelationshipEntry(System.Int32)">
      <summary>Inserts an empty relationship entry at the specified index.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
      <param name="atIndex">Specifies the insertion index</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.IModelMultiRelationship`2">
      <summary>Used to add multiple relationships.</summary>
      <typeparam name="TFrom"></typeparam>
      <typeparam name="TTo"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelMultiRelationship`2.AddElement(`1)">
      <summary>Adds a relationship entry (based on an element) to the end of the relationship.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
      <param name="element">The element to be added</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelMultiRelationship`2.AddRelationshipEntry">
      <summary>Adds an empty relationship entry to the end of the relationship.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelMultiRelationship`2.GetRelationshipEntry(System.Int32)">
      <summary>Returns a relationship entry at the specified index.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
      <param name="atIndex">Specifies the index</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelMultiRelationship`2.IndexOf(`1,System.Int32)">
      <summary>Reports the index of the first occurrence of the relationship entry based on a specified element.</summary>
      <param name="element">Specifies the element to be searched</param>
      <param name="startIndex">Specifies the starting index</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelMultiRelationship`2.InsertElement(System.Int32,`1)">
      <summary>Inserts a relationship entry (based on an element) at the specified index.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
      <param name="atIndex">Specifies the insertion index</param>
      <param name="element">Specifies the element to be inserted</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelMultiRelationship`2.InsertRelationshipEntry(System.Int32)">
      <summary>Inserts an empty relationship entry at the specified index.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
      <param name="atIndex">Specifies the insertion index</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.IModelNamed">
      <summary>The elements in the model that are named should derive from this interface.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.IModelPropertyContainer">
      <summary>Represents an entity, which can contain properties.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelPropertyContainer.GetProperty``1(Microsoft.Data.Schema.SchemaModel.ModelPropertyClass)">
      <summary>Gets the specified property.</summary>
      <param name="propertyClass">Specifies the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelPropertyClass" />  of the property</param>
      <typeparam name="TProperty"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelPropertyContainer.SetProperty``1(Microsoft.Data.Schema.SchemaModel.ModelPropertyClass,``0)">
      <summary>Sets the specified property.</summary>
      <param name="propertyClass">Specifies the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelPropertyClass" /> of the property</param>
      <param name="propertyValue">Specifies the value to set</param>
      <typeparam name="TProperty"></typeparam>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.IModelRelationship">
      <summary>Used to get both sides of a relationship.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelRelationship.FromElement">
      <summary>Gets the relating element.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelRelationship.GetReferencedElements">
      <summary>Returns the related elements.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelRelationship.GetReferencedRelationshipEntries">
      <summary>Returns the related relationship entries.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelRelationship.RelationshipClass">
      <summary>Gets the metadata class.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.RelationshipClass" />.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.IModelRelationship`2">
      <summary>Used to get both sides of a relationship.</summary>
      <typeparam name="TFrom"></typeparam>
      <typeparam name="TTo"></typeparam>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelRelationship`2.FromElement">
      <summary>Gets the relating element.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelRelationship`2.GetReferencedElements">
      <summary>Gets a list of the related elements.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry">
      <summary>Represents a reference from one element to another, which might be unresolved.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry.Element">
      <summary>Gets or sets the referenced element.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry.FromElement"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry.Ordinal">
      <summary>Gets the location of this entry in the relationship.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry.RelationshipClass">
      <summary>Gets the relationship class.</summary>
      <returns>Returns the <see cref="T:Microsoft.Data.Schema.SchemaModel.RelationshipClass" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry.SourceCodePositions"></member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.IModelReverseMultiRelationship">
      <summary>Represents the reverse multi-relationship.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.IModelReverseMultiRelationship`2">
      <summary>Represents the reverse multi relationship.</summary>
      <typeparam name="TFrom"></typeparam>
      <typeparam name="TTo"></typeparam>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.IModelReverseSingleRelationship">
      <summary>Represents the reverse single relationship.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelReverseSingleRelationship.Element">
      <summary>Gets the element.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.IModelReverseSingleRelationship`2">
      <summary>Represents the reverse single relationship.</summary>
      <typeparam name="TFrom"></typeparam>
      <typeparam name="TTo"></typeparam>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelReverseSingleRelationship`2.Element">
      <summary>Gets the related element type.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.IModelSingleRelationship">
      <summary>If this interface is used, there can be a single element at the right side.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelSingleRelationship.Clear">
      <summary>Deletes the relationship entry if it existed.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelSingleRelationship.Element">
      <summary>Gets or sets the related element.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelSingleRelationship.GetRelationshipEntry">
      <summary>Returns the related relationship entry.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelSingleRelationship.RecreateRelationshipEntry">
      <summary>Returns a new empty relationship entry, or replaces an existing one.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelSingleRelationship.RecreateRelationshipEntry(Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Returns a new relationship entry pointing to a specified element, or replaces an existing one.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
      <param name="element">Specifies an element</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.IModelSingleRelationship`2">
      <summary>If this interface is used, there can be a single element on the right side.</summary>
      <typeparam name="TFrom"></typeparam>
      <typeparam name="TTo"></typeparam>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IModelSingleRelationship`2.Element">
      <summary>Gets or sets the related element.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IModelSingleRelationship`2.RecreateRelationshipEntry(`1)">
      <summary>Returns a new relationship entry pointing to a specified element, or replaces any existing one.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
      <param name="element">Specifies an element</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.InMemoryScriptCache">
      <summary>Represents a script cache that stores its scripts in memory.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.InMemoryScriptCache.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.InMemoryScriptCache" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.InMemoryScriptCache.AddOrUpdateScript(System.String,System.String)">
      <summary>Adds or updates a script.</summary>
      <param name="cacheIdentifier">The cache identifier</param>
      <param name="script">The script to update</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.InMemoryScriptCache.AddOrUpdateScript(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.InMemoryScriptCache.AllCacheIdentifiers"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.InMemoryScriptCache.ContainsCacheIdentifier(System.String)">
      <summary>Returns whether the given cache identifier is in the script cache.</summary>
      <param name="cacheIdentifier">The cache identifier</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.InMemoryScriptCache.DeleteScript(System.String)">
      <summary>Deletes a script from the cache.</summary>
      <param name="cacheIdentifier">The cache identifier</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.InMemoryScriptCache.GenerateUniqueCacheIdentifier"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.InMemoryScriptCache.GetAllCustomSchemaDataFileNames"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.InMemoryScriptCache.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a SerializationInfo object with the data needed to serialize the InMemoryScriptCache object.</summary>
      <param name="info">The serialization information</param>
      <param name="context">The streaming context</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.InMemoryScriptCache.GetScript(System.String)">
      <summary>Returns the script for the given cache identifier.</summary>
      <param name="cacheIdentifier">The cache identifier</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.InMemoryScriptCache.GetScript(System.String,System.Int32,System.Int32)">
      <summary>Returns the script for the given cache identifier.</summary>
      <param name="cacheIdentifier">The cache identifier</param>
      <param name="startOffset">The starting offset in the file, in characters</param>
      <param name="length">The length</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.InstantiableTypeAttribute">
      <summary>Used to define the instantiable type as an element being registered to the model.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.InstantiableTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.InstantiableTypeAttribute" /> class.</summary>
      <param name="instantiableType">The instantiable type</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.InstantiableTypeAttribute.InstantiableType">
      <summary>Gets the type that is declared instantiable.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.InstantiateAnnotationCallback`1">
      <summary>Represents the Type and method to be called to instantiate the annotation.</summary>
      <returns>An instantiated object of the specified <see cref="T:System.Type" /> that derives from the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelAnnotation" /> class.</returns>
      <typeparam name="TAnnotation"></typeparam>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.InstantiateElementCallback`1">
      <summary>Represents the Type and method to be called to instantiate the element.</summary>
      <returns>An instantiated object of the specified <see cref="T:System.Type" />.</returns>
      <typeparam name="TElement">A <see cref="T:System.Type" /> that inherits from <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElement" />.</typeparam>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.IScriptSourcedModelElement">
      <summary>Provides an interface for all model elements that have a script source.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.IScriptSourcedModelElement.GetRelationshipEntrySources(Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry)">
      <summary>Returns a collection of source information about the given relationship.</summary>
      <returns>A collection of source information items.</returns>
      <param name="relationshipEntry">An <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" /> object.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IScriptSourcedModelElement.PrimarySource">
      <summary>Gets information about the primary source for the element.</summary>
      <returns>Information about the primary source.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.IScriptSourcedModelElement.SecondarySources">
      <summary>Gets a list of secondary sources for the element.</summary>
      <returns>A list of secondary source information for the element.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ISourceInformation">
      <summary>Provides an interface for information about the source for a database model element.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ISourceInformation.IsPrimary">
      <summary>Gets a value that indicates whether the source is the primary source for the element.</summary>
      <returns>true if the source is primary; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ISourceInformation.Length">
      <summary>Gets the length, in characters, of the element in the source file.</summary>
      <returns>An Int32 value.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ISourceInformation.Offset">
      <summary>Gets the location in the source file for the start of the element.</summary>
      <returns>An Int32 value.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ISourceInformation.Script">
      <summary>Gets the script that generated the source file.</summary>
      <returns>A string that contains the script that generated the source file.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ISourceInformation.ScriptDom">
      <summary>Gets the scripting document model for the script.</summary>
      <returns>An <see cref="T:Microsoft.Data.Schema.ScriptDom.IScriptFragment" /> object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ISourceInformation.SourceName">
      <summary>Gets the file name or other unique name that indicates where the element originates.</summary>
      <returns>A string that contains the source name.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ISourceInformation.StartColumn">
      <summary>Gets the number of the column for the start of the element in the source.</summary>
      <returns>An Int32 value.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ISourceInformation.StartLine">
      <summary>Gets the number of the line for the start of the element in the source.</summary>
      <returns>An Int32 value.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelAnnotation">
      <summary>Represents an annotation that is attached to a schema model element.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelAnnotation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelAnnotation" /> class.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelAnnotation.AnnotationClass">
      <summary>Gets the metadata object that describes this instance.</summary>
      <returns>The metadata information about this instance.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelAnnotation.Delete">
      <summary>Deletes this instance from the schema model.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelAnnotation.Equals(System.Object)">
      <summary>Returns a value that indicates whether a provided object is equal to the current object.</summary>
      <returns>true if the <paramref name="other" /> object is equal to the current instance; otherwise, false.</returns>
      <param name="obj"></param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelAnnotation.GetElements">
      <summary>Returns a list of elements in this instance.</summary>
      <returns>A list of the <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> objects in this instance.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelAnnotation.GetHashCode">
      <summary>Not required.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelAnnotation.GetProperty``1(Microsoft.Data.Schema.SchemaModel.ModelPropertyClass)">
      <summary>Retrieves a specified property.</summary>
      <returns>The specified property.</returns>
      <param name="propertyClass">The <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelPropertyClass" /> for the property value that you want to retrieve.</param>
      <typeparam name="TProperty">A <see cref="T:System.Type" /> that represents the type of the property.</typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelAnnotation.GetRelationshipEntries">
      <summary>Returns the relationship entries to which this annotation is attached.</summary>
      <returns>The list of relationship entry objects.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelAnnotation.IsAttachedToStore">
      <summary>Gets a value that indicates whether the annotation is attached to a <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelStore" />.</summary>
      <returns>true if the annotation is attached to a <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelStore" />; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelAnnotation.IsDeleted">
      <summary>Returns a value that indicates whether this instance has been deleted.</summary>
      <returns>true if this instance has been deleted; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelAnnotation.Model">
      <summary>Gets or sets the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelStore" />.</summary>
      <returns>The underlying model store.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelAnnotation.Name">
      <summary>Gets or sets the annotation name.</summary>
      <returns>The name of the annotation.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelAnnotation.RegisterAnnotationClass``1(Microsoft.Data.Schema.SchemaModel.InstantiateAnnotationCallback{``0},System.Boolean,System.Boolean)">
      <summary>Registers the provided annotation type together with the annotation.</summary>
      <returns>The metadata for an annotation.</returns>
      <param name="factoryMethod">An <see cref="T:Microsoft.Data.Schema.SchemaModel.InstantiateAnnotationCallback`1" /> object that represents the method that can instantiate the annotation.</param>
      <param name="isSerializable">A bool that indicates whether the annotation is serializable.</param>
      <param name="requiresControllerLock">A bool that indicates whether instances of this class require a controller lock.</param>
      <typeparam name="TAnnotation">The <see cref="T:System.Type" /> for an object that inherits from <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelAnnotation" />.</typeparam>
      <exception cref="T:Microsoft.Data.Schema.SchemaModel.ModelRegistrationException">The <paramref name="TAnnotation" /> Generic parameter value has already been registered.</exception>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelAnnotation.RegisterPropertyClass``1(Microsoft.Data.Schema.SchemaModel.ModelAnnotationClass,System.String,``0)">
      <summary>Registers a property type that has the annotation.</summary>
      <returns>The metadata object for the registered property.</returns>
      <param name="annotationClass">The <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelAnnotationClass" />.</param>
      <param name="propertyName">A string that contains the name of the property.</param>
      <param name="defaultValue">An object of type <paramref name="TProperty" /> that represents the default value.</param>
      <typeparam name="TProperty">The <see cref="T:System.Type" /> of the property value.</typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelAnnotation.SetProperty``1(Microsoft.Data.Schema.SchemaModel.ModelPropertyClass,``0)">
      <summary>Sets the value of the provided property.</summary>
      <param name="propertyClass">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelPropertyClass" /> object.</param>
      <param name="property">A value of type <paramref name="TProperty" />.</param>
      <typeparam name="TProperty">The <see cref="T:System.Type" /> of the property to be set.</typeparam>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelAnnotationClass">
      <summary>Represents a base metadata class for annotations in model elements.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelAnnotationClass.AnnotationType">
      <summary>Gets the <see cref="T:System.Type" /> of the annotation.</summary>
      <returns>The <see cref="T:System.Type" /> of the annotation.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelAnnotationClass.ClassName">
      <summary>Gets the annotation class name.</summary>
      <returns>The class name.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelAnnotationClass.IsSerializable">
      <summary>Gets whether the annotation is serializable.</summary>
      <returns>true if the annotation is serializable; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelAnnotationClass.NameMandatory">
      <summary>Gets whether annotations of this class must always have a name.</summary>
      <returns>true if annotations of this type must always have a name; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelAnnotationClass.RequiresControllerLock">
      <summary>Gets whether annotations of this type require a controller lock.</summary>
      <returns>true if annotations of this type require a controller lock; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelBuilder">
      <summary>Used to populate schema manager with scripts.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelBuilder" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelBuilder.Add(Microsoft.Data.Schema.SchemaModel.CustomSchemaData)">
      <summary>Adds custom schema data.</summary>
      <param name="customSchemaData">The custom schema data</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelBuilder.AddObjects(System.String,System.IO.TextReader,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Adds objects to the schema manager.</summary>
      <param name="cacheIdentifier">The cache identifier</param>
      <param name="script">The script</param>
      <param name="metadata">The metadata that will be used in processing the script</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelBuilder.BeginBatchUpdate">
      <summary>Requests that the ModelBuilder start batch update mode processing.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelBuilder.Delete(Microsoft.Data.Schema.SchemaModel.CustomSchemaData)">
      <summary>Deletes custom schema data.</summary>
      <param name="customSchemaData">The custom schema data</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelBuilder.DeleteObjects(System.String)">
      <summary>Deletes objects in the schema manager that were added with the cache identifier.</summary>
      <param name="cacheIdentifier">The cache identifier</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelBuilder.EndBatchUpdate">
      <summary>Requests that the ModelBuilder stop batch update mode processing.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelBuilder.OptimizeForInsert">
      <summary>Optimizes for insertion.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelBuilder.OptimizeForQuery">
      <summary>Optimizes for query.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelBuilder.ResetInternalElementsResolutionStatus"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelBuilder.UpdateObjects(System.String,System.IO.TextReader,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Updates the objects that were previously added with the cache identifier.</summary>
      <param name="cacheIdentifier">The cache identifier</param>
      <param name="script">The script</param>
      <param name="metadata">The metadata to be used in processing the script</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelBuilderConstructor">
      <summary>Used to create a model builder.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelBuilderConstructor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelBuilderConstructor" /> class.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelBuilderConstructor.DataSchemaModel">
      <summary>Gets or sets the schema manager for the model builder.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelBuilderConstructor.DataSchemaModelController">
      <summary>Gets or sets the schema manager controller.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModelController" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelBuilderConstructor.ModelBuilderOption">
      <summary>Gets or sets a model builder option.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelBuilderOption" /> enumeration value.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelBuilderOption">
      <summary>Specifies the model builder option.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelBuilderOption.Full">
      <summary>Option is Full</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelBuilderOption.Deployable">
      <summary>Option is Deployable</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelBuilderOption.Scriptable">
      <summary>Option is Scriptable</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelCollation">
      <summary>Defines the type of model collations. This is a string identifying the alphabet or language whose sorting rules are applied when dictionary sorting is specified.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelCollation.#ctor(System.Int32,System.Boolean)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelCollation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelCollation.CaseSensitive"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelCollation.DefaultCollationCaseInsensitive"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelCollation.DefaultCollationCaseSensitive"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelCollation.Equals(System.Object)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelCollation.GetCollationLcidCaseSensitive(System.String,System.Int32@,System.Boolean@)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelCollation.GetCollationString(System.Int32,System.Boolean)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelCollation.GetHashCode"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelCollation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelCollation.Lcid"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelCollation.SupportedCollationStringToLcid"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelCollation.SupportedLcidToCollationStringsMap"></member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelCollationComparer">
      <summary>Compares two <see cref="T:System.String" /> objects, or two <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> objects, or two <see cref="T:System.Collections.Generic.IList`1" /> objects for equality or for the relationship between them.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelCollationComparer.#ctor(Microsoft.Data.Schema.SchemaModel.ModelCollation)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelCollationComparer" /> class by using the provided collation.</summary>
      <param name="collation">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelCollation" /> object.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelCollationComparer.Collation"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelCollationComparer.Compare(Microsoft.Data.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Compares two specified <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> objects and returns an integer that indicates their relationship to each other in the sort order.</summary>
      <returns>An Int32 that indicates the lexical relationship between the two objects.ValueConditionLess than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.</returns>
      <param name="x">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> that represents the source object.</param>
      <param name="y">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> that represents the target object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelCollationComparer.Compare(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
      <summary>Compares two specified lists of <see cref="T:System.String" /> objects and returns an integer that indicates their relationship to each other in the sort order.</summary>
      <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.ValueConditionLess than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.</returns>
      <param name="x">An <see cref="T:System.Collections.Generic.IList`1" /> of type string that represents the source object.</param>
      <param name="y">An <see cref="T:System.Collections.Generic.IList`1" /> of type string that represents the target object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelCollationComparer.Compare(System.String,System.String)">
      <summary>Compares two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relationship to each other in the sort order.</summary>
      <returns>An Int32 that indicates the lexical relationship between the two objects.ValueConditionLess than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.</returns>
      <param name="x">A <see cref="T:System.String" /> that represents the source object.</param>
      <param name="y">A <see cref="T:System.String" /> that represents the target object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelCollationComparer.Equals(Microsoft.Data.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Indicates whether two provided identifiers are equal.</summary>
      <returns>true if the two identifiers are equal; otherwise, false;</returns>
      <param name="x">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> that represents the source object.</param>
      <param name="y">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> that represents the target object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelCollationComparer.Equals(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
      <summary>Indicates whether two provided lists of type string are equal.</summary>
      <returns>true if the two lists are equal; otherwise, false;</returns>
      <param name="x">An <see cref="T:System.Collections.Generic.IList`1" /> of type string that represents the source object.</param>
      <param name="y">An <see cref="T:System.Collections.Generic.IList`1" /> of type string that represents the target object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelCollationComparer.Equals(System.String,System.String)">
      <summary>Indicates whether two strings are equal.</summary>
      <returns>true if the two identifiers are equal; otherwise, false;</returns>
      <param name="x">A <see cref="T:System.String" /> that represents the source object.</param>
      <param name="y">A <see cref="T:System.String" /> that represents the target object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelCollationComparer.GetHashCode(Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Serves as a hash function for the provided <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" />.</summary>
      <returns>An Int32 hash code for the provided identifier.</returns>
      <param name="obj">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelCollationComparer.GetHashCode(System.Collections.Generic.IList{System.String})">
      <summary>Serves as a hash function for the provided list of type <see cref="T:System.String" />.</summary>
      <returns>An Int32 hash code for the provided <see cref="T:System.String" />.</returns>
      <param name="obj">An <see cref="T:System.Collections.Generic.IList`1" /> object of type <see cref="T:System.String" />.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelCollationComparer.GetHashCode(System.String)">
      <summary>Serves as a hash function for the provided <see cref="T:System.String" />.</summary>
      <returns>An Int32 hash code for the provided String.</returns>
      <param name="obj">A <see cref="T:System.String" /> object.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelComparer">
      <summary>Represents the comparison engine used to compare two models or two elements.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparer.#ctor(Microsoft.Data.Schema.SchemaModel.ModelSchema)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparer.ArePropertiesEqual(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.ModelPropertyClass,Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparer.Cancel">
      <summary>Cancels comparison.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparer.Compare(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Compares two elements without a filter.</summary>
      <param name="sourceElement">The source element</param>
      <param name="targetElement">The target element</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparer.Compare(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration)">
      <summary>Compares two elements.</summary>
      <param name="sourceElement">Element from source model</param>
      <param name="targetElement">Element from target model</param>
      <param name="configuration">Filter defined for this comparison</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparer.Compare(Microsoft.Data.Schema.SchemaModel.ModelStore,Microsoft.Data.Schema.SchemaModel.ModelStore)">
      <summary>Compares two models without a filter.</summary>
      <param name="source">Source model</param>
      <param name="target">Target model</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparer.Compare(Microsoft.Data.Schema.SchemaModel.ModelStore,Microsoft.Data.Schema.SchemaModel.ModelStore,Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration)">
      <summary>Compares two models with a passed-in filter.</summary>
      <param name="source">Element from source model</param>
      <param name="target">Element from target model</param>
      <param name="configuration">Filter defined for this comparison</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparer.CompareRelationship(Microsoft.Data.Schema.SchemaModel.IModelRelationship,Microsoft.Data.Schema.SchemaModel.IModelRelationship,Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration,Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparer.CreateDefaultConfiguration"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparer.OnCompareElementFinished(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration,Microsoft.Data.Schema.SchemaModel.ModelComparisonResult,Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparer.OnCompareModelFinished(Microsoft.Data.Schema.SchemaModel.ModelStore,Microsoft.Data.Schema.SchemaModel.ModelStore,Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration,Microsoft.Data.Schema.SchemaModel.ModelComparisonResult)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparer.OnCompareModelStarted(Microsoft.Data.Schema.SchemaModel.ModelStore,Microsoft.Data.Schema.SchemaModel.ModelStore,Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration)"></member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration">
      <summary>Represents a configuration object defined for model comparison.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration.#ctor(Microsoft.Data.Schema.SchemaModel.ModelComparisonFilter)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration" /> class.</summary>
      <param name="filter">The comparison filter used to filter model element types, properties, and relationships</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration.#ctor(Microsoft.Data.Schema.SchemaModel.ModelComparisonFilter,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration" /> class.</summary>
      <param name="filter">The comparison filter used to filter model element types, properties, and relationships</param>
      <param name="onlyCompareElementsInSource">Specifies whether to use elements in source as base</param>
      <param name="useSourceCollation">Specifies whether to use collation of source model</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration.AddPropertyValueSubstitution(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.ModelPropertyClass,System.Object,System.Boolean)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration.Clone">
      <summary>Clones this object.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration.CloneMemberValues(Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration)">
      <summary>Clones member values.</summary>
      <param name="copiedConfiguration">The copied configuration</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration.Filter">
      <summary>Gets or sets the filter defined for this comparison configuration.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration.OnlyCompareElementsInSource">
      <summary>Gets or sets whether to only compare elements that exist in the source.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration.TryGetPropertyValueSubstitution(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.ModelPropertyClass,System.Boolean,System.Object@)"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparerConfiguration.UseSourceCollation">
      <summary>Gets or sets whether to use source collation during identifier comparison.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelComparerConstructor">
      <summary>Provides a constructor class for a <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparer" /> object.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparerConstructor.#ctor">
      <summary>Initializes a default <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparerConstructor" /> object.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition">
      <summary>Contains details on changes to the target <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> object that has been compared to a source element.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.#ctor(Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition" /> class by using the provided target element.</summary>
      <param name="targetElement">An <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.#ctor(Microsoft.Data.Schema.SchemaModel.IModelElement,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition" /> class by using the provided target element and by indicating whether the name has changed.</summary>
      <param name="targetElement">An <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> object.</param>
      <param name="isSameName">A bool value that indicates whether the name has changed.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.#ctor(Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition" /> class by using the provided change definition.</summary>
      <param name="originalChangeDefinition">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition" />.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.ComposingChildrenEqual">
      <summary>Gets a list of composing child elements that are equal.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IDictionary`2" /> object where each dictionary item has two <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> objects.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.ComposingChildrenEquivalent"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.ComposingChildrenModified">
      <summary>Gets a list of composing child elements that have changed.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IDictionary`2" /> object where each dictionary item has the source composing child <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> object and the target composing child <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.ComposingChildrenOrderChanged">
      <summary>Gets a list of composing child elements that have changed order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IDictionary`2" /> object where each dictionary item has both source and target <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> objects.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.ComposingChildrenToAdd">
      <summary>Gets a list of composing child elements that occur in the source and must be added to the target element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IDictionary`2" /> object where each dictionary item has a <see cref="T:Microsoft.Data.Schema.SchemaModel.RelationshipClass" /> object and the target <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.ComposingChildrenToDrop">
      <summary>Gets a list of composing child elements that occur in the target and must be removed from the source element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IDictionary`2" /> object where each dictionary item has both the source and target <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> objects.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.DangleRelationshipsFromSource">
      <summary>Disconnects the related element from the relating element in a relationship.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.DangleRelationshipsFromTarget">
      <summary>Disconnects the relating element from the related element in a relationship.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" /> object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.HavingDangleRelationships">
      <summary>Gets a value that indicates whether one or more relationships have lost connection between the participating elements.</summary>
      <returns>true if there are dangling relationships; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.HierarchicalChildrenEqual">
      <summary>Gets a value that indicates whether there are two or more identical hierarchical child relationships.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IDictionary`2" /> object of type <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.HierarchicalChildrenEquivalent"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.HierarchicalChildrenModified">
      <summary>Gets a list of information about the hierarchical child elements that have been modified.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IDictionary`2" /> object where each item in the dictionary has an <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> object and a <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition" /> object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.HierarchicalChildrenOrderChanged">
      <summary>Gets a list of information about the hierarchical child relationships that have been moved to a different order in the list.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IDictionary`2" /> object with a <see cref="T:Microsoft.Data.Schema.SchemaModel.RelationshipClass" /> object and its corresponding <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.HierarchicalChildrenToAdd">
      <summary>Gets a list of relationship metadata and the corresponding hierarchical child elements that will be added to the element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IDictionary`2" /> object with a <see cref="T:Microsoft.Data.Schema.SchemaModel.RelationshipClass" /> object and its corresponding <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.HierarchicalChildrenToDrop">
      <summary>Gets a list of relationship metadata objects and their corresponding target hierarchical child elements that will be dropped from the element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IDictionary`2" /> object that has a <see cref="T:Microsoft.Data.Schema.SchemaModel.RelationshipClass" /> object and its corresponding <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> object that will be dropped.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.IsComposingChildrenChanged">
      <summary>Gets a value that indicates whether any composing child elements in the target element have changed.</summary>
      <returns>true if any composing child elements in the target element have changed; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.IsComposingChildrenDefinitionChanged">
      <summary>Gets a value that indicates whether any composing child definitions in the target element have changed.</summary>
      <returns>true if any composing child definitions in the target element have changed; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.IsDefinitionChanged">
      <summary>Gets a value that indicates whether the change definition has changed.</summary>
      <returns>true if the change definition has changed; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.IsEqual">
      <summary>Gets a value that indicates whether the source element and the target element are equal.</summary>
      <returns>true if the source element and target element are equal; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.IsHierarchicalChildrenChanged">
      <summary>Gets a value that indicates whether any hierarchical child elements in the target element have been added, dropped, changed, or moved.</summary>
      <returns>true if any hierarchical child elements in the target element have been modified; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.IsPropertiesChanged">
      <summary>Gets a value that indicates whether any property values in the target element have changed.</summary>
      <returns>true if any property values in the target element have been changed; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.IsRelationshipEntriesChanged">
      <summary>Gets a value that indicates whether any relationship entries in the target element have changed.</summary>
      <returns>true if any relationship entries in the target element have been changed; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.IsSameName">
      <summary>Gets a value that indicates whether any child elements have the same name.</summary>
      <returns>true if any child elements have the same name; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.Normalize">
      <summary>Normalizes the data model that is represented by the element and its structure.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.PropertiesEqual">
      <summary>Gets a list of properties in the target element that are equal.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.SchemaModel.PropertyClass" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.PropertiesModified">
      <summary>Gets a list of properties in the target element that have been modified.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.SchemaModel.PropertyClass" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.RelationshipEntriesEqual">
      <summary>Gets a list of relationship entries that are equal.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.RelationshipEntriesOrderChanged">
      <summary>Gets a list of relationship entries in the target element where the entry order has changed.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.RelationshipEntriesToAdd">
      <summary>Gets a list of relationship entries that must be added to the target element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.RelationshipEntriesToDrop">
      <summary>Gets a list of relationship entries that must be dropped from the target element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition.TargetElement">
      <summary>Gets the target <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> object.</summary>
      <returns>An <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" />.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonException">
      <summary>Represents the model comparison exception for invalid state while comparing two models.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonException" /> class.</summary>
      <param name="info">The serialization information</param>
      <param name="context">The streaming context</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonException" /> class.</summary>
      <param name="message">The error message</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonException" /> class.</summary>
      <param name="message">The error message</param>
      <param name="innerException">The nested exception</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonFilter">
      <summary>Represents a filter that can be defined for comparison.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonFilter.#ctor(Microsoft.Data.Schema.SchemaModel.ModelSchema)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonFilter" /> class.</summary>
      <param name="schema">The model schema to use</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonFilter.#ctor(Microsoft.Data.Schema.SchemaModel.ModelSchema,System.Collections.Generic.ICollection{Microsoft.Data.Schema.SchemaModel.ModelElementClass},System.Collections.Generic.ICollection{Microsoft.Data.Schema.SchemaModel.ModelPropertyClass},System.Collections.Generic.ICollection{Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass})"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonFilter.#ctor(Microsoft.Data.Schema.SchemaModel.ModelSchema,System.Collections.Generic.ICollection{Microsoft.Data.Schema.SchemaModel.ModelPropertyClass},System.Collections.Generic.ICollection{Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass})"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonFilter.#ctor(Microsoft.Data.Schema.SchemaModel.ModelSchema,System.Collections.Generic.ICollection{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonFilter" /> class.</summary>
      <param name="schema">The model schema to use</param>
      <param name="elementTypesIncluded">The element types to be included in comparison</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonFilter.#ctor(Microsoft.Data.Schema.SchemaModel.ModelSchema,System.Collections.Generic.ICollection{System.Type},System.Collections.Generic.ICollection{Microsoft.Data.Schema.SchemaModel.ModelPropertyClass},System.Collections.Generic.ICollection{Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass})"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonFilter.ElementTypesIncluded">
      <summary>Gets a collection of the element types to be included in the comparison.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonFilter.ExcludedPropertyClasses">
      <summary>Gets a collection of properties excluded during comparison.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonFilter.ExcludedRelationshipClasses">
      <summary>Gets a collection of relationships excluded during comparison.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonFilter.IsElementTypeExplicitlyIncluded(Microsoft.Data.Schema.SchemaModel.ModelElementClass)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonFilter.IsPropertyClassExcluded(Microsoft.Data.Schema.SchemaModel.ModelPropertyClass)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonFilter.IsRelationshipClassExcluded(Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass)"></member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult">
      <summary>Represents the SchemaModel comparison result.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.#ctor(Microsoft.Data.Schema.SchemaModel.ModelComparisonResult)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult" /> class.</summary>
      <param name="result">An instance of this class to copy</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.AddToAddElementList(Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Adds an element to the add element list.</summary>
      <param name="element">The element to add</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.AddToAddElementList(System.Collections.Generic.IList{Microsoft.Data.Schema.SchemaModel.IModelElement})">
      <summary>Adds elements to the add element list.</summary>
      <param name="elements">The list of elements to add</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.AddToChangedElementList(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.AddToChangedElementList(System.Collections.Generic.IDictionary{Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.ModelComparisonChangeDefinition})"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.AddToDropElementList(Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Adds an element to the drop elements list.</summary>
      <param name="element">The element to add</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.AddToDropElementList(System.Collections.Generic.IList{Microsoft.Data.Schema.SchemaModel.IModelElement})">
      <summary>Adds a list of elements to the drop elements list.</summary>
      <param name="elements">The list of elements to add</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.AddToEqualElementGroupList(System.Collections.Generic.IList{Microsoft.Data.Schema.SchemaModel.IModelElement},System.Collections.Generic.IList{Microsoft.Data.Schema.SchemaModel.IModelElement})"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.AddToEqualElementList(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Adds an element that is equal from the source to the target.</summary>
      <param name="sourceElement">An element from the source model</param>
      <param name="targetElement">An element from the target model</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.AddToEqualElementList(System.Collections.Generic.IDictionary{Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.IModelElement})">
      <summary>Adds a list of elements to the equal elements list.</summary>
      <param name="equalElements">The list of elements to add</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.ElementGroupsEqual"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.ElementsChanged">
      <summary>Gets a collection of elements changed.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.ElementsComposingChildrenChanged"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.ElementsEqual">
      <summary>Gets a collection of elements that have no changes.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.ElementsHierarchicalChildrenChanged">
      <summary>Gets a collection of elements that are changed because hierarchical children are changed.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.ElementsPropertyChanged">
      <summary>Gets a collection of elements that are changed because properties are changed.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.ElementsRelationshipEntryChanged">
      <summary>Gets a collection of elements that are changed because relationship entries are added or dropped.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.ElementsToAdd">
      <summary>Gets a collection of elements that exist in the source but not in the target.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.ElementsToDrop">
      <summary>Gets a collection of elements that exist in the target but not in the source.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.ExcludeResults(Microsoft.Data.Schema.SchemaModel.ModelSchema,System.Collections.Generic.IList{System.Type})">
      <summary>Filters the comparison result with excluded types.</summary>
      <param name="schema">The model schema</param>
      <param name="excludingTypes">The list of excluded types</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.GetResultType(Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Returns the result type for this element.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonResultType" /> enumeration value.</returns>
      <param name="element">The element to check</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.IsEqual">
      <summary>Returns whether compared elements are equal.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.Normalize">
      <summary>Iterates changed elements and determines whether there is any difference in the change definition. If the result was modified and nothing is changed, the element is added to the equal list.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.RemoveFromAddElementList(Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Removes an element from the add elements list.</summary>
      <param name="element">The element to remove</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.RemoveFromAddElementList(System.Collections.Generic.IList{Microsoft.Data.Schema.SchemaModel.IModelElement})">
      <summary>Removes a list of elements from the add elements list.</summary>
      <param name="elements">The list of elements to remove</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.RemoveFromChangedElementList(Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Removes an element from the changed elements list.</summary>
      <param name="sourceElement">The element to remove</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.RemoveFromChangedElementList(System.Collections.Generic.IList{Microsoft.Data.Schema.SchemaModel.IModelElement})">
      <summary>Removes a list of elements from the changed elements list.</summary>
      <param name="sourceElements">The list of elements to remove</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.RemoveFromDropElementList(Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Removes an element from the drop elements list.</summary>
      <param name="element">The element to remove</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.RemoveFromDropElementList(System.Collections.Generic.IList{Microsoft.Data.Schema.SchemaModel.IModelElement})">
      <summary>Removes a list of elements from the drop elements list.</summary>
      <param name="elements">The list of elements to remove</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.RemoveFromEqualElementGroupList(System.Collections.Generic.IList{Microsoft.Data.Schema.SchemaModel.IModelElement})"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.RemoveFromEqualElementList(Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Removes an element from the equal elements list.</summary>
      <param name="sourceElement">The element to remove</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelComparisonResult.RemoveFromEqualElementList(System.Collections.Generic.IList{Microsoft.Data.Schema.SchemaModel.IModelElement})">
      <summary>Removes a list of elements from the equal elements list.</summary>
      <param name="sourceElements">The list of elements to remove</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelComparisonResultType">
      <summary>Specifies a model comparison result type.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelComparisonResultType.Unknown">
      <summary>Type is Unknown</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelComparisonResultType.Equal">
      <summary>Type is Equal</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelComparisonResultType.Changed">
      <summary>Type is Changed</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelComparisonResultType.ToAdd">
      <summary>Type is ToAdd</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelComparisonResultType.ToDrop">
      <summary>Type is ToDrop</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelElement">
      <summary>Provides a base class for schema model elements that are supported by a specific database schema provider.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElement" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.AddAnnotation(Microsoft.Data.Schema.SchemaModel.IModelAnnotation)">
      <summary>Adds the provided <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotation" /> object to the element.</summary>
      <param name="annotation">An <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotation" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.Delete">
      <summary>Deletes the current element from the schema model.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelElement.ElementClass">
      <summary>Gets the <see cref="T:Microsoft.Data.Schema.SchemaModel.ElementClass" /> metadata for the element.</summary>
      <returns>An <see cref="T:Microsoft.Data.Schema.SchemaModel.ElementClass" /> object that has metadata for the element.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.Equals(System.Object)">
      <summary>Determines whether a provided object is equal to the current element.</summary>
      <returns>true if the two elements are equal; otherwise, false.</returns>
      <param name="obj"></param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetAnnotations``1">
      <summary>Gets a list of annotations of the provided type that are attached to the current element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> that contains annotations whose Type matches the provided <paramref name="TType" /> Generic parameter.</returns>
      <typeparam name="TType">A <see cref="T:System.Type" /> that inherits from <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotation" />.</typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetAnnotations">
      <summary>Gets a list of annotations that have been added to this element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> object of type <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotation" />.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetAnnotations(Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Gets a list of annotations that have been added to the specified element, which is a child element of the current element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> object of type <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotation" />.</returns>
      <param name="identifier">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> that identifies an element that is a child of the current element.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetAnnotations``1(Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Gets a list of annotations that are attached to the specified element and whose type matches the provided <see cref="T:System.Type" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <paramref name="TType" />.</returns>
      <param name="identifier">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> object that identifies an element.</param>
      <typeparam name="TType">A <see cref="T:System.Type" /> that inherits from <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotation" />.</typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetAnnotations(Microsoft.Data.Schema.SchemaModel.ModelIdentifier,System.Type)">
      <summary>Gets a list of annotations of the specified type that have been added to the specified element that is a child of the current element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> object of type <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotation" />, or a derived type.</returns>
      <param name="identifier">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> object that identifies an element that is a child of the current element.</param>
      <param name="annotationType">A <see cref="T:System.Type" /> that derives from <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotation" />.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetAnnotations(System.Type)">
      <summary>Gets a list of annotations of the specified type that have been added to this element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> object of type <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotation" />, or a derived type.</returns>
      <param name="annotationType">A <see cref="T:System.Type" /> that derives from <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotation" />.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetComposingChildren">
      <summary>Returns a list of child-composing elements.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> containing the child-composing elements.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetHashCode"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetHierarchicalChildren">
      <summary>Gets a list of the child hierarchical child elements.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> that contains the child hierarchical elements.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetMultiRelationship``2(Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass)">
      <typeparam name="TFrom"></typeparam>
      <typeparam name="TTo"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetOwnerInfo">
      <summary>Returns information about the owner of the current element.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElementOwnerInfo" /> object.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetProperty``1(Microsoft.Data.Schema.SchemaModel.ModelPropertyClass)">
      <typeparam name="TProperty"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetReferencedDanglingRelationshipEntries"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetReferencedElements"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetReferencedRelationshipEntries"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetReferencingElements"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetReferencingRelationshipEntries"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetRelationship(Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetRelationship``2(Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass)">
      <typeparam name="TFrom"></typeparam>
      <typeparam name="TTo"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetRelationships">
      <summary>Returns a list of relationships that are registered in the element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationship" />.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetReverseMultiRelationship``2(Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass)">
      <typeparam name="TFrom"></typeparam>
      <typeparam name="TTo"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetReverseSingleRelationship``2(Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass)">
      <typeparam name="TFrom"></typeparam>
      <typeparam name="TTo"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.GetSingleRelationship``2(Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass)">
      <typeparam name="TFrom"></typeparam>
      <typeparam name="TTo"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.IsDeleted">
      <summary>Returns a value that indicates whether the current element has been deleted.</summary>
      <returns>true if the element has been deleted; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.IsExternal">
      <summary>Returns a value that indicates whether the current element has been loaded from a source outside the current schema.</summary>
      <returns>true if the source of the element is outside the current schema; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelElement.Model">
      <summary>Gets the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelStore" /> for the element.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelStore" /> object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelElement.Name">
      <summary>Gets the identifier for the element.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> object that represents the name of the element.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.RegisterElementClass``1(Microsoft.Data.Schema.SchemaModel.InstantiateElementCallback{``0},Microsoft.Data.Schema.SchemaModel.ModelIdentifierGroup)">
      <typeparam name="TElement"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.RegisterExternalPropertyClass``1(Microsoft.Data.Schema.SchemaModel.ModelElementClass,System.String)">
      <typeparam name="TProperty"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.RegisterPropertyClass``1(Microsoft.Data.Schema.SchemaModel.ModelElementClass,System.String,``0)">
      <typeparam name="TProperty"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.RegisterRelationshipClass``1(Microsoft.Data.Schema.SchemaModel.ModelElementClass,System.String,Microsoft.Data.Schema.SchemaModel.ModelRelationshipType,Microsoft.Data.Schema.SchemaModel.ModelRelationshipCardinalityStyle,System.Boolean)">
      <typeparam name="TReferencedInterface"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.RegisterRelationshipClass``1(Microsoft.Data.Schema.SchemaModel.ModelElementClass,System.String,Microsoft.Data.Schema.SchemaModel.ModelRelationshipType,Microsoft.Data.Schema.SchemaModel.ModelRelationshipCardinalityStyle,System.Boolean,System.Boolean)">
      <typeparam name="TReferencedInterface"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.RegisterReverseRelationshipClass``1(Microsoft.Data.Schema.SchemaModel.ModelElementClass,System.String,Microsoft.Data.Schema.SchemaModel.ModelRelationshipCardinalityStyle,System.String)">
      <typeparam name="TReferencedInterface"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.RemoveAnnotation(Microsoft.Data.Schema.SchemaModel.IModelAnnotation)">
      <summary>Removes the specified annotation from the element.</summary>
      <param name="annotation">An <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotation" /> object.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelElement.ResolutionStatus">
      <summary>Gets the current resolution status.</summary>
      <returns>A member of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElementResolutionStatus" /> enumeration.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElement.SetProperty``1(Microsoft.Data.Schema.SchemaModel.ModelPropertyClass,``0)">
      <typeparam name="TProperty"></typeparam>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelElement.SourceCodePositions"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelElement.ValidationStatus">
      <summary>Gets a value that indicates the validation status of the current element.</summary>
      <returns>A member of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElementValidationStatus" /> enumeration.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelElementClass">
      <summary>Represents the metadata for a model element. This class cannot be inherited.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelElementClass.ClassName">
      <summary>Gets the class name.</summary>
      <returns>The name of the class.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelElementClass.ExternalPropertyClasses">
      <summary>Gets a list of <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelPropertyClass" /> objects that represent properties that are not part of the current model.</summary>
      <returns>A list of external properties.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElementClass.GetRelationshipClass(System.String)">
      <summary>Returns the relationship that is defined by the provided name.</summary>
      <returns>The relationship that is defined by the name.</returns>
      <param name="name">The name of a relationship.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelElementClass.HierarchicalRelationshipClass">
      <summary>Returns the hierarchical <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass" />.</summary>
      <returns>The hierarchical relationship class object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelElementClass.IdentifierGroup">
      <summary>Gets the identifier group to which this element belongs.</summary>
      <returns>The identifier group.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelElementClass.ImplementedInterfaces">
      <summary>Gets a list of interfaces that are implemented by this class.</summary>
      <returns>A list of interfaces.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElementClass.ImplementsInterface(System.Type)">
      <summary>Returns a value that indicates whether this class implements the provided interface type.</summary>
      <returns>true if this element implements the provided interface; otherwise, false.</returns>
      <param name="interfaceType">A <see cref="T:System.Type" /> of an interface.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelElementClass.NameMandatory">
      <summary>Gets a value that indicates whether this class must have a name.</summary>
      <returns>true if the class must have a name; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelElementClass.RelationshipClasses">
      <summary>Gets a list of relationship classes for this element.</summary>
      <returns>A list of relationships.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelElementHandle">
      <summary>Represents the handle of an <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement)" /> object as obtained from the <see cref="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateElementHandle(Microsoft.Data.Schema.SchemaModel.IModelElement)" /> method. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelElementHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElementHandle" />.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelElementOwnerInfo">
      <summary>Represents model element owner information.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelElementOwnerInfo.ComposingOwner">
      <summary>Gets the composing owner.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelElementOwnerInfo.IsComposing">
      <summary>Gets whether the relationship is composing</summary>
      <returns>Returns True if the relationship is composing; otherwise, False.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelElementOwnerInfo.Owner">
      <summary>Gets the model element owner.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelElementOwnerInfo.OwnerRelationshipEntry">
      <summary>Gets the owner relationship entry.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelRelationshipEntry" />.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelElementQueryFilter">
      <summary>Defines the location of elements relevant to a query or operation.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelElementQueryFilter.All">
      <summary>Consider all elements. Value: 0.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelElementQueryFilter.Internal">
      <summary>Consider only internal elements. Value: 1.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelElementQueryFilter.External">
      <summary>Consider only external elements. Value: 2.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelElementResolutionStatus">
      <summary>Specifies the model element resolution status.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelElementResolutionStatus.ResolveCandidate">
      <summary>Indicates that the element should be processed to resolve its relationship entries</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelElementResolutionStatus.Resolved">
      <summary>Indicates that all of the relationship entries of the element are connected to other elements</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelElementResolutionStatus.Unresolvable">
      <summary>Indicates that there are relationship entries on the element that cannot be resolved</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelElementValidationStatus">
      <summary>Specifies the model element validation status.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelElementValidationStatus.Initial">
      <summary>Validation is initial</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelElementValidationStatus.Warning">
      <summary>Validation is in warning</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelElementValidationStatus.Error">
      <summary>Validation is in error</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelElementValidationStatus.Valid">
      <summary>Validation is valid</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelEventArgs">
      <summary>Represents event arguments for model elements.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelEventArgs.#ctor(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.ModelEventType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelEventArgs" /> class.</summary>
      <param name="element">The <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> involved in the event.</param>
      <param name="type">A member of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelEventType" /> enumeration indicating the type of the event.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelEventArgs.#ctor(Microsoft.Data.Schema.SchemaModel.ModelEventType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelEventArgs" /> class.</summary>
      <param name="type">A member of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelEventType" /> enumeration indicating the type of the event</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelEventArgs.#ctor(System.Collections.Generic.IList{System.Tuple`2})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelEventArgs" /> class.</summary>
      <param name="changes">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Tuple" /> objects that contain an <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> and a member of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelEventType" /> enumeration.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelEventArgs.Changes">
      <summary>Gets a list of all changes.</summary>
      <returns>A list of elements and change types.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelEventType">
      <summary>Specifies a model event type.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelEventType.InitialStoreChange">
      <summary>Type is InitialStoreChange</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelEventType.ElementAdded">
      <summary>Type is ElementAdded</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelEventType.ElementUpdated">
      <summary>Type is ElementUpdated</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelEventType.ElementDeleted">
      <summary>Type is ElementDeleted</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelException">
      <summary>Represents the thrown exception for a model-related failure.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelException" /> class.</summary>
      <param name="info">The serialization information</param>
      <param name="context">The streaming context</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelException" /> class.</summary>
      <param name="message">The error message</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelException" /> class.</summary>
      <param name="message">The error message</param>
      <param name="innerException">The nested exception</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier">
      <summary>Represents the unique identifier for a schema model.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelIdentifier.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelIdentifier.Equals(Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Determines whether the provided model identifiers and the current identifier are equal.</summary>
      <returns>true if the two objects are equal; otherwise, false. </returns>
      <param name="other">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelIdentifier.Equals(Microsoft.Data.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Determines whether the two provided model identifiers are equal.</summary>
      <returns>true if the two objects are equal; otherwise, false. </returns>
      <param name="identifierA">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> object.</param>
      <param name="identifierB">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelIdentifier.Equals(System.Object)">
      <param name="obj"></param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelIdentifier.ExternalParts">
      <summary>Gets a list of the external reference parts if the identifier is external to the current model.</summary>
      <returns>The list of external parts.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelIdentifier.GetHashCode"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelIdentifier.Model">
      <summary>Gets the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelStore" /> to which this identifier applies.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelStore" /> object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelIdentifier.Parts">
      <summary>Gets a list of the parts of the identifier.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifierGroup">
      <summary>Marker class for an identifier that represents a group of elements.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifierHandle">
      <summary>Represents a runtime handle for a model identifier.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelIdentifierHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Updates the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to contain information about the handle.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelInstantiationException">
      <summary>Represents the thrown exception when the model cannot instantiate an item.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelInstantiationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelInstantiationException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelInstantiationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelInstantiationException" /> class.</summary>
      <param name="info">The serialization information</param>
      <param name="context">The streaming context</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelInstantiationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelInstantiationException" /> class.</summary>
      <param name="message">The error message</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelInstantiationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelInstantiationException" /> class.</summary>
      <param name="message">The error message</param>
      <param name="innerException">The nested exception</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelPersistenceException">
      <summary>Represents the model persistence exception.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelPersistenceException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelPersistenceException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelPersistenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelPersistenceException" /> class.</summary>
      <param name="info">The serialization information</param>
      <param name="context">The streaming context</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelPersistenceException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelPersistenceException" /> class.</summary>
      <param name="message">The error message</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelPersistenceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelPersistenceException" /> class.</summary>
      <param name="message">The error message</param>
      <param name="innerException">The nested exception</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelPropertyClass">
      <summary> Represents metadata for a property. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelPropertyClass.IsDefault(System.Object)">
      <summary>Returns whether the given value is the default value.</summary>
      <returns>true if the <paramref name="propertyValue" /> is the default value; otherwise, false.</returns>
      <param name="propertyValue">A value whose type matches the <see cref="P:Microsoft.Data.Schema.SchemaModel.ModelPropertyClass.PropertyType" /> property.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelPropertyClass.IsExternal">
      <summary>Gets whether the property is external to the current <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" />.</summary>
      <returns>true if the property is external; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelPropertyClass.Name">
      <summary>Gets the name of the property.</summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelPropertyClass.PropertyType">
      <summary>The <see cref="T:System.Type" /> of the property.</summary>
      <returns>The type of the property.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelPropertyContainerClass">
      <summary>Represents a class that can contain properties, and provides access to the metadata for those properties.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelPropertyContainerClass.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelPropertyContainerClass" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelPropertyContainerClass.GetPropertyClass(System.String)">
      <summary>Returns the property metadata object identified by the provided name.</summary>
      <returns>The property metadata.</returns>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelPropertyContainerClass.OnExternalPropertyClassAdded(Microsoft.Data.Schema.SchemaModel.ModelPropertyClass)">
      <summary>Called when an external property class is registered for this element. </summary>
      <param name="propertyClass">The <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelPropertyClass" /> metadata for the external property.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelPropertyContainerClass.PropertyClasses">
      <summary>Gets a list of metadata objects for the properties in this element.</summary>
      <returns>A list of property metadata objects.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelRegistrationException">
      <summary>Represents the thrown exception when there is an issue with metadata registration.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelRegistrationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelRegistrationException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelRegistrationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelRegistrationException" /> class.</summary>
      <param name="info">The serialization information</param>
      <param name="context">The streaming context</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelRegistrationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelRegistrationException" /> class.</summary>
      <param name="message">The error message</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelRegistrationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelRegistrationException" /> class.</summary>
      <param name="message">The error message</param>
      <param name="innerException">The nested exception</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelRelationshipCardinalityStyle">
      <summary>Defines the cardinality style of a relationship.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelRelationshipCardinalityStyle.Single">
      <summary>A single relationship entry is allowed.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelRelationshipCardinalityStyle.Many">
      <summary>Many relationship entries are allowed.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass">
      <summary>Represents the metadata class for relationships. This class cannot be inherited.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass.ForwardRelationshipClasses">
      <summary>Gets a list of relationship metadata objects that are forward relationships, if this represents a reverse relationship.</summary>
      <returns>A list of relationship metadata objects if this is a reverse relationship; otherwise, an empty list.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass.FromElementClass">
      <summary>Gets the element metadata that represents the "from" element, or the element on the left-hand side of the relationship.</summary>
      <returns>A model element metadata object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass.IsOrderedComparison">
      <summary>Gets a value that indicates whether the order is significant when related elements are compared.</summary>
      <returns>true if the order is significant; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass.IsParentDecorator">
      <summary>Gets a value that indicates whether this relationship is a parent decorator.</summary>
      <returns>true if this relationship is a parent decorator; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass.ModelRelationshipCardinalityStyle">
      <summary>Gets the cardinality style for this relationship.</summary>
      <returns>The cardinality style.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass.ModelRelationshipType">
      <summary>Gets the relationship type for this relationship.</summary>
      <returns>The relationship type.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass.Name">
      <summary>Gets the name of the relationship.</summary>
      <returns>The relationship name.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass.RelatedElement">
      <summary>Gets the "related" element, or the element on the right-hand side of the relationship.</summary>
      <returns>The related element.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelRelationshipType">
      <summary>Defines the type of relationship.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelRelationshipType.Peer">
      <summary>Relationship between two peers</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelRelationshipType.Hierarchical">
      <summary>Relationship to a parent</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelRelationshipType.Composing">
      <summary>Relationship to a child that is owned</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelRelationshipType.Reverse">
      <summary>Reverse relationship</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelSchema">
      <summary>Represents the metadata required to instantiate a <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelStore" />.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.AddAnnotationClass(Microsoft.Data.Schema.SchemaModel.ModelAnnotationClass)">
      <summary>Adds an annotation class to this schema.</summary>
      <param name="annotationClass">The <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelAnnotationClass" /> metadata object to add</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.AddElementClass(Microsoft.Data.Schema.SchemaModel.ModelElementClass)">
      <summary>Adds an element class to this schema.</summary>
      <param name="elementClass">The <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElement" /> metadata object to add.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelSchema.AnnotationClasses">
      <summary>Gets a list of annotation metadata objects.</summary>
      <returns>The list of metadata objects.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.CreateIdentifierGroup">
      <summary>Creates an identifier group.</summary>
      <returns>Returns an identifier group.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelSchema.ElementClasses"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.FindAnnotationClass(System.String)">
      <summary>Finds and returns the annotation metadata object by name.</summary>
      <returns>Returns the identified annotation metadata object.</returns>
      <param name="name">The class name.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.FindAnnotationClass(System.Type)">
      <summary>Returns the annotation metadata object that is associated with an annotation of the given type.</summary>
      <returns>Returns the requested annotation metadata object.</returns>
      <param name="type">The <see cref="T:System.Type" /> to look up</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.FindElementClass(System.String)">
      <summary>Finds and returns the element metadata object with the matching name.</summary>
      <returns>Returns the identified element metadata object.</returns>
      <param name="name">The class name.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.FindElementClass(System.Type)">
      <summary>Finds and returns the element metadata object for the element that implements the given type.</summary>
      <returns>Returns the requested element metadata object.</returns>
      <param name="type">The <see cref="T:SystemType" /> to look for.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.GetAllLevelChildElementClasses(Microsoft.Data.Schema.SchemaModel.ModelElementClass)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.GetAllLevelParentElementClasses(Microsoft.Data.Schema.SchemaModel.ModelElementClass)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.GetChildElementClasses(Microsoft.Data.Schema.SchemaModel.ModelElementClass)">
      <summary>Gets a list of composed or hierarchical children of an element metadata object.</summary>
      <returns>A list of element metadata objects.</returns>
      <param name="elementClass">The parent element metadata object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.GetImplementingElementClasses(System.Type)">
      <summary>Returns the list of element metadata objects that are associated with elements that implement the given interface.</summary>
      <returns>A list of element metadata objects.</returns>
      <param name="interfaceType">An interface type.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.GetInstantiatingAnnotationClass(System.Type)">
      <summary>Returns the annotation metadata objects that is used to instantiate the given type.</summary>
      <returns>Returns an annotation metadata object.</returns>
      <param name="type">The given <see cref="T:System.Type" />.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.GetInstantiatingElementClass(System.Type)">
      <summary>Returns the element metadata object that is used to instantiate the given type.</summary>
      <returns>Returns an element metadata object.</returns>
      <param name="interfaceType">An interface type.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.GetInstantiatingElementClassMapping(System.Collections.Generic.IList{System.Type})">
      <summary>Returns the mapping of element metadata objects to interface types.</summary>
      <returns>A dictionary where each item contains an interface type and an element metadata object.</returns>
      <param name="interfaceTypes">The queried interface types</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.GetInterfaceTypeByName(System.String)">
      <summary>Returns the type that matches the given interface name.</summary>
      <returns>A <see cref="T:System.Type" /> representing the requested interface.</returns>
      <param name="modelInterfaceName">The given interface name</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.GetParentElementClasses(Microsoft.Data.Schema.SchemaModel.ModelElementClass)">
      <summary>Gets direct composed or hierarchical parents for a given element metadata object.</summary>
      <returns>A list of parent element metadata objects.</returns>
      <param name="elementClass">An <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElementClass" /> metadata object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.GetParentElementClasses(System.Type)">
      <summary>Gets direct composed or hierarchical parent element metadata objects for a specified interface type.</summary>
      <returns>A list of parent element metadata objects.</returns>
      <param name="interfaceType">A <see cref="T:System.Type" /> representing an interface.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.HasComposingParent(Microsoft.Data.Schema.SchemaModel.ModelElementClass)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.HasHierarchicalParent(Microsoft.Data.Schema.SchemaModel.ModelElementClass)"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelSchema.MaxIdentifierPartLength">
      <summary>Gets the maximum length of any part of a model identifier.</summary>
      <returns>The maximum length of any part.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelSchema.MaxIdentifierParts">
      <summary>Represents the maximum number of identifier parts that can be in a model identifier.</summary>
      <returns>The number of allowable parts in an identifier.</returns>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ModelSchema.MaxPossibleIdentifierParts">
      <summary>Represents the maximum possible number of identifier parts that can be in a model identifier.</summary>
      <returns>The default implementation returns 1020.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelSchema.RootParentElementClasses">
      <summary>Gets all the element metadata objects that are root parents of any composed or hierarchical relationships for this model.</summary>
      <returns>A list of element metadata objects.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSchema.SetupIdentifierCreation(System.Func`1,System.Void,Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Specifies how to create identifiers.</summary>
      <param name="identifierFactoryMethod">The factory method for creating identifiers.</param>
      <param name="maxIdentifierPartLength"></param>
      <param name="maxIdentifierParts"></param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelSchema.Version">
      <summary>Gets or sets the schema version.</summary>
      <returns>The schema version.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelSerializationException">
      <summary>Represents the thrown exception when the model XML serializer encounters an error.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSerializationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelSerializationException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelSerializationException" /> class.</summary>
      <param name="info">The serialization information</param>
      <param name="context">The streaming context</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSerializationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelSerializationException" /> class.</summary>
      <param name="message">The error message</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSerializationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelSerializationException" /> class.</summary>
      <param name="message">The error message</param>
      <param name="innerException">The nested exception</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSerializationException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelSerializationException" /> class.</summary>
      <param name="message">The error message</param>
      <param name="innerException">The nested exception</param>
      <param name="lineNumber">The line number</param>
      <param name="linePosition">The position in the line</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSerializationException.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelSerializationException" /> class.</summary>
      <param name="message">The error message</param>
      <param name="lineNumber">The line number</param>
      <param name="linePosition">The position in the line</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelSerializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates this object.</summary>
      <param name="info">The serialization information</param>
      <param name="context">The streaming context</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelSerializationException.LineNumber">
      <summary>Gets the line number.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelSerializationException.LinePosition">
      <summary>Gets the position in the line.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelStore">
      <summary>Implements physical storage for a schema model instance.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.#ctor(Microsoft.Data.Schema.SchemaModel.ModelCollation,Microsoft.Data.Schema.SchemaModel.ModelSchema,System.String)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.AddAnnotation(Microsoft.Data.Schema.SchemaModel.IModelAnnotation)">
      <summary>Adds an annotation to the model.</summary>
      <param name="annotation">The annotation to be added</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.Attach(Microsoft.Data.Schema.SchemaModel.ModelSchema,System.String,System.Func`3)">
      <summary>Creates a new model store from the provided file.</summary>
      <returns>The newly created model store.</returns>
      <param name="modelSchema">The <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelSchema" /> for the new model store.</param>
      <param name="modelFileName">The file name for the serialized model store.</param>
      <param name="progressReporter">The method to call to report progress on creating the new model store.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelStore.BuiltInPropertyTypes"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CleanupExternalProperty(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.ModelPropertyClass)">
      <summary>When implemented in a derived class, releases resources used by an external property when the element is deleted.</summary>
      <param name="element">An <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> object.</param>
      <param name="propertyClass">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelPropertyClass" /> object.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelStore.Collation"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelStore.Comparer">
      <summary>Gets the collation comparer object.</summary>
      <returns>The collation comparer.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateAnnotation``1">
      <typeparam name="TAnnotation"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateAnnotation(Microsoft.Data.Schema.SchemaModel.ModelAnnotationClass)">
      <summary>Creates an annotation using the given annotation metadata.</summary>
      <returns>The created annotation.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateAnnotation(System.Type)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateElement``1">
      <typeparam name="TElement"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateElement(Microsoft.Data.Schema.SchemaModel.ModelElementClass)">
      <summary>Creates an element using the given element metadata object.</summary>
      <returns>The created element.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateElement(System.Type)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateElementHandle(Microsoft.Data.Schema.SchemaModel.IModelElement)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateExternalElement``1">
      <summary>Creates an external element of the specified type.</summary>
      <returns>An external element is an element referenced from an element in the current <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelSchema" />, but is not part of the current model.</returns>
      <typeparam name="TElement">A <see cref="T:System.Type" /> representing the type of element to return.</typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateExternalElement(Microsoft.Data.Schema.SchemaModel.ModelElementClass)">
      <summary>Creates an external element using the provided element metadata object.</summary>
      <returns>An external element.</returns>
      <param name="elementClass"></param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateExternalElement(System.Type)">
      <summary>Creates an external element.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" />.</returns>
      <param name="elementType">The type to be used to define the element, one of the instantiable interfaces.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateExternalNamedElement(Microsoft.Data.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Creates a named external element using the provided element metadata object and identifier.</summary>
      <returns>An external element.</returns>
      <param name="elementClass">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElementClass" /> metadata object.</param>
      <param name="identifier">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> object representing the name of the new external element.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateExternalNamedElement``1(Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Creates a named external element of the specified type using the provided element metadata object and identifier.</summary>
      <returns>An external element.</returns>
      <param name="identifier">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> object representing the name of the new external element.</param>
      <typeparam name="TElement">A <see cref="T:System.Type" /> derived from  <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" />.</typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateExternalNamedElement(System.Type,Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Creates a named external element using the provided type and identifier.</summary>
      <returns>An external element.</returns>
      <param name="elementType">A <see cref="T:System.Type" /> derived from <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" />.</param>
      <param name="identifier">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> object representing the name of the new external element.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateIdentifier(System.Boolean,System.Collections.Generic.ICollection{System.String})">
      <summary>Creates a unique model identifier using the provided collection of name parts.</summary>
      <returns>A unique identifier. If an identifier with the same parts already exists, that identifier is returned.</returns>
      <param name="overrideCase"></param>
      <param name="parts">An collection of part names.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateIdentifier(System.Boolean,System.String[])">
      <summary>Creates a unique model identifier using the provided case sensitive indication and array of part names.</summary>
      <returns>A unique identifier. If an identifier with the same parts already exists, that identifier is returned.</returns>
      <param name="overrideCase">true for case insensitive; false for case sensitive.</param>
      <param name="parts">A param array of part names.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateIdentifier(System.Collections.Generic.ICollection{System.String})">
      <summary>Creates a unique model identifier using the provided collection of part names.</summary>
      <returns>A unique identifier. If an identifier with the same parts already exists, that identifier is returned.</returns>
      <param name="parts">A <see cref="T:System.Collections.Generic.ICollection`1" /> of part names.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateIdentifier(System.Collections.Generic.IList{System.String},System.Boolean,System.Collections.Generic.ICollection{System.String})">
      <summary>Creates a unique model identifier using the provided list of external parts, indication of case sensitivity, and collection of part names.</summary>
      <returns>A unique identifier. If an identifier with the same parts already exists, that identifier is returned.</returns>
      <param name="externalParts">An <see cref="T:System.Collections.Generic.IList`1" /> of external reference name parts.</param>
      <param name="overrideCase">true for case insensitive; false for case sensitive.</param>
      <param name="parts">An <see cref="T:System.Collections.Generic.ICollection`1" /> of part names.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateIdentifier(System.Collections.Generic.IList{System.String},System.Boolean,System.String[])">
      <summary>Creates a unique model identifier using the provided list of external part names, indication of case sensitivity, and array of part names.</summary>
      <returns>A unique identifier. If an identifier with the same parts already exists, that identifier is returned.</returns>
      <param name="externalParts">An <see cref="T:System.Collections.Generic.IList`1" /> of external reference name parts.</param>
      <param name="overrideCase">true for case insensitive; false for case sensitive.</param>
      <param name="parts">An array of part names.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateIdentifier(System.Collections.Generic.IList{System.String},System.Collections.Generic.ICollection{System.String})">
      <summary>Creates a unique model identifier using the provided list of external part names, indication of case sensitivity, and collection of part names.</summary>
      <returns>A unique identifier. If an identifier with the same parts already exists, that identifier is returned.</returns>
      <param name="externalParts">An <see cref="T:System.Collections.Generic.IList`1" /> of external reference name parts.</param>
      <param name="parts">An <see cref="T:System.Collections.Generic.ICollection`1" /> of part names.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateIdentifier(System.String[])">
      <summary>Creates a unique model identifier using the provided array of part names.</summary>
      <returns>A unique identifier. If an identifier with the same parts already exists, that identifier is returned.</returns>
      <param name="parts">An array of part names.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateIdentifierHandle(Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Creates a handle for the provided identifier.</summary>
      <returns>A model identifier handle.</returns>
      <param name="identifier">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" />.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateNamedAnnotation(Microsoft.Data.Schema.SchemaModel.ModelAnnotationClass,Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Creates a named <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelAnnotation" /> object using the provided annotation metadata object and identifier.</summary>
      <returns>A named model annotation.</returns>
      <param name="annotationClass">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelAnnotationClass" /> metadata object.</param>
      <param name="identifier">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> containing the name of the annotation.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateNamedAnnotation``1(Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Creates a named <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelAnnotation" /> object using the provided model identifier.</summary>
      <returns>A named model annotation.</returns>
      <param name="identifier">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> containing the name of the annotation.</param>
      <typeparam name="TAnnotation">A <see cref="T:System.Type" /> derived from <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotation" />.</typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateNamedAnnotation(System.Type,Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Creates a named <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelAnnotation" /> object using the provided model identifier.</summary>
      <returns>A model annotation.</returns>
      <param name="annotationType">A T:System.Type derived from </param>
      <param name="identifier">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> containing the name of the annotation.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateNamedElement(Microsoft.Data.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Schema.SchemaModel.ModelIdentifier)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateNamedElement``1(Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <typeparam name="TElement"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.CreateNamedElement(System.Type,Microsoft.Data.Schema.SchemaModel.ModelIdentifier)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.DecodeIdentifier(System.String)">
      <summary>Returns an identifier that corresponds to the decoded value of the provided string.</summary>
      <returns>The corresponding model identifier.</returns>
      <param name="encodedIdentifier">The string to decode.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.DecodeIdentifier(System.String,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
      <summary>Returns an identifier that corresponds to the decoded value of the provided string.</summary>
      <param name="encodedIdentifier">The string to decode.</param>
      <param name="externalParts">(Output) An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.String" /> containing the external parts corresponding to the identifier.</param>
      <param name="internalParts">(Output) An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.String" /> containing the internal parts corresponding to the identifier.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.DeserializeExternalProperty(System.Xml.XmlReader,Microsoft.Data.Schema.SchemaModel.ModelPropertyClass)">
      <summary>Returns the value of an external property using the provided XML reader and property metadata object.</summary>
      <returns>An object representing the value of the external property.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> object.</param>
      <param name="propertyClass">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelPropertyClass" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.Detach(Microsoft.Data.Schema.SchemaModel.ModelStore,System.String)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.Dispose">
      <summary>Disposes the model.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.Dispose(System.Boolean)">
      <summary>Disposes the model.</summary>
      <param name="disposing">Shows the disposing</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.EncodeIdentifier(Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Returns a string representation of the identifier that is encoded with appropriate quotation and seperator characters to demarcate its parts.</summary>
      <returns>An object representing the value of the external property.</returns>
      <param name="identifier">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" />.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.Finalize"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.FixupAfterDeserialization"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.FreeElementHandle(Microsoft.Data.Schema.SchemaModel.ModelElementHandle)">
      <summary>Frees the provided element handle.</summary>
      <param name="handle">The <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElementHandle" /> to free.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.FreeIdentifierHandle(Microsoft.Data.Schema.SchemaModel.ModelIdentifierHandle)">
      <summary>Frees the provided element handle.</summary>
      <param name="handle">The <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifierHandle" /> to free.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetAllAnnotations">
      <summary>Returns a list of all annotations.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetAllAnnotations``1">
      <summary>Returns a list of the annotations on the model that implements the given type.</summary>
      <returns>A list of annotations.</returns>
      <typeparam name="TType">A <see cref="T:System.Type" /> derived from <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotation" />.</typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetAllAnnotations``1(Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Returns all annotations that implement the given type.</summary>
      <param name="identifier">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> object.</param>
      <typeparam name="TType">A <see cref="T:System.Type" /> derived from <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotation" />.</typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetAllAnnotations(Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Returns a list of all annotations named with the provided identifier.</summary>
      <param name="identifier">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" />.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetAllAnnotations(Microsoft.Data.Schema.SchemaModel.ModelIdentifier,System.Type)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetAllAnnotations(System.Type)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetAnnotations">
      <summary>Returns all the annotations on the model.</summary>
      <returns>A list of annotations.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetAnnotations``1">
      <typeparam name="TType"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetAnnotations``1(Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Returns all elements.</summary>
      <returns>A list of model elements.</returns>
      <param name="identifier"></param>
      <typeparam name="TType"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetAnnotations(Microsoft.Data.Schema.SchemaModel.ModelIdentifier)">
      <summary>Returns a list of the annotations on the model that matches the given identifiers.</summary>
      <returns>A list of annotations.</returns>
      <param name="identifier">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetAnnotations(Microsoft.Data.Schema.SchemaModel.ModelIdentifier,System.Type)">
      <summary>Returns all annotations that have the given identifier name, and implement the given type.</summary>
      <param name="identifier">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelIdentifier" />.</param>
      <param name="annotationType">A <see cref="T:System.Type" /> derived from <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotation" />.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetAnnotations(System.Type)">
      <summary>Returns a list of the annotations on the model that implements the given type.</summary>
      <returns>A list of annotations.</returns>
      <param name="annotationType">A <see cref="T:System.Type" /> derived from <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelAnnotation" />.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetElementHandleTarget(Microsoft.Data.Schema.SchemaModel.ModelElementHandle)">
      <summary>Returns a model element identified by the provided handle.</summary>
      <param name="handle">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElementHandle" />.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetElements(Microsoft.Data.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Schema.SchemaModel.ModelElementQueryFilter)">
      <summary>Returns elements that share the given metadata object as selected by the given filter.</summary>
      <returns>A list of model elements.</returns>
      <param name="elementClass">A T:Microsoft.Data.Schema.SchemaModel.ModelElementClass metadata object.</param>
      <param name="filter">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElementQueryFilter" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetElements``1(Microsoft.Data.Schema.SchemaModel.ModelElementQueryFilter)">
      <typeparam name="TElement"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetElements(Microsoft.Data.Schema.SchemaModel.ModelElementResolutionStatus)">
      <summary>Returns a list of the elements in the store that has the given resolution status.</summary>
      <param name="status">Specifies the resolution status</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetElements(Microsoft.Data.Schema.SchemaModel.ModelElementResolutionStatus,System.Int32)">
      <summary>Returns a list of the elements, determined by the count that has the given resolution status.</summary>
      <returns>A list of elements.</returns>
      <param name="status">Specifies the status</param>
      <param name="count">The number of elements asked</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetElements(Microsoft.Data.Schema.SchemaModel.ModelElementValidationStatus)">
      <summary>Returns a list of the elements in the store that has the given validation status.</summary>
      <param name="status">Specifies the validation status</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetElements(Microsoft.Data.Schema.SchemaModel.ModelElementValidationStatus,System.Int32)">
      <summary>Returns a list of the elements, determined by the count that has the given validation status.</summary>
      <param name="status">Specifies the status</param>
      <param name="count">The number of elements asked</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetElements(Microsoft.Data.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Schema.SchemaModel.ModelElementQueryFilter)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetElements``1(Microsoft.Data.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Schema.SchemaModel.ModelElementQueryFilter)">
      <typeparam name="TElement"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetElements(Microsoft.Data.Schema.SchemaModel.ModelIdentifier,Microsoft.Data.Schema.SchemaModel.ModelIdentifierGroup,Microsoft.Data.Schema.SchemaModel.ModelElementQueryFilter)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetElements(Microsoft.Data.Schema.SchemaModel.ModelIdentifier,System.Type,Microsoft.Data.Schema.SchemaModel.ModelElementQueryFilter)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetElements(System.Type,Microsoft.Data.Schema.SchemaModel.ModelElementQueryFilter)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetElementsCount(Microsoft.Data.Schema.SchemaModel.ModelElementResolutionStatus)">
      <summary>Returns the number of elements in the store that match the given status.</summary>
      <param name="status">Specifies the resolution status</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetElementsCount(Microsoft.Data.Schema.SchemaModel.ModelElementValidationStatus)">
      <summary>Returns the number of elements in the store that match the given status.</summary>
      <param name="status">Specifies the validation status</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetElementsFrom(System.String,Microsoft.Data.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Schema.SchemaModel.ModelElementQueryFilter)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetElementsFrom``1(System.String,Microsoft.Data.Schema.SchemaModel.ModelElementQueryFilter)">
      <typeparam name="TElement"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetElementsFrom(System.String,System.Type,Microsoft.Data.Schema.SchemaModel.ModelElementQueryFilter)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetExternalProperty``1(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.ModelPropertyClass)">
      <typeparam name="TProperty"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetIdentifier(System.Collections.Generic.ICollection{System.String})"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetIdentifier(System.Collections.Generic.IList{System.String},System.Collections.Generic.ICollection{System.String})"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetIdentifier(System.String[])">
      <summary>Gets the identifier from the model by scope ID and a string.</summary>
      <returns>A model identifier.</returns>
      <param name="parts"></param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetIdentifierHandleTarget(Microsoft.Data.Schema.SchemaModel.ModelIdentifierHandle)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.IsBuiltInPropertyType(System.Type)"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelStore.IsDisposing"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelStore.IsOptimizedForInsert"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelStore.IsOptimizedForQuery"></member>
    <member name="E:Microsoft.Data.Schema.SchemaModel.ModelStore.ModelChanged"></member>
    <member name="E:Microsoft.Data.Schema.SchemaModel.ModelStore.ModelOptimizationChanged"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.OnModelElementChanged(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.ModelEventType)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.OptimizeForInitialPopulation"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.OptimizeForQuery"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.RemoveAnnotation(Microsoft.Data.Schema.SchemaModel.IModelAnnotation)">
      <summary>Removes an annotation from the model.</summary>
      <param name="annotation">Specifies the annotation to remove</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelStore.Schema"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.SerializeExternalProperty(System.Xml.XmlWriter,Microsoft.Data.Schema.SchemaModel.ModelPropertyClass,System.Object)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.SetExternalProperty``1(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.ModelPropertyClass,``0)">
      <typeparam name="TProperty"></typeparam>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.TestWriteCount(System.Int32)">
      <summary>Tests the write count with the given value.</summary>
      <returns>true if the tested values are equal; otherwise, false.</returns>
      <param name="writeCount">The value to be tested</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.UpdateSourceNamePrefixes(System.String,System.String)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStore.ValidateWriteAccess"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelStore.WriteCount">
      <summary>Returns the value of the current write count.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ModelStoreSerializationContext">
      <summary>Defines the context of a serialization operation. This class supports the infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStoreSerializationContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelStoreSerializationContext" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ModelStoreSerializationContext.Dispose"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelStoreSerializationContext.FileName"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelStoreSerializationContext.ModelSchema">
      <summary>Gets or sets the model schema.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelSchema" /> object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ModelStoreSerializationContext.ModelStore">
      <summary>Gets or sets the model store.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelStore" /> object.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ParserConstructor">
      <summary>Provides the base class for a class that instantiates a class that will parse a schema model for a specifically derived <see cref="T:Microsoft.Data.Schema.SchemaModel.DatabaseSchemaProviderFamily" />.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ParserConstructor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ParserConstructor" /> class.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineer">
      <summary>Used to create a new <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> and populate the model with schema objects from a deployed database.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ReverseEngineer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineer" /> class.</summary>
    </member>
    <member name="E:Microsoft.Data.Schema.SchemaModel.ReverseEngineer.CancellationOpportunityReached">
      <summary>Raised occasionally while executing the <see cref="M:Microsoft.Data.Schema.SchemaModel.ReverseEngineer.Populate(Microsoft.Data.Schema.ErrorManager)" /> method to provide an opportunity to cancel the method.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ReverseEngineer.Dispose">
      <summary>Releases resources.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ReverseEngineer.Dispose(System.Boolean)">
      <summary>Releases resources.</summary>
      <param name="disposing">Specifies whether <see cref="M:Microsoft.Data.Schema.SchemaModel.ReverseEngineer.Dispose" /> is currently running</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ReverseEngineer.Populate(Microsoft.Data.Schema.ErrorManager)">
      <summary>Populates a data schema model with elements from a source database.</summary>
      <returns>The populated database model.</returns>
      <param name="errorManager">The <see cref="T:Microsoft.Data.Schema.ErrorManager" /> containing any errors encountered during the reverse engineering process.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ReverseEngineer.RaiseCancellationOpportunityEvent">
      <summary>Raises the <see cref="E:Microsoft.Data.Schema.SchemaModel.ReverseEngineer.CancellationOpportunityReached" /> event.</summary>
      <exception cref="T:System.OperationCanceledException">The <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> property has been set to true.</exception>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ReverseEngineer.ReverseEngineerErrorCategory">
      <summary>The value is "ReverseEngineerErrorCategory".</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerConstructor">
      <summary>Represents a constructor class with options to define a reverse engineer feature.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ReverseEngineerConstructor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerConstructor" /> class.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ReverseEngineerConstructor.ConnectionString">
      <summary>Gets or sets the connection string.</summary>
      <returns>The connection string.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ReverseEngineerConstructor.Filter"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ReverseEngineerConstructor.ModelBuilderOption">
      <summary>Gets or sets the model builder option value.</summary>
      <returns>The model builder option.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerException">
      <summary>Base exception class for the <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineer" /> component.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ReverseEngineerException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ReverseEngineerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerException" /> class from persisted XML data.</summary>
      <param name="info">The serialization information.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ReverseEngineerException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerException" /> class using the provided message.</summary>
      <param name="message">The error message</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ReverseEngineerException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerException" /> class.</summary>
      <param name="message">The error message.</param>
      <param name="inner">The nested exception.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilter">
      <summary>Provides a collection of filter elements used to determine which elements to import from the source database during reverse engineering in Visual Studio Application Lifecycle Management (ALM).</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilter" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilter.#ctor(System.Collections.Generic.IList{Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterElement})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilter" /> class using the provided list of elements.</summary>
      <param name="filterElements">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterElement" /> objects.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilter.AddFilterElement(Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterElement)">
      <summary>Adds a filter element to the collection.</summary>
      <param name="filterElement">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterElement" /> object to add.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilter.AddFilterElements(System.Collections.Generic.IList{Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterElement})">
      <summary>Adds a list of <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterElement" /> objects to the list of filter elements.</summary>
      <param name="filterElements">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterElement" /> objects.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilter.FilterElements">
      <summary>Gets a list of filter elements.</summary>
      <returns>The list of reverse engineer filter elements that represent the criteria for filtering.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterElement">
      <summary>Represents a filtering criterion to define which elements to import from the source database for reverse engineering.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterElement.#ctor(Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterType,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterElement" /> class using the provided filter type indication and the provided element type.</summary>
      <param name="filterType">A member of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterType" /> enumeration.</param>
      <param name="elementType">A <see cref="T:System.Type" /> indicating the type of element to filter.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterElement.#ctor(Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterType,System.Type,System.Collections.Generic.IList{System.String})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterElement" /> class using the provided filter type.</summary>
      <param name="filterType">A member of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterType" /> enumeration.</param>
      <param name="elementType">A <see cref="T:System.Type" /> indicating the type of element to filter.</param>
      <param name="elementNameParts">An <see cref="T:System.Collections.Generic.IList`1" /> of name parts.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterElement.ElementNameParts">
      <summary>Gets or sets a list of the parts of the element name.</summary>
      <returns>The list of parts in the name of the element.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterElement.ElementType">
      <summary>Gets or sets the <see cref="T:System.Type" /> of the element to filter for.</summary>
      <returns>The type of element.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterElement.FilterType">
      <summary>Gets or sets the type of filter.</summary>
      <returns>The filter type.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterType">
      <summary>Determines which model elements are to be imported from the source database during reverse engineering.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterType.TypeExclusive">
      <summary>Indicates that the filter should import all objects of the specified <see cref="T:System.Type" />, including composing child elements (columns are composing children of tables), but hierarchical children, such as indexes and constraints, are not imported.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterType.TypeHierarchicalInclusive">
      <summary>Indicates that the filter should do the same as with the <see cref="F:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterType.TypeExclusive" /> setting, but in addition, the filter should also import hierarchical children such as indexes, foreign keys, and other constraints.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterType.Object">
      <summary>Indicates that the filter should import a specifically named object along with all of its hierarchical descendents.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterType.ObjectWithDependencies">
      <summary>Indicates that the filter should do the same as with the <see cref="F:Microsoft.Data.Schema.SchemaModel.ReverseEngineerFilterType.Object" /> setting, but in addition, indicates that the filter should also import all dependent objects.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ScriptCache">
      <summary>Used to access the <see cref="T:Microsoft.Data.Schema.SchemaModel.ElementSource" /> for a given model element.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCache.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ScriptCache" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCache.AddToCustomMetadataCache(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Sets the metadata associated with a cache entry.</summary>
      <param name="canonicalFileName"> The identifier for the cache entry.</param>
      <param name="customMetadata"> A dictionary of named metadata strings.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.ScriptCache.AllCacheIdentifiers">
      <summary>Returns a collection of all the loaded cache identifiers.</summary>
      <returns>A collection of cache identifiers.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCache.CheckGetScriptArguments(System.Int32,System.Int32)">
      <summary>Ensures that the given offsets are non-negative.</summary>
      <param name="startOffset"> The offset to the starting point of the script in the file.</param>
      <param name="length"> The length of the script fragment.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">One or both of the parameters is negative. </exception>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCache.ContainsCacheIdentifier(System.String)">
      <summary>Returns whether the item represented by the given cache identifier is in the script cache.</summary>
      <returns>true if the identifier is in the cache; otherwise, false.</returns>
      <param name="cacheIdentifier"> The cache identifier to look for.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCache.Dispose">
      <summary>Releases resources.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCache.Dispose(System.Boolean)">
      <summary>When implemented in derived classes, releases resources.</summary>
      <param name="disposing"></param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCache.GenerateUniqueCacheIdentifier">
      <summary>Returns a unique identifier that can be used with the cache.</summary>
      <returns>A cache identifier.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCache.GetAllCustomSchemaDataFileNames">
      <summary>Returns a collection of custom schema data file names.</summary>
      <returns>A collection of file names.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCache.GetMetadata(System.String)">
      <summary>Returns a read-only dictionary of metadata associated with the provided cache identifier.</summary>
      <returns>A read-only dictionary of metadata.</returns>
      <param name="cacheIdentifier"> The cache identifier.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCache.GetObjectDataForCustomMetadataCache(System.Runtime.Serialization.SerializationInfo)">
      <summary>Adds custom metadata for all cache entries to the provided serialization information.</summary>
      <param name="info"> The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCache.GetScript(System.String)">
      <summary>Returns the script for the given cache identifier.</summary>
      <returns>A string containing the requested script.</returns>
      <param name="cacheIdentifier">A cache identifier.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCache.GetScript(System.String,System.Int32,System.Int32)">
      <summary>Returns the part of the script that is defined by the start offset and length in the given file.</summary>
      <returns>A string containing the requested script.</returns>
      <param name="cacheIdentifier">A cache identifier.</param>
      <param name="startOffset">The starting offset in characters.</param>
      <param name="length">The length of the script segment to retrieve.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCache.IsCustomMetadataCacheUnchanged(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Returns whether the custom metadata cache is unchanged.</summary>
      <returns>true if the provided metadata is not the same as the cached metadata; otherwise false.</returns>
      <param name="canonicalName">The cache identifier. </param>
      <param name="taskItemMetadata">A dictionary of metadata to compare.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCache.RemoveFromCustomMetadataCache(System.String)">
      <summary>Removes the metadata from the specified cache entry.</summary>
      <param name="canonicalFileName">The cache identifier.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCache.SetCustomMetadataCache(System.Runtime.Serialization.SerializationInfo)">
      <summary>Sets the custom metadata cache for serialization.</summary>
      <param name="info"> The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCache.TryGetMetadata(System.String,System.Collections.Generic.IDictionary{System.String,System.String}@)">
      <summary>Returns whether retrieving the specified metadata was successful.</summary>
      <returns>true if the metadata was successfully retrieved; otherwise, false.</returns>
      <param name="cacheIdentifier">The cache identifier.</param>
      <param name="metadata">(Output) The retrieved metadata.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ScriptCacheException">
      <summary>Represents the thrown exception when script cache classes encounter an error.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCacheException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ScriptCacheException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCacheException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ScriptCacheException" /> class.</summary>
      <param name="info">The serialization information</param>
      <param name="context">The streaming context</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCacheException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ScriptCacheException" /> class.</summary>
      <param name="message">The error message</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptCacheException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ScriptCacheException" /> class.</summary>
      <param name="message">The error message</param>
      <param name="innerException">The nested exception</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ScriptDomGenerator">
      <summary>Provides a base class for implementations capable of generating a script DOM from one model element; it is used to generate an <see cref="T:Microsoft.Data.Schema.ScriptDom.IScriptFragment" /> from an <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" />.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptDomGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ScriptDomGenerator" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptDomGenerator.GenerateScriptDom(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.ScriptDomOperation)">
      <summary>Generates a <see cref="T:Microsoft.Data.Schema.ScriptDom.IScriptFragment" />.</summary>
      <returns>A obje</returns>
      <param name="element">The source <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" />.</param>
      <param name="operation">The <see cref="T:Microsoft.Data.Schema.SchemaModel.ScriptDomOperation" /> to perform.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptDomGenerator.IsSupported(Microsoft.Data.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Schema.SchemaModel.ScriptDomOperation)">
      <summary>Returns whether the provided script operation is supported for the given element type.</summary>
      <returns>true if the operation is supported; otherwise, false.</returns>
      <param name="elementClass">An <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelElementClass" /> metadata object.</param>
      <param name="operation">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ScriptDomOperation" /> representing the operation to perform.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptDomGenerator.TryGenerateScriptDom(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.ScriptDomOperation,Microsoft.Data.Schema.ScriptDom.IScriptFragment@)">
      <summary>Generates a <see cref="T:Microsoft.Data.Schema.ScriptDom.IScriptFragment" /> using the provided model element and operation, and returns a value indicating whether the script was successfully generated.</summary>
      <returns>true if the script was successfully generated; otherwise, false.</returns>
      <param name="element">An <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> object.</param>
      <param name="operation">An <see cref="T:Microsoft.Data.Schema.SchemaModel.ScriptDomOperation" /> to test</param>
      <param name="fragment">(Output) The generated <see cref="T:Microsoft.Data.Schema.ScriptDom.IScriptFragment" /> object.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ScriptDomGeneratorConstructor">
      <summary>Used to create a <see cref="T:Microsoft.Data.Schema.SchemaModel.ScriptDomGenerator" />.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptDomGeneratorConstructor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ScriptDomGeneratorConstructor" /> class.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ScriptDomGeneratorException">
      <summary>Represents a script DOM generator exception.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptDomGeneratorException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ScriptDomGeneratorException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptDomGeneratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ScriptDomGeneratorException" /> class.</summary>
      <param name="info">The serialization information</param>
      <param name="context">The streaming content</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptDomGeneratorException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ScriptDomGeneratorException" /> class.</summary>
      <param name="message">The exception message</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptDomGeneratorException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ScriptDomGeneratorException" /> class.</summary>
      <param name="message">The exception message</param>
      <param name="innerException">The nested exception</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ScriptDomOperation">
      <summary>Specifies a script DOM operation.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ScriptDomOperation.Create">
      <summary>Operation is Create</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ScriptDomOperation.Drop">
      <summary>Operation is Drop</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.ScriptDomOperation.Alter">
      <summary>Operation is Alter</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.ScriptGeneratorConstructor">
      <summary>Provides a base class for creating a script generator for a specifically derived <see cref="T:Microsoft.Data.Schema.SchemaModel.DatabaseSchemaProviderFamily" />.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.ScriptGeneratorConstructor.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.ScriptGeneratorConstructor" /> class.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.SourceCodePosition">
      <summary>Specifies the location and position of the source code for a model element.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.SourceCodePosition.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.SourceCodePosition" /> class using the provided parameters. </summary>
      <param name="isPrimary">true if this is the primary source for the element it defines.</param>
      <param name="startOffset">Offset in the source file for the beginning of the definition.</param>
      <param name="length">The length of the definition.</param>
      <param name="startLine">The line on which the definition starts.</param>
      <param name="startColumn">The column at which the definition starts.</param>
      <param name="sourceName">Name of the source, usually a file name.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.SourceCodePosition.Equals(Microsoft.Data.Schema.SchemaModel.SourceCodePosition)">
      <summary>Returns whether the provided object and the current object are equal.</summary>
      <returns>true if the two objects are equal; otherwise, false.</returns>
      <param name="other">A <see cref="T:Microsoft.Data.Schema.SchemaModel.SourceCodePosition" /> to compare with the current object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.SourceCodePosition.Equals(System.Object)">
      <summary>Returns whether the provided object and the current object are equal.</summary>
      <returns>true if the two objects are equal; otherwise, false.</returns>
      <param name="obj">A <see cref="T:Microsoft.Data.Schema.SchemaModel.SourceCodePosition" /> to compare with the current object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.SourceCodePosition.GetHashCode"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.SourceCodePosition.IsPrimary">
      <summary>Gets whether this object represents the primary source for the element it defines.</summary>
      <returns>true if this is the primary source for the element it defines; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.SourceCodePosition.Length">
      <summary>Gets the offset in the source file for the beginning of the definition.</summary>
      <returns>The starting offset.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.SourceCodePosition.SourceName">
      <summary>Gets the name of the source, usually a file name.</summary>
      <returns>The source name.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.SourceCodePosition.StartColumn">
      <summary>Gets the number of the starting column for the definition.</summary>
      <returns>The starting column number.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.SourceCodePosition.StartLine">
      <summary>Gets the starting line number for the definition.</summary>
      <returns>The starting line number for the definition.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.SourceCodePosition.StartOffset">
      <summary>Gets the offset for the start of the definition in the source.</summary>
      <returns>The offset for the start of the definition.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumn">
      <summary>Models a database column.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumn.GetParentRelationship">
      <summary>Returns the <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelReverseSingleRelationship" /> between this <see cref="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumn" /> and its <see cref="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumnSource" />.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumn.GetTypeSpecifierRelationship">
      <summary>Returns the <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelSingleRelationship" /> between this <see cref="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumn" /> and its <see cref="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseTypeSpecifier" />.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumn.Parent">
      <summary>Gets the parent <see cref="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumnSource" /> of the database column.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumn.TypeSpecifier">
      <summary>Gets or sets the type of the data in the column.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumnSource">
      <summary>Models an abstract source of column data, such as a table or view.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumnSource.Columns">
      <summary>Gets the columns for this <see cref="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumnSource" />.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumnSource.GetColumnsRelationship">
      <summary>Returns the <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelMultiRelationship" /> between this <see cref="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumnSource" /> and the associated <see cref="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumn" /> instances.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumnSource.GetIndexesRelationship">
      <summary>Returns the <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelReverseMultiRelationship" /> between this <see cref="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumnSource" /> and any associated <see cref="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseIndex" /> instances.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumnSource.Indexes">
      <summary>Gets the indexes that apply to this <see cref="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumnSource" />.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseFunction">
      <summary>Models a database function.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseFunction.BodyDependencies">
      <summary>The collection of elements referenced by the body of the function.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseFunction.GetBodyDependenciesRelationship">
      <summary>Returns the <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelMultiRelationship" /> between this <see cref="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseFunction" /> and the <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> nodes that are referenced by the function body.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseIndex">
      <summary>Models a database index.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseIndex.GetIndexedObjectRelationship">
      <summary>Returns the <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelSingleRelationship" /> between this <see cref="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseIndex" /> and the corresponding <see cref="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseColumnSource" />.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseIndex.IndexedObject">
      <summary>The object that is indexed.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseProcedure">
      <summary>Models a database stored procedure.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseProcedure.BodyDependencies">
      <summary>Gets the collection of elements that are referenced by the body of the procedure.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseProcedure.GetBodyDependenciesRelationship">
      <summary>Gets the <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelMultiRelationship" /> between this <see cref="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseProcedure" /> and any <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> nodes that are referenced by the stored procedure body.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseTable">
      <summary>Models a database table.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseType">
      <summary>Models a primitive database type.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseTypeSpecifier">
      <summary>Models a database type that includes both base type and any parameters to the type, such as precision.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseTypeSpecifier.GetTypeRelationship">
      <summary>Gets the <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelSingleRelationship" /> between this <see cref="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseTypeSpecifier" /> and the related <see cref="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseType" />.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseTypeSpecifier.Type">
      <summary>Gets the underlying base type.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseView">
      <summary>Models a database view.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseView.GetQueryDependenciesRelationship">
      <summary>Returns the <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelMultiRelationship" /> between this <see cref="T:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseView" /> and the <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> nodes that are referenced in the query.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Abstract.IDatabaseView.QueryDependencies">
      <summary>Gets the collection of elements from which the information in the view is drawn.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Abstract.IScript">
      <summary>Represents any element. It does not care about shape, but it does care about body dependencies.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Abstract.IScript.BodyDependencies">
      <summary>Gets a list of body dependencies.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Abstract.IScript.BodyScript">
      <summary>Gets or sets a body script.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Abstract.IScript.GetBodyDependenciesRelationship">
      <summary>Returns a body dependencies relationship.</summary>
      <returns>Returns a <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelMultiRelationship`2" />.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Translation.DataSchemaModelTranslator">
      <summary>Provides a base for a translator class that translates a data schema model to a schema model for a specific database, such as the SQL Server schema model.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.DataSchemaModelTranslator.#ctor(Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorDefinition,Microsoft.Data.Schema.DatabaseSchemaProvider)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.DataSchemaModelTranslator.CanTranslateTo(System.Type)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.DataSchemaModelTranslator.InstantiateCopiedModel(Microsoft.Data.Schema.SchemaModel.ModelStore)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.DataSchemaModelTranslator.InstantiateTranslatedModel(Microsoft.Data.Schema.SchemaModel.ModelStore)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.DataSchemaModelTranslator.SetConstructorParametersForCopiedModel(Microsoft.Data.Schema.SchemaModel.DataSchemaModelConstructor,Microsoft.Data.Schema.SchemaModel.ModelStore)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.DataSchemaModelTranslator.SetConstructorParametersForTranslatedModel(Microsoft.Data.Schema.SchemaModel.DataSchemaModelConstructor,Microsoft.Data.Schema.SchemaModel.ModelStore)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.DataSchemaModelTranslator.Translate(Microsoft.Data.Schema.SchemaModel.ModelStore,System.Boolean)">
      <summary>Translates the provided schema model to the target type that is defined by the constructor.</summary>
      <returns>The translated target model object.</returns>
      <param name="fromModel">An existing data schema model that is defined by a <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelStore" /> object.</param>
      <param name="doNotDisposeFromModel">If false, dispose the <paramref name="fromModel" /> when the translation is completed.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Translation.DataSchemaModelTranslator.TranslatesTo"></member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslator">
      <summary>Provides a low-level base class for a translator.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslator.#ctor(Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorDefinition)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslator" /> class by using the provided definition. </summary>
      <param name="definition">A <see cref="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorDefinition" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslator.CanTranslateTo(Microsoft.Data.Schema.DatabaseSchemaProvider)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslator.CanTranslateTo(System.Type)">
      <summary>Returns a value that indicates whether the translator can translate to the provided type.</summary>
      <returns>true if the translator can translate to the provided type; otherwise, false.</returns>
      <param name="toDatabaseSchemaProvider">A <see cref="T:System.Type" /> that represents the target database schema provider.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslator.CompatibilityLevel">
      <summary>Gets the level of translation for this translator.</summary>
      <returns>One of the enumeration values that indicates the compatibility level of this translator.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslator.DatabaseSchemaProvider">
      <summary>Gets the associated database schema provider.</summary>
      <returns>The associated database schema provider.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslator.DataLossPossible">
      <summary>Gets a value that indicates whether the translation may cause data loss.</summary>
      <returns>true if the translation may cause data loss; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslator.Definition">
      <summary>Gets the associated translator definition.</summary>
      <returns>The translator definition.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslator.ExtensionHandle">
      <summary>Gets the handle for the inherent data schema extension.</summary>
      <returns>The handle for the extension.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslator.FindTranslators(Microsoft.Data.Schema.DatabaseSchemaProvider,System.Type,System.Collections.Generic.IList{Microsoft.Data.Schema.DataSchemaError}@)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslator.FindTranslators(Microsoft.Data.Schema.Extensibility.ExtensionManager,System.Type,System.Collections.Generic.IList{Microsoft.Data.Schema.DataSchemaError}@)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslator.InstantiateCopiedModel(Microsoft.Data.Schema.SchemaModel.ModelStore)">
      <summary>Returns the source data schema model as an instantiated object.</summary>
      <returns>The instantiated object.</returns>
      <param name="fromModel">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelStore" /> that represents the source model.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslator.InstantiateTranslatedModel(Microsoft.Data.Schema.SchemaModel.ModelStore)">
      <summary>Returns the target model as an instantiated object.</summary>
      <returns>The instantiated target model object.</returns>
      <param name="fromModel">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelStore" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslator.SetExtensionHandle(Microsoft.Data.Schema.Extensibility.ExtensionHandle)">
      <summary>Sets the handle for this extension object.</summary>
      <param name="handle">An <see cref="T:Microsoft.Data.Schema.Extensibility.ExtensionHandle" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslator.Translate(Microsoft.Data.Schema.SchemaModel.ModelStore,System.Boolean)">
      <summary>Translates the source model schema to the target model schema by using the provided source model.</summary>
      <returns>The translated target model.</returns>
      <param name="fromModel">A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelStore" /> object that represents the source model.</param>
      <param name="doNotDisposeFromModel">false indicates the <paramref name="fromModel" /> should be disposed after the translation is accomplished; true indicates it should not be disposed after the translation.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorAction">
      <summary>Provides a base class for classes that implement a specific action, such as <see cref="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorDemoteToAction" />.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorAction" /> class. </summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorCompatibilityLevel">
      <summary>Enumerates the levels of compatibility for a model translator.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorCompatibilityLevel.Upgrade">
      <summary>The translation upgrades the source schema to a higher-level target schema.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorCompatibilityLevel.Downgrade">
      <summary>The translation reduces the source schema model to a lower-level target schema model.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorCompatibilityLevel.Migrate">
      <summary>The translation recreates the source schema in the target schema.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorDefinition">
      <summary>Represents a container for the actions that accomplish the translation.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorDefinition.#ctor(Microsoft.Data.Schema.SchemaModel.ModelSchema,Microsoft.Data.Schema.SchemaModel.ModelSchema)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorDefinition" /> class by using the provided <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelSchema" /> objects. </summary>
      <param name="from">The source <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelSchema" /> object.</param>
      <param name="to">The target <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelSchema" /> object.</param>
      <exception cref="T:System.ArgumentNullException">One or both parameter values is null.</exception>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorDefinition.AddAction(Microsoft.Data.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorAction)"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorDefinition.FromSchema">
      <summary>Gets the starting or source model schema.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelSchema" /> object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorDefinition.ToSchema">
      <summary>Gets the target model schema.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.SchemaModel.ModelSchema" /> object.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorDemoteToAction">
      <summary>Transforms the source element into a target element that has fewer properties than the source element.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorDemoteToAction.#ctor(Microsoft.Data.Schema.SchemaModel.ModelElementClass)"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorDemoteToAction.ToClass">
      <summary>Gets the target element metadata.</summary>
      <returns>An <see cref="T:Microsoft.Data.Schema.SchemaModel.ElementClass" /> metadata object that represents the target element.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorDeprecateAction">
      <summary>Eliminates the source element from the target schema model.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorDeprecateAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorDeprecateAction" /> class.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorException">
      <summary>The exception that is thrown by a <see cref="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslator" /> or a related object in the <see cref="N:Microsoft.Data.Schema.SchemaModel.Translation" /> namespace when an error is encountered. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorException" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorException" /> class by using the provided message. </summary>
      <param name="message"></param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorException" /> class by using the provided inner exception. </summary>
      <param name="message">The error message.</param>
      <param name="innerException">The exception instance that caused the current exception. </param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorMergeToAction">
      <summary>Specifies how to merge several typed source elements into one element in the target schema.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorMergeToAction.#ctor(Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorAction)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorMergeToAction" /> class by using the provided default action. </summary>
      <param name="defaultAction">A <see cref="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorAction" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorMergeToAction.AddMergeCase(Microsoft.Data.Schema.SchemaModel.ModelElementClass)"></member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorPromoteToAction">
      <summary>Transforms the source element into a target element that has more properties than the source element.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorPromoteToAction.#ctor(Microsoft.Data.Schema.SchemaModel.ModelElementClass)"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorPromoteToAction.ToClass">
      <summary>Gets the metadata object that represents the target element.</summary>
      <returns>The metadata object that represents the target element.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorSplitToAction">
      <summary>Specifies how to split a typed source element into several other elements in the target schema.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorSplitToAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorSplitToAction" /> class. </summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorSplitToAction.AddRelationshipEntry(Microsoft.Data.Schema.SchemaModel.ModelElementClass,Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass,Microsoft.Data.Schema.SchemaModel.ModelElementClass)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorSplitToAction.AddSplitType(Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorSplitToType)">
      <summary>Adds a <see cref="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorSplitToType" /> to facilitate the creation of a class in the source element.</summary>
      <param name="type">An <see cref="T:Microsoft.Data.Schema.SchemaModel.ElementClass" /> metadata object that represents a new element in the target schema.</param>
    </member>
    <member name="T:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorSplitToType">
      <summary>Creates a new element in the target schema from one or more parts of an element in the source schema.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorSplitToType.#ctor(Microsoft.Data.Schema.SchemaModel.ModelElementClass)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorSplitToType.AttractDependent(Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass)"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorSplitToType.AttractRelationships">
      <summary>Gets a list of relationships that point to the element in the source schema that should also point to the new element when moved to the target schema.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:Microsoft.Data.Schema.SchemaModel.RelationshipClass" />.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorSplitToType.IncludeProperty(Microsoft.Data.Schema.SchemaModel.ModelPropertyClass)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorSplitToType.IncludeProperty(Microsoft.Data.Schema.SchemaModel.ModelPropertyClass,Microsoft.Data.Schema.SchemaModel.ModelPropertyClass)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorSplitToType.IncludeRelationship(Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass)"></member>
    <member name="M:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorSplitToType.IncludeRelationship(Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass,Microsoft.Data.Schema.SchemaModel.ModelRelationshipClass)"></member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorSplitToType.PropertiesMap">
      <summary>Gets a list of <see cref="T:Microsoft.Data.Schema.SchemaModel.PropertyClass" /> metadata objects that describe properties in the source schema and the corresponding list of <see cref="T:Microsoft.Data.Schema.SchemaModel.PropertyClass" /> metadata objects that describe properties that will be created in the target schema.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.Tuple`2" /> where <see cref="P:System.Tuple`2.Item1" /> is a source <see cref="T:Microsoft.Data.Schema.SchemaModel.PropertyClass" />, and <see cref="P:System.Tuple`2.Item2" /> holds the corresponding target <see cref="T:Microsoft.Data.Schema.SchemaModel.PropertyClass" />. </returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorSplitToType.RelationshipsMap">
      <summary>Gets a list of <see cref="T:Microsoft.Data.Schema.SchemaModel.RelationshipClass" /> metadata objects that describe relationships in the source schema and the corresponding list of <see cref="T:Microsoft.Data.Schema.SchemaModel.RelationshipClass" /> metadata objects that describe relationships to be created in the target schema.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.Tuple`2" /> where <see cref="P:System.Tuple`2.Item1" /> is a source <see cref="T:Microsoft.Data.Schema.SchemaModel.RelationshipClass" />, and <see cref="P:System.Tuple`2.Item2" /> holds the corresponding target <see cref="T:Microsoft.Data.Schema.SchemaModel.RelationshipClass" />. </returns>
    </member>
    <member name="P:Microsoft.Data.Schema.SchemaModel.Translation.ModelTranslatorSplitToType.ToClass">
      <summary>Gets the target <see cref="T:Microsoft.Data.Schema.SchemaModel.ElementClass" /> metadata object.</summary>
      <returns>An <see cref="T:Microsoft.Data.Schema.SchemaModel.ElementClass" /> object.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRule">
      <summary>Provides a base class for data rules.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRule.#ctor">
      <summary>Creates a new default instance of a class derived from the <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRule" />.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRule.Analyze(Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting,Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleExecutionContext)">
      <summary>Analyzes a model element and returns any problems detected in the element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> object that contains <see cref="T:Microsoft.Data.Schema.DataSchemaError" /> objects that represent any exceptions or errors encountered while analyzing the model element.</returns>
      <param name="ruleSetting">A <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting" /> object that defines the property to analyze.</param>
      <param name="context">A <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleExecutionContext" /> object that contains the model element, and other properties.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRule.PopulateProperties">
      <summary>Populates the values of the properties for the rule.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRule.RuleProperties">
      <summary>Gets or sets an object that contains the values of all data rule properties.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProperties" /> object containing the properties and values.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleAttribute">
      <summary>Defines a localizable namespace, category and identifier for the associated rule.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleAttribute" /> class.</summary>
      <param name="namespace"></param>
      <param name="id">A String containing an identifier that is unique within the namespace.</param>
      <param name="resourceBaseName">A String containing the base name for the localized resources.</param>
      <param name="displayNameResourceId">A String containing the resource identifier for the localized display name.</param>
      <param name="categoryResourceId">A String containing the resource identifier for the localized category.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleAttribute.CategoryResourceId">
      <summary>Gets or sets the resource identifier for the category.</summary>
      <returns>A String containing the resource identifier for the category.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleAttribute.DescriptionResourceId">
      <summary>Gets or sets the resource identifier for the description.</summary>
      <returns>A String containing the resource identifier for the description.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleAttribute.DisplayNameResourceId">
      <summary>Gets or sets the resource identifier for the display name.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleAttribute.FullId">
      <summary>Gets the values of the <see cref="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleAttribute.Namespace" /> property, the category, and the <see cref="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleAttribute.Id" /> property.</summary>
      <returns>A string containing the namespace, the category, and the identifier separated by dots and concatenated together.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleAttribute.HelpKeyword">
      <summary>Gets or sets a keyword that can be used to connect the rule to a specific page in the help file.</summary>
      <returns>A string containing a Help keyword that can be used to connect the rule to a specific page in the help file identified by the <see cref="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleAttribute.HelpUrl" />.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleAttribute.HelpUrl">
      <summary>Gets or sets the URL to the Help file.</summary>
      <returns>A string containing the path and filename of the Help file.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleAttribute.Id">
      <summary>Gets or sets the identifier for the rule.</summary>
      <returns>A string containing the identifier for the rule as set in the constructor of the attribute.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleAttribute.Namespace">
      <summary>Gets or sets the namespace for the rule.</summary>
      <returns>A string containing the namespace for the rule as set in the constructor of the attribute.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleAttribute.ResourceBaseName">
      <summary>Gets or sets the base name for the resources used in this class.</summary>
      <returns>A string containing the base name of the resources used in this class.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleAttribute.RuleScope">
      <summary>Gets or sets the scope for the associated rule.</summary>
      <returns>A member of the <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleScope" /> enumeration.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine">
      <summary>Loads and executes data rules.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine.ExecuteRules(Microsoft.Data.Schema.SchemaModel.DataSchemaModel,System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.StaticCodeAnalysis.DataRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.DataSchemaError}@)"></member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine.ExecuteRules(Microsoft.Data.Schema.SchemaModel.DataSchemaModel,System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.StaticCodeAnalysis.DataRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSuppressionContext})"></member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine.ExecuteRules(Microsoft.Data.Schema.SchemaModel.DataSchemaModel,System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.StaticCodeAnalysis.DataRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSuppressionContext},System.Func`1)"></member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine.ExecuteRules(Microsoft.Data.Schema.SchemaModel.DataSchemaModel,System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.DataSchemaError}@)"></member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine.ExecuteRules(Microsoft.Data.Schema.SchemaModel.DataSchemaModel,System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSuppressionContext})"></member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine.ExecuteRules(Microsoft.Data.Schema.SchemaModel.DataSchemaModel,System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSuppressionContext},System.Func`1)"></member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine.ExecuteRules(Microsoft.Data.Schema.SchemaModel.IModelElement,System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.StaticCodeAnalysis.DataRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.DataSchemaError}@)"></member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine.ExecuteRules(Microsoft.Data.Schema.SchemaModel.IModelElement,System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.StaticCodeAnalysis.DataRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSuppressionContext})"></member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine.ExecuteRules(Microsoft.Data.Schema.SchemaModel.IModelElement,System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.StaticCodeAnalysis.DataRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSuppressionContext},System.Func`1)"></member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine.ExecuteRules(Microsoft.Data.Schema.SchemaModel.IModelElement,System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.DataSchemaError}@)"></member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine.ExecuteRules(Microsoft.Data.Schema.SchemaModel.IModelElement,System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSuppressionContext})"></member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine.ExecuteRules(Microsoft.Data.Schema.SchemaModel.IModelElement,System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSuppressionContext},System.Func`1)"></member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine.ExecuteRules(System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.SchemaModel.IModelElement},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.StaticCodeAnalysis.DataRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.DataSchemaError}@)"></member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine.ExecuteRules(System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.SchemaModel.IModelElement},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.StaticCodeAnalysis.DataRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSuppressionContext})"></member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine.ExecuteRules(System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.SchemaModel.IModelElement},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.StaticCodeAnalysis.DataRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSuppressionContext},System.Func`1)"></member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine.ExecuteRules(System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.SchemaModel.IModelElement},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.DataSchemaError}@)"></member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine.ExecuteRules(System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.SchemaModel.IModelElement},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSuppressionContext})"></member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine.ExecuteRules(System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.SchemaModel.IModelElement},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting},System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.DataSchemaError}@,System.Predicate{Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSuppressionContext},System.Func`1)"></member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleEngine.GetRules``1(Microsoft.Data.Schema.DatabaseSchemaProvider,System.Collections.Generic.IEnumerable{Microsoft.Data.Schema.DataSchemaError}@)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleError">
      <summary>Represents an error, exception, or warning generated by executing a <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRule" />.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleError.#ctor(System.String,System.String,System.Int32,System.Int32,Microsoft.Data.Schema.ErrorSeverity,System.String)">
      <param name="message"></param>
      <param name="document"></param>
      <param name="line"></param>
      <param name="column"></param>
      <param name="severity"></param>
      <param name="fullRuleId"></param>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleError.FullRuleId"></member>
    <member name="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleException">
      <summary>Represents an exception thrown during the processing of a <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRule" />.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleException.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleExecutionContext">
      <summary>Defines the context within which a static code analysis rule is executed.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleExecutionContext.ModelElement">
      <summary>Gets the model element being analyzed.</summary>
      <returns>An <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleExecutionContext.SchemaModel">
      <summary>Gets the model being analyzed.</summary>
      <returns>An <see cref="T:Microsoft.Data.Schema.SchemaModel.DataSchemaModel" /> object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleExecutionContext.ScriptFragment">
      <summary>Gets the script fragment which defines the element being analyzed.</summary>
      <returns>An <see cref="T:Microsoft.Data.Schema.ScriptDom.IScriptFragment" /> object. May be null.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblem">
      <summary>Class to store the details of an issue that was detected by a rule</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblem.#ctor(Microsoft.Data.Schema.StaticCodeAnalysis.DataRule,System.String,Microsoft.Data.Schema.SchemaModel.IModelElement)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblem" /> class. </summary>
      <param name="rule">Rule</param>
      <param name="description">Description of the problem</param>
      <param name="modelElement"></param>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblem.Description">
      <summary>Gets or sets the description of the current issue.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblem.EndColumn">
      <summary>Gets or sets the end column of the token that contains the issue.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblem.EndLine">
      <summary>Gets or sets the end line of the token that contains the issue.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblem.Equals(System.Object)">
      <summary>Override the Equals method.</summary>
      <param name="obj"></param>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblem.ErrorMessageString">
      <summary>Gets the string to use to display the error message.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblem.FileName">
      <summary>Gets or sets the file that contains the detected issue.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblem.GetHashCode">
      <summary>Override the GetHashCode() methods.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblem.ModelElement">
      <summary>Gets or sets the <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> that is associated with the current issue.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblem.Rule">
      <summary>Gets or sets the rule that was used to detect the current issue.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblem.Severity">
      <summary>Gets or sets the severity of this problem.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblem.StartColumn">
      <summary>Gets or sets the start column of the token that contains the issue.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblem.StartLine">
      <summary>Gets or sets the start line of the token that contains the issue.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSeverity">
      <summary>Defines the severity levels used to report issues that were found through database code analysis.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSeverity.Unknown">
      <summary>Specifies that the severity of the issue is unknown.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSeverity.Warning">
      <summary>Specifies that the issue should be considered a warning.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSeverity.Error">
      <summary>Specifies that the issue should be considered an error.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSuppressionContext">
      <summary>The context information that is used to suppress an issue that was found through database code analysis.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSuppressionContext.#ctor(Microsoft.Data.Schema.SchemaModel.IModelElement,Microsoft.Data.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Schema.StaticCodeAnalysis.DataRule)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSuppressionContext" /> class. </summary>
      <param name="element">The element being analyzed</param>
      <param name="schemaModel">The schema model against which the rule is checking</param>
      <param name="rule">The rule that detected the problem</param>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSuppressionContext.ModelElement">
      <summary>Gets or sets the element being analyzed.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSuppressionContext.Rule">
      <summary>Gets or sets the rule that detected the issue.</summary>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSuppressionContext.SchemaModel">
      <summary>Gets or sets the Schema Model against which the rule is checked.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProperties">
      <summary>Provides a set of properties for a <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRule" /> object.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProperties.#ctor(Microsoft.Data.Schema.StaticCodeAnalysis.DataRule)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProperties" /> class.</summary>
      <param name="rule">A <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRule" /> object for which to provide properties.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProperties.Category">
      <summary>Gets the category for the data rule.</summary>
      <returns>A String containing the category for the data rule.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProperties.Description">
      <summary>Gets the description for the data rule.</summary>
      <returns>A String containing the description for the data rule.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProperties.DisplayName">
      <summary>Gets the display name for the data rule.</summary>
      <returns>A String containing the display name for the data rule.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProperties.FullId">
      <summary>Gets the full identifier for the data rule.</summary>
      <returns>A String containing the full identifier for the data rule.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProperties.HelpKeyword">
      <summary>Gets the help keyword for the data rule.</summary>
      <returns>A String containing the help keyword for the data rule.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProperties.HelpUrl">
      <summary>Gets the URI for the help file with information about this data rule.</summary>
      <returns>A <see cref="T:System.Uri" /> containing the URL for the data rule's Help file.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProperties.Id">
      <summary>Gets the unique identifier for the data rule.</summary>
      <returns>A String containing the unique ID for the data rule.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProperties.Namespace">
      <summary>Gets the name of the namespace for the data rule.</summary>
      <returns>A String containing the name of the data rule's Namespace. </returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProperties.RuleScope">
      <summary>Gets the data scope for the data rule.</summary>
      <returns>A member of the <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleScope" /> enumeration.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProperties.SupportedElementTypes">
      <summary>Gets the element types supported by the data rule.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> object containing a collection of Type objects.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleScope">
      <summary>Specifies the scope examined by a <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRule" />.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleScope.Element">
      <summary>Indicates that the rule examines a single element.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleScope.Model">
      <summary>Indicates that the rule examines the entire model.</summary>
    </member>
    <member name="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting">
      <summary>Contains the settings for a specific rule and a specific configuration.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting.#ctor(Microsoft.Data.Schema.StaticCodeAnalysis.DataRule)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting" /> class.</summary>
      <param name="rule">A <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRule" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting.#ctor(Microsoft.Data.Schema.StaticCodeAnalysis.DataRule,System.Boolean,Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleProblemSeverity)"></member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting.Enabled">
      <summary>Gets a value indicating whether the instance is enabled.</summary>
      <returns>true if this instance is enabled; otherwise false.</returns>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting.Equals(System.Object)">
      <summary>Returns a value indicating whether the provided data rule setting is equal to the current instance.</summary>
      <returns>True if all property values in the <paramref name="obj" /> are equal to those of this <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting" /> object.</returns>
      <param name="obj">A <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting" /> object.</param>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting.GetHashCode"></member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting.Rule">
      <summary>Gets the associated <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRule" /> to which the setting values apply.</summary>
      <returns>A <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRule" /> object.</returns>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.DataRuleSetting.Severity">
      <summary>Gets a value indicating the severity level for any problems caused by using these settings.</summary>
      <returns>A member of the <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.ProblemSeverity" /> enumeration.</returns>
    </member>
    <member name="T:Microsoft.Data.Schema.StaticCodeAnalysis.StaticCodeAnalysisRule">
      <summary>Provides a base class for a group or category of similar rules.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.StaticCodeAnalysisRule.#ctor">
      <summary>Creates a new default instance of the <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.StaticCodeAnalysisRule" />.</summary>
    </member>
    <member name="F:Microsoft.Data.Schema.StaticCodeAnalysis.StaticCodeAnalysisRule.StaticCodeAnalysisProblemCategory"></member>
    <member name="T:Microsoft.Data.Schema.StaticCodeAnalysis.SupportedElementTypeAttribute">
      <summary>Indicates the type of element against which a <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRule" /> should run.</summary>
    </member>
    <member name="M:Microsoft.Data.Schema.StaticCodeAnalysis.SupportedElementTypeAttribute.#ctor(System.Type)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.SupportedElementTypeAttribute" /> class using the supplied Type.</summary>
      <param name="elementType">A <see cref="T:System.Type" /> for a type of element to be examined.</param>
    </member>
    <member name="P:Microsoft.Data.Schema.StaticCodeAnalysis.SupportedElementTypeAttribute.ElementType">
      <summary>The type of element that can be analyzed by the associated <see cref="T:Microsoft.Data.Schema.StaticCodeAnalysis.DataRule" />.</summary>
      <returns>A <see cref="T:System.Type" /> for an <see cref="T:Microsoft.Data.Schema.SchemaModel.IModelElement" /> object.</returns>
    </member>
  </members>
</doc>